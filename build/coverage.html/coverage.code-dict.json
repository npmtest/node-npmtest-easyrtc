{"/home/travis/build/npmtest/node-npmtest-easyrtc/test.js":"/* istanbul instrument in package npmtest_easyrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-easyrtc/lib.npmtest_easyrtc.js":"/* istanbul instrument in package npmtest_easyrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_easyrtc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_easyrtc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-easyrtc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-easyrtc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_easyrtc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_easyrtc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_easyrtc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_easyrtc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_easyrtc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_easyrtc.__dirname + '/lib.npmtest_easyrtc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/index.js":"// The EasyRTC server files are in the lib folder\r\nmodule.exports = require('./lib/easyrtc_server');","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/lib/easyrtc_server.js":"/* global module, require */\r\n\r\n/**\r\n * @file        Entry library for EasyRTC server. Houses the primary listen function.\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\r\n\r\nvar g           = require(\"./general_util\");        // General utility functions local module\r\ng.checkModules(); // Check to ensure all required modules are available\r\n\r\nvar _           = require(\"underscore\");            // General utility functions external module\r\nvar pub         = require(\"./easyrtc_public_obj\");  // EasyRTC public object\r\n\r\n\r\nvar server = module.exports;\r\n\r\n/**\r\n * Listener for starting the EasyRTC server. The successCallback can be used to determine when EasyRTC is fully running.\r\n *\r\n * @param       {Object} httpApp        express http object. Allows EasyRTC to interact with the http server.\r\n * @param       {Object} socketServer   socket.io server object. Allows EasyRTC to interact with the socket server.\r\n * @param       {Object} options        EasyRTC options object. Sets configurable options. If null, than defaults will be used.\r\n * @param       {function(Error, Object)} listenCallback Called when the start up routines are complete. In form of successCallback(err, pub). The parameter 'err' will null unless an error occurs and 'pub' is the EasyRTC public object for interacting with the server.\r\n */\r\nserver.listen = function(httpApp, socketServer, options, listenCallback) {\r\n    pub.util.logInfo(\"Starting EasyRTC Server (v\" + pub.getVersion() +\") on Node (\" + process.version + \")\");\r\n\r\n    // Set server object references in public object\r\n    pub.httpApp         = httpApp;\r\n    pub.socketServer    = socketServer;\r\n\r\n    if (options){\r\n        pub.util.logDebug(\"Overriding options\", options);\r\n\r\n        for (var optionName in options) {\r\n            pub.setOption(optionName, options[optionName]);\r\n        }\r\n    }\r\n\r\n    pub.util.logDebug(\"Emitting event 'startup'\");\r\n    pub.events.emit(\"startup\", function(err) {\r\n        if (err) {\r\n            pub.util.logError(\"Error occurred upon startup\", err);\r\n            if(_.isFunction(listenCallback)) {\r\n                listenCallback(err, null);\r\n            }\r\n        }\r\n        else {\r\n            pub.util.logInfo(\"EasyRTC Server Ready For Connections (v\"+ pub.getVersion() + \")\");\r\n            if(_.isFunction(listenCallback)) {\r\n                listenCallback(err, pub);\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns an EasyRTC options object with a copy of the default options.\r\n *\r\n * @returns     {Object}                EasyRTC options object\r\n */\r\nserver.getDefaultOptions = function() {\r\n    var defaultOptions = require(\"./easyrtc_default_options\");\r\n    return g.deepCopy(defaultOptions);\r\n};\r\n\r\n/**\r\n * Sets listener for a given EasyRTC event. Only one listener is allowed per event. Any other listeners for an event are removed before adding the new one.\r\n *\r\n * @private\r\n * @param       {String} event          Listener name.\r\n * @param       {Function} listener       Function\r\n */\r\nserver.on = function(event, listener) {\r\n    if (event && _.isFunction(listener)) {\r\n        pub.events.removeAllListeners(event);\r\n        pub.events.on(event, listener);\r\n    }\r\n    else {\r\n        pub.util.logError(\"Unable to add listener to event '\" + event + \"'\");\r\n    }\r\n};\r\n\r\n/**\r\n * Removes all listeners for an event. If there is a default EasyRTC listener, it will be added.\r\n *\r\n * @private\r\n * @param       {String} event          Listener name.\r\n */\r\nserver.removeAllListeners = function(event) {\r\n    if (event) {\r\n        pub.events.removeAllListeners(event);\r\n        pub.events.setDefaultListener(event);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the listeners for an event.\r\n *\r\n * @private\r\n * @param       {String} event          Listener name.\r\n */\r\nserver.listeners = pub.events.listeners;\r\n\r\n/**\r\n * Expose all event functions\r\n */\r\nserver.events = pub.events;\r\n\r\n/**\r\n * Expose public utility functions\r\n */\r\nserver.util = pub.util;\r\n\r\n/**\r\n * Sets individual option.\r\n *\r\n * @param       {Object} option Option name\r\n * @param       {Object} value  Option value\r\n * @returns     {Boolean} true on success, false on failure\r\n */\r\nserver.setOption = pub.setOption;\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/lib/general_util.js":"/* global module, require, process, console */\r\n\r\n/**\r\n * @file        General utility functions not specific to EasyRTC\r\n * @module      general_util\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\r\n\r\nvar util = require(\"util\");\r\n\r\n/**\r\n *  Object to hold EasyRTC General Utility methods and classes.\r\n *\r\n * @class\r\n */\r\nvar g = module.exports;\r\n\r\n/**\r\n * Performs a deep copy of an object, returning the duplicate.\r\n * Do not use on objects with circular references.\r\n *\r\n * @param       {Object} input          Input variable (or object) to be copied.\r\n * @returns     {Object}                New copy of variable.\r\n */\r\ng.deepCopy = function(input) {\r\n\r\n    if (\r\n        input === null || input === undefined ||\r\n            typeof input !== \"object\" || \r\n                (input.constructor !== Object && input.constructor !== Array)\r\n    ) {\r\n        return input;\r\n    }\r\n\r\n    if (\r\n        input.constructor === Boolean || \r\n            input.constructor === Date || \r\n                input.constructor === Function || \r\n                    input.constructor === Number || \r\n                        input.constructor === RegExp || \r\n                            input.constructor === String\r\n    ) {\r\n        return new input.constructor(input);\r\n    }\r\n\r\n    var copy;\r\n    if (input instanceof Array) {\r\n        copy = [];\r\n        for (var i = 0, len = input.length; i < len; i++) {\r\n            copy[i] = g.deepCopy(input[i]);\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    if (input instanceof Object) {\r\n        copy = {};\r\n        for (var key in input) {\r\n            if (input.hasOwnProperty(key)) {\r\n                copy[key] = g.deepCopy(input[key]);\r\n            }\r\n        }\r\n        return copy;\r\n    }\r\n    return null;\r\n};\r\n\r\n\r\n/**\r\n * Returns a field from the package.json file in the module root.\r\n * Giving null field name will return the full contents of the file.\r\n * If a field name is provided, it will return null if the field not found.\r\n *\r\n * @param       {Object} fieldName      Name of field you wish to return.\r\n * @returns     {Object}                Value of the given field, or the full contents of the file if a null field is given.\r\n */\r\ng.getPackageData = function(fieldName) {\r\n    var packageFile = require(\"../package\");\r\n    if (!fieldName) {\r\n        return g.deepCopy(packageFile);\r\n    }\r\n    else if (packageFile[fieldName]) {\r\n        return g.deepCopy(packageFile[fieldName]);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\n\r\n\r\n/* An abstract error object which should be easy to extend for custom Error classes.\r\n *\r\n * @copyright Based on code in article by Dustin Seno.\r\n *\r\n * @param   {String}    Custom error message.\r\n * @param   {Object}    Constructor property.\r\n *\r\n */\r\ng.AbstractError = function(msg, constr){\r\n    Error.captureStackTrace(this, constr || this);\r\n    this.message = msg || \"Error\";\r\n};\r\nutil.inherits(g.AbstractError, Error);\r\ng.AbstractError.prototype.name = \"Abstract Error\";\r\n\r\n\r\n/**\r\n * Reads package.json and ensures all required modules are installed. Will exit if one or more is not found.\r\n */\r\ng.checkModules = function () {\r\n\r\n    var easyrtcPackage;\r\n\r\n    try {\r\n        easyrtcPackage = require(\"../package\");\r\n    }\r\n    catch( e ) {\r\n        console.log(\"ERROR: Could not load package.json from project root. This file is required for reading project properties.\");\r\n        process.exit(1);\r\n    }\r\n\r\n    var moduleExists = function (modName) {\r\n        try { return require.resolve(modName); }\r\n        catch( e ) { return false; }\r\n    };\r\n\r\n    var isModuleMissing = false;\r\n    for (var key in easyrtcPackage.dependencies) {\r\n        if (!moduleExists(key)) {\r\n            isModuleMissing = true;\r\n            console.log(\"ERROR: Missing module '\" + key + \"'\");\r\n        }\r\n    }\r\n\r\n    if (isModuleMissing) {\r\n        console.log(\"ERROR: Required modules are not installed. Run 'npm install' from command line.\");\r\n        process.exit(1);\r\n    }\r\n\r\n    delete require.cache[easyrtcPackage];\r\n};\r\n\r\n\r\n/*\r\n * Return a random string of characters\r\n *\r\n * @param {Integer} stringLength    Number of random characters the returned string should contain. Defaults to 16.\r\n * @param {String}  chars           Available characters to use in a string. Defaults to [A-Za-z0-9]\r\n * @returns {String}                Generated random string\r\n *\r\n */\r\ng.randomString = function(stringLength, chars){\r\n    var newString = \"\";\r\n\r\n    if (!chars) {\r\n        chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz0123456789\";\r\n    }\r\n\r\n    if (!stringLength) {\r\n        stringLength = 16;\r\n    }\r\n\r\n    for (var i=0; i < stringLength; i=i+1) {\r\n        var randomNumber = Math.floor(Math.random() * chars.length);\r\n        newString += chars.substring(randomNumber, randomNumber + 1);\r\n    }\r\n\r\n    return newString;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/lib/easyrtc_public_obj.js":"/* global module, require */\r\n\r\n/**\r\n * Public interface for interacting with EasyRTC. Contains the public object returned by the EasyRTC listen() function.\r\n *\r\n * @module      easyrtc_public_obj\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\r\n\r\nvar events = require(\"events\");\r\nvar async = require(\"async\");\r\nvar _ = require(\"underscore\");                // General utility functions external module\r\nvar g = require(\"./general_util\");            // General utility functions local module\r\n\r\nvar e = require(\"./easyrtc_private_obj\");     // EasyRTC private object\r\nvar eventListener = require(\"./easyrtc_default_event_listeners\"); // EasyRTC default event listeners\r\nvar eu = require(\"./easyrtc_util\");            // EasyRTC utility functions\r\n\r\n/**\r\n * The public object which is returned by the EasyRTC listen() function. Contains all public methods for interacting with EasyRTC server.\r\n *\r\n * @class\r\n */\r\nvar pub = module.exports;\r\n\r\n/**\r\n * Alias for Socket.io server object. Set during Listen().\r\n *\r\n * @member  {Object}    pub.socketServer\r\n * @example             <caption>Dump of all Socket.IO clients to server console</caption>\r\n * console.log(pub.socketServer.connected);\r\n */\r\npub.socketServer = null;\r\n\r\n\r\n/**\r\n * Alias for Express app object. Set during Listen()\r\n *\r\n * @member  {Object}    pub.httpApp\r\n */\r\npub.httpApp = null;\r\n\r\n\r\n/**\r\n * Sends an array of all application names to a callback.\r\n *\r\n * @param   {function(Error, Array.<string>)} callback Callback with error and array containing all application names.\r\n */\r\npub.getAppNames = function(callback) {\r\n    var appNames = [];\r\n    for (var key in e.app) {\r\n        appNames.push(key);\r\n    }\r\n    callback(null, appNames);\r\n};\r\n\r\n\r\n/**\r\n * Gets app object for application which has an authenticated client with a given easyrtcid\r\n *\r\n * @param       {String} easyrtcid      Unique identifier for an EasyRTC connection.\r\n * @param       {function(?Error, Object=)} callback Callback with error and application object\r\n */\r\npub.getAppWithEasyrtcid = function(easyrtcid, callback) {\r\n    for (var key in e.app) {\r\n        if (e.app[key].connection[easyrtcid] && e.app[key].connection[easyrtcid].isAuthenticated) {\r\n            pub.app(key, callback);\r\n            return;\r\n        }\r\n    }\r\n    pub.util.logWarning(\"Can not find connection [\" + easyrtcid + \"]\");\r\n    callback(new pub.util.ConnectionWarning(\"Can not find connection [\" + easyrtcid + \"]\"));\r\n};\r\n\r\n\r\n/**\r\n * Sends the count of the number of connections to the server to a provided callback.\r\n *\r\n * @param       {function(?Error, Number)} callback Callback with error and array containing all easyrtcids.\r\n */\r\npub.getConnectionCount = function(callback) {\r\n    callback(null, pub.getConnectionCountSync());\r\n};\r\n\r\n\r\n/**\r\n * Sends the count of the number of connections to the server to a provided callback.\r\n *\r\n * @returns     {Number} The current number of connections in a room.\r\n */\r\npub.getConnectionCountSync = function() {\r\n    var connectionCount = 0;\r\n    for (var key in e.app) {\r\n        connectionCount = connectionCount + _.size(e.app[key].connection);\r\n    }\r\n    return connectionCount;\r\n};\r\n\r\n\r\n/**\r\n * Gets connection object for connection which has an authenticated client with a given easyrtcid\r\n *\r\n * @param       {string} easyrtcid      EasyRTC unique identifier for a socket connection.\r\n * @param       {function(?Error, Object=)} callback Callback with error and connection object\r\n */\r\npub.getConnectionWithEasyrtcid = function(easyrtcid, callback) {\r\n    for (var key in e.app) {\r\n        if (e.app[key].connection[easyrtcid] && e.app[key].connection[easyrtcid].isAuthenticated) {\r\n            pub.app(key, function(err, appObj) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                appObj.connection(easyrtcid, callback);\r\n            });\r\n            return;\r\n        }\r\n    }\r\n    pub.util.logWarning(\"Can not find connection [\" + easyrtcid + \"]\");\r\n    callback(new pub.util.ConnectionWarning(\"Can not find connection [\" + easyrtcid + \"]\"));\r\n};\r\n\r\n\r\n/**\r\n * Gets individual option value. The option value returned is for the server level.\r\n * \r\n * Note that some options can be set at the application or room level. If an option has not been set at the room level, it will check to see if it has been set at the application level, if not it will revert to the server level.\r\n *\r\n * @param       {String}    optionName  Option name\r\n * @return      {*}                     Option value (can be any JSON type)\r\n */\r\npub.getOption = function(optionName) {\r\n    if(typeof e.option[optionName] === \"undefined\"){\r\n        pub.util.logError(\"Unknown option requested. Unrecognised option name '\" + optionName + \"'.\");\r\n        return null;\r\n    }\r\n    return e.option[optionName];\r\n};\r\n\r\n\r\n/**\r\n * Gets EasyRTC Version. The format is in a major.minor.patch format with an optional letter following denoting alpha or beta status. The version is retrieved from the package.json file located in the EasyRTC project root folder.\r\n *\r\n * @return      {string}                EasyRTC Version\r\n */\r\npub.getVersion = function() {\r\n    return e.version;\r\n};\r\n\r\n\r\n/**\r\n * Returns the EasyRTC private object containing the current state. This should only be used for debugging purposes.\r\n *\r\n * @private\r\n * @return      {Object}                EasyRTC private object\r\n */\r\npub._getPrivateObj = function() {\r\n    return e;\r\n};\r\n\r\n\r\n/**\r\n * Sets individual option. The option value set is for the server level.\r\n * \r\n * Note that some options can be set at the application or room level. If an option has not been set at the room level, it will check to see if it has been set at the application level, if not it will revert to the server level.\r\n *\r\n * @param       {Object} optionName     Option name\r\n * @param       {Object} optionValue    Option value\r\n * @return      {Boolean}               true on success, false on failure\r\n */\r\npub.setOption = function(optionName, optionValue) {\r\n    // Can only set options which currently exist\r\n    if (typeof e.option[optionName] == \"undefined\") {\r\n        pub.util.logError(\"Error setting option. Unrecognised option name '\" + optionName + \"'.\");\r\n        return false;\r\n    }\r\n\r\n    e.option[optionName] = pub.util.deepCopy(optionValue);\r\n    return true;\r\n};\r\n\r\n\r\n/**\r\n * EasyRTC Event handling object which contain most methods for interacting with EasyRTC events. For convenience, this class has also been attached to the application, connection, session, and room classes.\r\n * @class\r\n */\r\npub.events = {};\r\n\r\n\r\n/**\r\n * EasyRTC EventEmitter.\r\n * \r\n * @private\r\n */\r\npub.events._eventListener = new events.EventEmitter();\r\n\r\n\r\n/**\r\n * Expose event listener's emit function.\r\n * \r\n * @param       {string} eventName      EasyRTC event name.\r\n * @param       {...*} eventParam       The event parameters\r\n */\r\npub.events.emit = pub.events._eventListener.emit.bind(pub.events._eventListener);\r\n\r\n\r\n/**\r\n * Runs the default EasyRTC listener for a given event.\r\n * \r\n * @param       {string} eventName      EasyRTC event name.\r\n * @param       {...*} eventParam       The event parameters\r\n */\r\npub.events.emitDefault = function() {\r\n    if (!pub.events.defaultListeners[arguments['0']]) {\r\n        console.error(\"Error emitting listener. No default for event '\" + arguments['0'] + \"' exists.\");\r\n        return;\r\n    }\r\n    pub.events.defaultListeners[Array.prototype.shift.call(arguments)].apply(this, arguments);\r\n};\r\n\r\n\r\n/**\r\n * Resets the listener for a given event to the default listener. Removes other listeners.\r\n *\r\n * @param       {string} eventName      EasyRTC event name.\r\n */\r\npub.events.setDefaultListener = function(eventName) {\r\n    if (!_.isFunction(pub.events.defaultListeners[eventName])) {\r\n        console.error(\"Error setting default listener. No default for event '\" + eventName + \"' exists.\");\r\n    }\r\n    pub.events._eventListener.removeAllListeners(eventName);\r\n    pub.events._eventListener.on(eventName, pub.events.defaultListeners[eventName]);\r\n};\r\n\r\n\r\n/**\r\n * Resets the listener for all EasyRTC events to the default listeners. Removes all other listeners.\r\n */\r\npub.events.setDefaultListeners = function() {\r\n    pub.events._eventListener.removeAllListeners();\r\n    for (var currentEventName in pub.events.defaultListeners) {\r\n        if (_.isFunction(pub.events.defaultListeners[currentEventName])) {\r\n            pub.events._eventListener.on(currentEventName, pub.events.defaultListeners[currentEventName]);\r\n        } else {\r\n            throw new pub.util.ServerError(\"Error setting default listener. No default for event '\" + currentEventName + \"' exists.\");\r\n        }\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Map of EasyRTC event listener names to their default functions. This map can be used to run a default function manually.\r\n */\r\npub.events.defaultListeners = {\r\n    \"authenticate\": eventListener.onAuthenticate,\r\n    \"authenticated\": eventListener.onAuthenticated,\r\n    \"connection\": eventListener.onConnection,\r\n    \"disconnect\": eventListener.onDisconnect,\r\n    \"getIceConfig\": eventListener.onGetIceConfig,\r\n    \"roomCreate\": eventListener.onRoomCreate,\r\n    \"roomJoin\": eventListener.onRoomJoin,\r\n    \"roomLeave\": eventListener.onRoomLeave,\r\n    \"log\": eventListener.onLog,\r\n    \"shutdown\": eventListener.onShutdown,\r\n    \"startup\": eventListener.onStartup,\r\n    \"easyrtcAuth\": eventListener.onEasyrtcAuth,\r\n    \"easyrtcCmd\": eventListener.onEasyrtcCmd,\r\n    \"easyrtcMsg\": eventListener.onEasyrtcMsg,\r\n    \"emitEasyrtcCmd\": eventListener.onEmitEasyrtcCmd,\r\n    \"emitEasyrtcMsg\": eventListener.onEmitEasyrtcMsg,\r\n    \"emitError\": eventListener.onEmitError,\r\n    \"emitReturnAck\": eventListener.onEmitReturnAck,\r\n    \"emitReturnError\": eventListener.onEmitReturnError,\r\n    \"emitReturnToken\": eventListener.onEmitReturnToken,\r\n    \"msgTypeGetIceConfig\": eventListener.onMsgTypeGetIceConfig,\r\n    \"msgTypeGetRoomList\": eventListener.onMsgTypeGetRoomList,\r\n    \"msgTypeRoomJoin\": eventListener.onMsgTypeRoomJoin,\r\n    \"msgTypeRoomLeave\": eventListener.onMsgTypeRoomLeave,\r\n    \"msgTypeSetPresence\": eventListener.onMsgTypeSetPresence,\r\n    \"msgTypeSetRoomApiField\": eventListener.onMsgTypeSetRoomApiField\r\n};\r\n\r\n\r\n/**\r\n * Sets listener for a given EasyRTC event. Only one listener is allowed per event. Any other listeners for an event are removed before adding the new one. See the events documentation for expected listener parameters.\r\n *\r\n * @param       {string} eventName      Listener name.\r\n * @param       {function} listener     Function to be called when listener is fired\r\n */\r\npub.events.on = function(eventName, listener) {\r\n    if (eventName && _.isFunction(listener)) {\r\n        pub.events._eventListener.removeAllListeners(eventName);\r\n        pub.events._eventListener.on(eventName, listener);\r\n    }\r\n    else {\r\n        pub.util.logError(\"Unable to add listener to event '\" + eventName + \"'\");\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Removes all listeners for an event. If there is a default EasyRTC listener, it will be added. If eventName is `null`, all events will be removed than the defaults will be restored.\r\n *\r\n * @param       {?string} eventName     Listener name. If `null`, then all events will be removed.\r\n */\r\npub.events.removeAllListeners = function(eventName) {\r\n    if (eventName) {\r\n        pub.events.setDefaultListener(eventName);\r\n    } else {\r\n        pub.events.setDefaultListeners();\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * General utility functions are grouped in this util object.  For convenience, this class has also been attached to the application, connection, session, and room classes.\r\n * @class\r\n */\r\npub.util = {};\r\n\r\n\r\n/**\r\n * Performs a deep copy of an object, returning the duplicate.\r\n * Do not use on objects with circular references.\r\n *\r\n * @function\r\n * @param       {Object} input          Input variable (or object) to be copied.\r\n * @returns     {Object}                New copy of variable.\r\n */\r\npub.util.deepCopy = g.deepCopy;\r\n\r\n\r\n/**\r\n * An empty dummy function, which is designed to be used as a default callback in functions when none has been provided.\r\n *\r\n * @param       {Error} err             Error object\r\n */\r\npub.util.nextToNowhere = function(err) {\r\n};\r\n\r\n/**\r\n * Determines if an Error object is an instance of ApplicationError, ConnectionError, or ServerError. If it is, it will return true.\r\n *\r\n * @function\r\n * @param       {*|Error}               Will accept any value, but will only return true for appropriate error objects.\r\n * @return      {Boolean}\r\n */\r\npub.util.isError = eu.isError;\r\n\r\n\r\n/**\r\n * Determines if an Error object is an instance of ApplicationWarning, ConnectionWarning, or ServerWarning. If it is, it will return true.\r\n *\r\n * @function\r\n * @param       {*|Error}               Will accept any value, but will only return true for appropriate error objects.\r\n * @return      {Boolean}\r\n */\r\npub.util.isWarning = eu.isWarning;\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Application Errors.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\npub.util.ApplicationError = eu.ApplicationError;\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Application Warnings.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\npub.util.ApplicationWarning = eu.ApplicationWarning;\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC C Errors.\r\n *\r\n * @function\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\npub.util.ConnectionError = eu.ConnectionError;\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Connection Warnings.\r\n *\r\n * @function\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\npub.util.ConnectionWarning = eu.ConnectionWarning;\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Server Errors.\r\n *\r\n * @function\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\npub.util.ServerError = eu.ServerError;\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Server Warnings.\r\n *\r\n * @function\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\npub.util.ServerWarning = eu.ServerWarning;\r\n\r\n\r\n/**\r\n * Returns a random available easyrtcid.\r\n *\r\n * @function\r\n * @return  {String} Available easyrtcid. A unique identifier for an EasyRTC connection.\r\n */\r\npub.util.getAvailableEasyrtcid = eu.getAvailableEasyrtcid;\r\n\r\n\r\n/**\r\n * Returns an EasyRTC message error object for a specific error code. This is meant to be emitted or returned to a websocket client.\r\n *\r\n * @param       {String} errorCode      EasyRTC error code associated with an error.\r\n * @return      {Object}                EasyRTC message error object for the specific error code.\r\n */\r\npub.util.getErrorMsg = function(errorCode) {\r\n    var msg = {\r\n        msgType: \"error\",\r\n        serverTime: Date.now(),\r\n        msgData: {\r\n            errorCode: errorCode,\r\n            errorText: pub.util.getErrorText(errorCode)\r\n        }\r\n    };\r\n\r\n    if (!msg.msgData.errorText) {\r\n        msg.msgData.errorText = \"Error occurred with error code: \" + errorCode;\r\n        pub.util.logWarning(\"Emitted unknown error with error code [\" + errorCode + \"]\");\r\n    }\r\n\r\n    return msg;\r\n};\r\n\r\n\r\n/**\r\n * Returns human readable text for a given error code. If an unknown error code is provided, a null value will be returned.\r\n *\r\n * @param       {String} errorCode      EasyRTC error code associated with an error.\r\n * @return      {string}                Human readable error string\r\n */\r\npub.util.getErrorText = function(errorCode) {\r\n    switch (errorCode) {\r\n        case \"BANNED_IP_ADDR\":\r\n            return \"Client IP address is banned. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_APP_AUTH_FAIL\":\r\n            return \"Authentication for application failed. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_BAD_APP_NAME\":\r\n            return \"Provided application name is improper. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_BAD_AUTH\":\r\n            return \"Authentication for application failed. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_BAD_ROOM\":\r\n            return \"Requested room is invalid or does not exist. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_BAD_STRUCTURE\":\r\n            return \"Authentication for application failed. The provided structure is improper. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_BAD_USER_CFG\":\r\n            return \"Provided configuration options improper or invalid. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_GEN_FAIL\":\r\n            return \"Authentication failed. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_NO_SOCKETS\":\r\n            return \"No sockets available for account. Socket will be disconnected.\";\r\n            break;\r\n        case \"LOGIN_TIMEOUT\":\r\n            return \"Login has timed out. Socket will be disconnected.\";\r\n            break;\r\n        case \"MSG_REJECT_BAD_DATA\":\r\n            return \"Message rejected. The provided msgData is improper.\";\r\n            break;\r\n        case \"MSG_REJECT_BAD_ROOM\":\r\n            return \"Message rejected. Requested room is invalid or does not exist.\";\r\n            break;\r\n        case \"MSG_REJECT_BAD_FIELD\":\r\n            return \"Message rejected. Problem with field structure or name.\";\r\n            break;\r\n        case \"MSG_REJECT_BAD_SIZE\":\r\n            return \"Message rejected. Packet size is too large.\";\r\n            break;\r\n        case \"MSG_REJECT_BAD_STRUCTURE\":\r\n            return \"Message rejected. The provided structure is improper.\";\r\n            break;\r\n        case \"MSG_REJECT_BAD_TYPE\":\r\n            return \"Message rejected. The provided msgType is unsupported.\";\r\n            break;\r\n        case \"MSG_REJECT_GEN_FAIL\":\r\n            return \"Message rejected. General failure occurred.\";\r\n            break;\r\n        case \"MSG_REJECT_NO_AUTH\":\r\n            return \"Message rejected. Not logged in or client not authorized.\";\r\n            break;\r\n        case \"MSG_REJECT_NO_ROOM_LIST\":\r\n            return \"Message rejected. Room list unavailable.\";\r\n            break;\r\n        case \"MSG_REJECT_PRESENCE\":\r\n            return \"Message rejected. Presence could could not be set.\";\r\n            break;\r\n        case \"MSG_REJECT_TARGET_EASYRTCID\":\r\n            return \"Message rejected. Target easyrtcid is invalid, not using same application, or no longer online.\";\r\n            break;\r\n        case \"MSG_REJECT_TARGET_GROUP\":\r\n            return \"Message rejected. Target group is invalid or not defined.\";\r\n            break;\r\n        case \"MSG_REJECT_TARGET_ROOM\":\r\n            return \"Message rejected. Target room is invalid or not created.\";\r\n            break;\r\n        case \"SERVER_SHUTDOWN\":\r\n            return \"Server is being shutdown. Socket will be disconnected.\";\r\n            break;\r\n        default:\r\n            pub.util.logWarning(\"Unknown message errorCode requested [\" + errorCode + \"]\");\r\n            return null;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * General logging function which emits a log event so long as the log level has a severity equal or greater than e.option.logLevel\r\n *\r\n * @param       {string} level          Log severity level. Can be (\"debug\"|\"info\"|\"warning\"|\"error\")\r\n * @param       {string} logText        Text for log.\r\n * @param       {?*} [logFields]        Simple JSON object which contains extra fields to be logged.\r\n */\r\npub.util.log = function(level, logText, logFields) {\r\n    switch (e.option.logLevel) {\r\n        case \"error\":\r\n            if (level != \"error\") {\r\n                break;\r\n            }\r\n\r\n        case \"warning\":\r\n            if (level == \"info\") {\r\n                break;\r\n            }\r\n\r\n        case \"info\":\r\n            if (level == \"debug\") {\r\n                break;\r\n            }\r\n\r\n        case \"debug\":\r\n            pub.events.emit(\"log\", level, logText, logFields);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Convenience function for logging \"debug\" level items.\r\n *\r\n * @param       {string} logText        Text for log.\r\n * @param       {?*} [logFields]        Simple JSON object which contains extra fields to be logged.\r\n */\r\npub.util.logDebug = function(logText, logFields) {\r\n    pub.util.log(\"debug\", logText, logFields);\r\n};\r\n\r\n\r\n/**\r\n * Convenience function for logging \"info\" level items.\r\n *\r\n * @param       {string} logText        Text for log.\r\n * @param       {?*} [logFields]        Simple JSON object which contains extra fields to be logged.\r\n */\r\npub.util.logInfo = function(logText, logFields) {\r\n    pub.util.log(\"info\", logText, logFields);\r\n};\r\n\r\n\r\n/**\r\n * Convenience function for logging \"warning\" level items.\r\n *\r\n * @param       {string} logText        Text for log.\r\n * @param       {?*} [logFields]        Simple JSON object which contains extra fields to be logged.\r\n */\r\npub.util.logWarning = function(logText, logFields) {\r\n    pub.util.log(\"warning\", logText, logFields);\r\n};\r\n\r\n\r\n/**\r\n * Convenience function for logging \"error\" level items.\r\n *\r\n * @param       {string} logText        Text for log.\r\n * @param       {?*} [logFields]        Simple JSON object which contains extra fields to be logged.\r\n */\r\npub.util.logError = function(logText, logFields) {\r\n    pub.util.log(\"error\", logText, logFields);\r\n};\r\n\r\n\r\n/**\r\n * Sends an 'ack' socket message to a given socketCallback. Provides additional checking and logging.\r\n *\r\n * @param       {string}    easyrtcid   EasyRTC unique identifier for a socket connection.\r\n * @param       {Function}  socketCallback Socket.io callback function\r\n * @param       {?Object}   appObj      EasyRTC application object. Contains methods used for identifying and managing an application.\r\n */\r\npub.util.sendSocketCallbackAck = function(easyrtcid, socketCallback, appObj) {\r\n    return pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, {\"msgType\":\"ack\"}, appObj);\r\n};\r\n\r\n\r\n/**\r\n * Sends a complete socket message to a given socketCallback. Provides additional checking and logging.\r\n *\r\n * @param       {string}    easyrtcid   EasyRTC unique identifier for a socket connection.\r\n * @param       {Function}  socketCallback Socket.io callback function\r\n * @param       {Object}    msg         Message object which contains the full message for a client; this can include the standard msgType and msgData fields.\r\n * @param       {?Object}   appObj      EasyRTC application object. Contains methods used for identifying and managing an application.\r\n */\r\npub.util.sendSocketCallbackMsg = function(easyrtcid, socketCallback, msg, appObj) {\r\n    var appName;\r\n\r\n    if (appObj) {\r\n        appName = appObj.getAppName();\r\n        if (!appObj.isConnectedSync(easyrtcid)) {\r\n            pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Unable to return socket message. Peer no longer connected.\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    if (!_.isFunction(socketCallback)) {\r\n        pub.util.logWarning(\"[\"+appName+\"][\"+easyrtcid+\"] Unable to return socket message. Provided socketCallback was not a function.\");\r\n        return false;\r\n    }\r\n\r\n    try {\r\n        socketCallback(msg);\r\n    } catch(err) {\r\n        pub.util.logWarning(\"[\"+appName+\"][\"+easyrtcid+\"] Unable to return socket message. Call to socketCallback failed.\");\r\n    }\r\n\r\n    if (e.option.logMessagesEnable) {\r\n        try {\r\n            pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Returning socket.io message: [\"+JSON.stringify(msg)+\"]\");\r\n        }\r\n        catch(err) {\r\n            pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Returning socket.io message\");\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\n/**\r\n *  Checks with EasyRTC site for latest version. Writes to the log if a version can be found. If connection cannot be established than no error will be shown.\r\n */\r\npub.util.updateCheck = function() {\r\n    var easyrtcVersion = pub.getVersion();\r\n\r\n    require(\"http\").get(\"http://easyrtc.com/version/?app=easyrtc&ver=\" + easyrtcVersion + \"&platform=\" + process.platform + \"&nodever=\" + process.version, function(res) {\r\n        if (res.statusCode == 200)\r\n            res.on('data', function(latestVersion) {\r\n                latestVersion = (latestVersion + \"\").replace(/[^0-9a-z.]/g, \"\");\r\n                if (latestVersion != easyrtcVersion) {\r\n                    var l = latestVersion.replace(/[^0-9.]/g, \"\").split(\".\", 3);\r\n                    l[0] = parseInt(l[0]);\r\n                    l[1] = parseInt(l[1]);\r\n                    l[2] = parseInt(l[2]);\r\n                    var v = easyrtcVersion.replace(/[^0-9.]/g, \"\").split(\".\", 3);\r\n                    v[0] = parseInt(v[0]);\r\n                    v[1] = parseInt(v[1]);\r\n                    v[2] = parseInt(v[2]);\r\n                    if (v[0] < l[0] || (v[0] == l[0] && v[1] < l[1]) || (v[0] == l[0] && v[1] == l[1] && v[2] < l[2]))\r\n                        pub.util.logWarning(\"Update Check: New version of EasyRTC is available (\" + latestVersion + \"). Visit http://easyrtc.com/ for details or run 'npm update' to upgrade.\");\r\n                    else if (v[0] == l[0] && v[1] == l[1] && v[2] == l[2] && easyrtcVersion.replace(/[^a-z]/gi, \"\") != \"\")\r\n                        pub.util.logWarning(\"Update Check: New non-beta version of EasyRTC is available (\" + latestVersion + \"). Visit http://easyrtc.com/ for details.\");\r\n                }\r\n            });\r\n    }).on('error', function(e) {\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Checks an incoming EasyRTC message to determine if it is syntactically valid.\r\n *\r\n * @param       {string} type           The Socket.IO message type. Expected values are (easyrtcAuth|easyrtcCmd|easyrtcMsg)\r\n * @param       {Object} msg            Message object which contains the full message from a client; this can include the standard msgType and msgData fields.\r\n * @param       {?Object} appObj        EasyRTC application object. Contains methods used for identifying and managing an application.\r\n * @param       {function(?Error, boolean, string)} callback Callback with error, a boolean of whether message if valid, and a string indicating the error code if the message is invalid.\r\n */\r\npub.util.isValidIncomingMessage = function(type, msg, appObj, callback) {\r\n    // A generic getOption variable which points to the getOption function at either the top or application level\r\n    var getOption = (_.isObject(appObj) ? appObj.getOption : pub.getOption);\r\n\r\n    // All messages follow the basic structure\r\n    if (!_.isString(type)) {\r\n        callback(null, false, \"MSG_REJECT_BAD_TYPE\");\r\n        return;\r\n    }\r\n    if (!_.isObject(msg)) {\r\n        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n        return;\r\n    }\r\n    if (!_.isString(msg.msgType)) {\r\n        callback(null, false, \"MSG_REJECT_BAD_TYPE\");\r\n        return;\r\n    }\r\n\r\n    switch (type) {\r\n        case \"easyrtcAuth\":\r\n            if (msg.msgType != \"authenticate\") {\r\n                callback(null, false, \"MSG_REJECT_BAD_TYPE\");\r\n                return;\r\n            }\r\n            if (!_.isObject(msg.msgData)) {\r\n                callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                return;\r\n            }\r\n\r\n            // msgData.apiVersion (required)\r\n            if (msg.msgData.apiVersion === undefined || !_.isString(msg.msgData.apiVersion) || !getOption(\"apiVersionRegExp\").test(msg.msgData.apiVersion)) {\r\n                callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                return;\r\n            }\r\n\r\n            // msgData.appName\r\n            if (msg.msgData.applicationName !== undefined && (!_.isString(msg.msgData.applicationName) || !getOption(\"appNameRegExp\").test(msg.msgData.applicationName))) {\r\n                callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                return;\r\n            }\r\n\r\n            // msgData.easyrtcsid\r\n            if (msg.msgData.easyrtcsid !== undefined && (!_.isString(msg.msgData.easyrtcsid) || !getOption(\"easyrtcsidRegExp\").test(msg.msgData.easyrtcsid))) {\r\n                callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                return;\r\n            }\r\n\r\n            var isCallbackRun = false;\r\n            async.waterfall([\r\n                function(asyncCallback) {\r\n                    if (!appObj) {\r\n                        pub.app((msg.msgData.applicationName !== undefined ? msg.msgData.applicationName : getOption(\"appDefaultName\")), function(err, newAppObj) {\r\n                            if (!err) {\r\n                                appObj = newAppObj;\r\n                                getOption = appObj.getOption;\r\n                            }\r\n                            asyncCallback(null);\r\n                        });\r\n                    }\r\n                    else {\r\n                        asyncCallback(null);\r\n                    }\r\n                },\r\n                function(asyncCallback) {\r\n                    // msgData.username\r\n                    if (msg.msgData.username !== undefined && (!_.isString(msg.msgData.username) || !getOption(\"usernameRegExp\").test(msg.msgData.username))) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        isCallbackRun = true;\r\n                        return;\r\n                    }\r\n\r\n                    // msgData.credential\r\n                    if (msg.msgData.credential !== undefined && (!_.isObject(msg.msgData.credential) || _.isEmpty(msg.msgData.credential))) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        isCallbackRun = true;\r\n                        return;\r\n                    }\r\n\r\n                    // msgData.roomJoin\r\n                    if (msg.msgData.roomJoin !== undefined) {\r\n                        if (!_.isObject(msg.msgData.roomJoin)) {\r\n                            callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                            isCallbackRun = true;\r\n                            return;\r\n                        }\r\n\r\n                        for (var currentRoomName in msg.msgData.roomJoin) {\r\n                            if (!getOption(\"roomNameRegExp\").test(currentRoomName) || !_.isObject(msg.msgData.roomJoin[currentRoomName]) || !_.isString(msg.msgData.roomJoin[currentRoomName].roomName) || currentRoomName != msg.msgData.roomJoin[currentRoomName].roomName) {\r\n                                callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                                isCallbackRun = true;\r\n                                return;\r\n                            }\r\n                            // if roomParameter field is defined, it must be an object\r\n                            if (msg.msgData.roomJoin[currentRoomName].roomParameter !== undefined && !_.isObject(msg.msgData.roomJoin[currentRoomName].roomParameter)) {\r\n                                callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                                isCallbackRun = true;\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // msgData.setPresence\r\n                    if (msg.msgData.setPresence !== undefined) {\r\n                        if (!_.isObject(msg.msgData.setPresence) || _.isEmpty(msg.msgData.setPresence)) {\r\n                            callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                            isCallbackRun = true;\r\n                            return;\r\n                        }\r\n                        if (msg.msgData.setPresence.show !== undefined && (!_.isString(msg.msgData.setPresence.show) || !getOption(\"presenceShowRegExp\").test(msg.msgData.setPresence.show))) {\r\n                            callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                            isCallbackRun = true;\r\n                            return;\r\n                        }\r\n                        if (msg.msgData.setPresence.status !== undefined && (!_.isString(msg.msgData.setPresence.status) || !getOption(\"presenceStatusRegExp\").test(msg.msgData.setPresence.status))) {\r\n                            callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                            isCallbackRun = true;\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    // TODO: setUserCfg\r\n                    if (msg.msgData.setUserCfg !== undefined) {\r\n                    }\r\n                    asyncCallback(null);\r\n\r\n                }\r\n            ],\r\n                    function(err) {\r\n                        if (err) {\r\n                            if (!isCallbackRun) {\r\n                                callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                                isCallbackRun = true;\r\n                            }\r\n                        }\r\n                        else {\r\n                            // Incoming message syntactically valid\r\n                            callback(null, true, null);\r\n                        }\r\n                    }\r\n            );\r\n\r\n            return;\r\n            break;\r\n\r\n        case \"easyrtcCmd\":\r\n            switch (msg.msgType) {\r\n                case \"candidate\" :\r\n                case \"offer\" :\r\n                case \"answer\" :\r\n                    // candidate, offer, and answer each require a non-empty msgData object and a proper targetEasyrtcid\r\n                    if (!_.isObject(msg.msgData) || _.isEmpty(msg.msgData)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    if (!_.isString(msg.targetEasyrtcid) || !getOption(\"easyrtcidRegExp\").test(msg.targetEasyrtcid)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n                    break;\r\n                case \"reject\" :\r\n                case \"hangup\" :\r\n                    // reject, and hangup each require a targetEasyrtcid but no msgData\r\n                    if (msg.msgData !== undefined) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    if (!_.isString(msg.targetEasyrtcid) || !getOption(\"easyrtcidRegExp\").test(msg.targetEasyrtcid)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n                    break;\r\n\r\n                case \"getIceConfig\" :\r\n                    if (msg.msgData !== undefined && !_.isEmpty(msg.msgData)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    break;\r\n\r\n                case \"getRoomList\" :\r\n                    if (msg.msgData !== undefined) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    break;\r\n\r\n                case \"roomJoin\" :\r\n                    if (!_.isObject(msg.msgData)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    if (!_.isObject(msg.msgData.roomJoin)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n\r\n                    for (var currentRoomName in msg.msgData.roomJoin) {\r\n                        if (!getOption(\"roomNameRegExp\").test(currentRoomName) || !_.isObject(msg.msgData.roomJoin[currentRoomName]) || !_.isString(msg.msgData.roomJoin[currentRoomName].roomName) || currentRoomName != msg.msgData.roomJoin[currentRoomName].roomName) {\r\n                            callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case \"roomLeave\" :\r\n                    if (!_.isObject(msg.msgData)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    if (!_.isObject(msg.msgData.roomLeave)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n\r\n                    for (var currentRoomName in msg.msgData.roomLeave) {\r\n                        if (!getOption(\"roomNameRegExp\").test(currentRoomName) || !_.isObject(msg.msgData.roomLeave[currentRoomName]) || !_.isString(msg.msgData.roomLeave[currentRoomName].roomName) || currentRoomName != msg.msgData.roomLeave[currentRoomName].roomName) {\r\n                            callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                            return;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case \"setPresence\" :\r\n                    if (!_.isObject(msg.msgData)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    if (!_.isObject(msg.msgData.setPresence) || _.isEmpty(msg.msgData.setPresence)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n                    if (msg.msgData.setPresence.show !== undefined && (!_.isString(msg.msgData.setPresence.show) || !getOption(\"presenceShowRegExp\").test(msg.msgData.setPresence.show))) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n                    if (msg.msgData.setPresence.status !== undefined && (!_.isString(msg.msgData.setPresence.status) || !getOption(\"presenceStatusRegExp\").test(msg.msgData.setPresence.status))) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n                    break;\r\n\r\n                case \"setRoomApiField\" :\r\n                    if (!_.isObject(msg.msgData)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    if (!_.isObject(msg.msgData.setRoomApiField) || _.isEmpty(msg.msgData.setRoomApiField)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n                    if (!_.isString(msg.msgData.setRoomApiField.roomName) || !getOption(\"roomNameRegExp\").test(msg.msgData.setRoomApiField.roomName)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_ROOM\");\r\n                        return;\r\n                    }\r\n                    if (msg.msgData.setRoomApiField.field !== undefined) {\r\n                        if (!_.isObject(msg.msgData.setRoomApiField.field)) {\r\n                            callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                            return;\r\n                        }\r\n                        try {\r\n                            if (JSON.stringify(msg.msgData.setRoomApiField.field).length >= 4096) {\r\n                                callback(null, false, \"MSG_REJECT_BAD_SIZE\");\r\n                                return;\r\n                            }\r\n                        } catch (e) {\r\n                            if (!_.isObject(msg.msgData.setRoomApiField.field)) {\r\n                                callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case \"setUserCfg\" :\r\n                    if (!_.isObject(msg.msgData)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_DATA\");\r\n                        return;\r\n                    }\r\n                    if (!_.isObject(msg.msgData.setUserCfg) || _.isEmpty(msg.msgData.setUserCfg)) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n\r\n                    // setUserCfg.p2pList\r\n                    if (msg.msgData.setUserCfg.p2pList !== undefined && (!_.isObject(msg.msgData.setUserCfg.p2pList) || _.isEmpty(msg.msgData.setUserCfg.p2pList))) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n                    // TODO: Go through p2pList to confirm each key is an easyrtcid\r\n\r\n                    // setUserCfg.userSettings\r\n                    if (msg.msgData.setUserCfg.userSettings !== undefined && (!_.isObject(msg.msgData.setUserCfg.userSettings) || _.isEmpty(msg.msgData.setUserCfg.userSettings))) {\r\n                        callback(null, false, \"MSG_REJECT_BAD_STRUCTURE\");\r\n                        return;\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n                    // Reject all unknown msgType's\r\n                    callback(null, false, \"MSG_REJECT_BAD_TYPE\");\r\n                    return;\r\n            }\r\n\r\n            break;\r\n\r\n        case \"easyrtcMsg\":\r\n            // targetEasyrtcid\r\n            if (msg.targetEasyrtcid !== undefined && (!_.isString(msg.targetEasyrtcid) || !getOption(\"easyrtcidRegExp\").test(msg.targetEasyrtcid))) {\r\n                callback(null, false, \"MSG_REJECT_TARGET_EASYRTCID\");\r\n                return;\r\n            }\r\n            // targetGroup\r\n            if (msg.targetGroup !== undefined && (!_.isString(msg.targetGroup) || !getOption(\"groupNameRegExp\").test(msg.targetGroup))) {\r\n                callback(null, false, \"MSG_REJECT_TARGET_GROUP\");\r\n                return;\r\n            }\r\n            // targetRoom\r\n            if (msg.targetRoom !== undefined && (!_.isString(msg.targetRoom) || !getOption(\"roomNameRegExp\").test(msg.targetRoom))) {\r\n                callback(null, false, \"MSG_REJECT_TARGET_ROOM\");\r\n                return;\r\n            }\r\n            break;\r\n\r\n        default:\r\n            callback(null, false, \"MSG_REJECT_BAD_TYPE\");\r\n            return;\r\n    }\r\n\r\n    // Incoming message syntactically valid\r\n    callback(null, true, null);\r\n};\r\n\r\n\r\n/**\r\n * Will attempt to deliver an EasyRTC session id via a cookie. Requires that session management be enabled from within Express.\r\n *\r\n * @param       {Object} req            Http request object\r\n * @param       {Object} res            Http result object\r\n */\r\npub.util.sendSessionCookie = function(req, res) {\r\n    // If sessions or session cookies are disabled, return without an error.\r\n    if (!pub.getOption(\"sessionEnable\") || !pub.getOption(\"sessionCookieEnable\")) {\r\n        return;\r\n    }\r\n    if (req.sessionID && (!req.cookies || !req.cookies[\"easyrtcsid\"] || req.cookies[\"easyrtcsid\"] != req.sessionID)) {\r\n        try {\r\n            pub.util.logDebug(\"Sending easyrtcsid cookie [\" + req.sessionID + \"] to [\" + req.ip + \"] for request [\" + req.url + \"]\");\r\n            res.cookie(\"easyrtcsid\", req.sessionID, {maxAge: 2592000000, httpOnly: false});\r\n        } catch (e) {\r\n            pub.util.logWarning(\"Problem setting easyrtcsid cookie [\" + req.sessionID + \"] to [\" + req.ip + \"] for request [\" + req.url + \"]\");\r\n        }\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Determine if a given application name has been defined.\r\n *\r\n * @param       {string} appName        Application name which uniquely identifies it on the server.\r\n * @param       {function(?Error, boolean)} callback Callback with error and boolean of whether application is defined.\r\n */\r\npub.isApp = function(appName, callback) {\r\n    callback(null, (e.app[appName] ? true : false));\r\n};\r\n\r\n\r\n/**\r\n * Creates a new EasyRTC application with default values. If a callback is provided, it will receive the new application object.\r\n *\r\n * The callback may receive an Error object if unsuccessful. Depending on the severity, known errors have an \"instanceof\" ApplicationWarning or ApplicationError.\r\n *\r\n * @param       {string} appName        Application name which uniquely identifies it on the server.\r\n * @param       {?object} options       Options object with options to apply to the application. May be null.\r\n * @param       {appCallback} [callback] Callback with error and application object\r\n */\r\npub.createApp = function(appName, options, callback) {\r\n    if (!_.isFunction(callback)) {\r\n        callback = function(err, appObj) {\r\n        };\r\n    }\r\n    if (!appName || !pub.getOption(\"appNameRegExp\").test(appName)) {\r\n        pub.util.logWarning(\"Can not create application with improper name: '\" + appName + \"'\");\r\n        callback(new pub.util.ApplicationWarning(\"Can not create application with improper name: '\" + appName + \"'\"));\r\n        return;\r\n    }\r\n    if (e.app[appName]) {\r\n        pub.util.logWarning(\"Can not create application which already exists: '\" + appName + \"'\");\r\n        callback(new pub.util.ApplicationWarning(\"Can not create application which already exists: '\" + appName + \"'\"));\r\n        return;\r\n    }\r\n    if (!_.isObject(options)) {\r\n        options = {};\r\n    }\r\n\r\n    pub.util.logDebug(\"Creating application: '\" + appName + \"'\");\r\n\r\n    e.app[appName] = {\r\n        appName: appName,\r\n        connection: {},\r\n        field: {},\r\n        group: {},\r\n        option: {},\r\n        room: {},\r\n        session: {}\r\n    };\r\n\r\n    // Get the new app object\r\n    pub.app(appName, function(err, appObj) {\r\n        if (err) {\r\n            callback(err);\r\n            return;\r\n        }\r\n\r\n        // Set all options in options object. If any fail, an error will be sent to the callback.\r\n        async.each(Object.keys(options), function(currentOptionName, asyncCallback) {\r\n            appObj.setOption(currentOptionName, options[currentOptionName]);\r\n            asyncCallback(null);\r\n        },\r\n                function(err) {\r\n                    if (err) {\r\n                        callback(new pub.util.ApplicationError(\"Could not set options when creating application: '\" + appName + \"'\", err));\r\n                        return;\r\n                    }\r\n                    // Set default application fields\r\n                    var appDefaultFieldObj = appObj.getOption(\"appDefaultFieldObj\");\r\n                    if (_.isObject(appDefaultFieldObj)) {\r\n                        for (var currentFieldName in appDefaultFieldObj) {\r\n                            appObj.setField(\r\n                                    currentFieldName,\r\n                                    appDefaultFieldObj[currentFieldName].fieldValue,\r\n                                    appDefaultFieldObj[currentFieldName].fieldOption,\r\n                                    null\r\n                                    );\r\n                        }\r\n                    }\r\n\r\n                    if (appObj.getOption(\"roomDefaultEnable\")) {\r\n                        pub.events.emit(\"roomCreate\", appObj, null, appObj.getOption(\"roomDefaultName\"), null, function(err, roomObj){\r\n                            if (err) {\r\n                                callback(err);\r\n                                return;\r\n                            }\r\n                            // Return app object to callback\r\n                            callback(null, appObj);\r\n                        });\r\n                    }\r\n                    else {\r\n                        // Return app object to callback\r\n                        callback(null, appObj);\r\n                    }\r\n                });\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * Contains the methods for interfacing with an EasyRTC application.\r\n *\r\n * The callback will receive an application object upon successful retrieval of application.\r\n *\r\n * The callback may receive an Error object if unsuccessful. Depending on the severity, known errors have an \"instanceof\" ApplicationWarning or ApplicationError.\r\n *\r\n * The function does return an application object which is useful for chaining, however the callback approach is safer and provides additional information in the event of an error.\r\n *\r\n * @param       {?string} appName        Application name which uniquely identifies it on the server. Uses default application if null.\r\n * @param       {appCallback} [callback] Callback with error and application object\r\n */\r\npub.app = function(appName, callback) {\r\n\r\n    /**\r\n     * The primary method for interfacing with an EasyRTC application.\r\n     *\r\n     * @class       appObj\r\n     * @memberof    pub\r\n     */\r\n    var appObj = {};\r\n    if (!appName) {\r\n        appName = pub.getOption(\"appDefaultName\");\r\n    }\r\n    if (!_.isFunction(callback)) {\r\n        callback = function(err, appObj) {\r\n        };\r\n    }\r\n    if (!e.app[appName]) {\r\n        pub.util.logDebug(\"Attempt to request non-existent application name: '\" + appName + \"'\");\r\n        callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent application name: '\" + appName + \"'\"));\r\n        return;\r\n    }\r\n\r\n\r\n    /**\r\n     * Expose all event functions\r\n     * \r\n     * @memberof    pub.appObj\r\n     */\r\n    appObj.events = pub.events;\r\n\r\n\r\n    /**\r\n     * Expose all utility functions\r\n     * \r\n     * @memberof    pub.appObj\r\n     */\r\n    appObj.util = pub.util;\r\n\r\n\r\n    /**\r\n     * Returns the application name for the application. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @return      {string}    The application name.\r\n     */\r\n    appObj.getAppName = function() {\r\n        return appName;\r\n    };\r\n\r\n\r\n    /**\r\n     * Sends the count of the number of connections in the app to a provided callback.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {function(?Error, Number)} callback Callback with error and array containing all easyrtcids.\r\n     */\r\n    appObj.getConnectionCount = function(callback) {\r\n        callback(null, appObj.getConnectionCountSync());\r\n    };\r\n\r\n\r\n    /**\r\n     * Sends the count of the number of connections in the app to a provided callback.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @returns     {Number} The current number of connections in a room.\r\n     */\r\n    appObj.getConnectionCountSync = function() {\r\n        return _.size(e.app[appName].connection);\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns an array of all easyrtcids connected to the application\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {function(?Error, Array.<string>)} callback Callback with error and array of easyrtcids.\r\n     */\r\n    appObj.getConnectionEasyrtcids = function(callback) {\r\n        var easyrtcids = [];\r\n        for (var key in e.app[appName].connection) {\r\n            easyrtcids.push(key);\r\n        }\r\n        callback(null, easyrtcids);\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns application level field object for a given field name to a provided callback.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}        fieldName   Field name\r\n     * @param       {function(?Error, Object=)} callback Callback with error and field object (any type)\r\n     */\r\n    appObj.getField = function(fieldName, callback) {\r\n        if (!e.app[appName].field[fieldName]) {\r\n            pub.util.logDebug(\"Can not find app field: '\" + fieldName + \"'\");\r\n            callback(new pub.util.ApplicationWarning(\"Can not find app field: '\" + fieldName + \"'\"));\r\n            return;\r\n        }\r\n        callback(null, pub.util.deepCopy(e.app[appName].field[fieldName]));\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns application level field object for a given field name. If the field is not set, it will return a field object will a null field value.  This is a synchronous function, thus may not be available in custom cases where state is not kept in memory.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}        fieldName   Field name\r\n     * @returns     {Object}        Field object\r\n     */\r\n    appObj.getFieldSync = function(fieldName) {\r\n        if (!e.app[appName].field[fieldName]) {\r\n            return {\"fieldName\": fieldName, \"fieldOption\": {}, \"fieldValue\": null};\r\n        }\r\n        return pub.util.deepCopy(e.app[appName].field[fieldName]);\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns application level field value for a given field name. If the field is not set, it will return a null field value.  This is a synchronous function, thus may not be available in custom cases where state is not kept in memory.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}        fieldName   Field name\r\n     * @returns     {?*}            Field value. Can be any JSON object.\r\n     */\r\n    appObj.getFieldValueSync = function(fieldName) {\r\n        if (!e.app[appName].field[fieldName]) {\r\n            return null;\r\n        }\r\n        return pub.util.deepCopy(e.app[appName].field[fieldName].fieldValue);\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns an object containing all field names and values within the application. Can be limited to fields with isShared option set to true.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {boolean}   limitToIsShared Limits returned fields to those which have the isShared option set to true.\r\n     * @param       {function(?Error, Object=)} callback Callback with error and object containing field names and values.\r\n     */\r\n    appObj.getFields = function(limitToIsShared, callback) {\r\n        var fieldObj = {};\r\n        for (var fieldName in e.app[appName].field) {\r\n            if (!limitToIsShared || e.app[appName].field[fieldName].fieldOption.isShared) {\r\n                fieldObj[fieldName] = {\r\n                    fieldName: fieldName,\r\n                    fieldValue: pub.util.deepCopy(e.app[appName].field[fieldName].fieldValue)\r\n                };\r\n            }\r\n        }\r\n        callback(null, fieldObj);\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns an array of all group names within the application\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {function(?Error, Array.<string>)} callback Callback with error and array of group names.\r\n     */\r\n    appObj.getGroupNames = function(callback) {\r\n        var groupNames = [];\r\n        for (var key in e.app[appName].group) {\r\n            groupNames.push(key);\r\n        }\r\n        callback(null, groupNames);\r\n    };\r\n\r\n\r\n    /**\r\n     * Gets individual option value. Will first check if option is defined for the application, else it will revert to the global level option.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {String}    optionName  Option name\r\n     * @return      {*}                     Option value (can be any JSON type)\r\n     */\r\n    appObj.getOption = function(optionName) {\r\n        return ((e.app[appName].option[optionName] === undefined) ? pub.getOption(optionName) : (e.app[appName].option[optionName]));\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns an array of all room names within the application.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {function(?Error, Array.<string>)} callback Callback with error and array of room names.\r\n     */\r\n    appObj.getRoomNames = function(callback) {\r\n        var roomNames = [];\r\n        for (var key in e.app[appName].room) {\r\n            roomNames.push(key);\r\n        }\r\n        callback(null, roomNames);\r\n    };\r\n\r\n\r\n    /**\r\n     * Returns an array of all easyrtcsids within the application\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {function(?Error, Array.<string>)} callback Callback with error and array containing easyrtcsids.\r\n     */\r\n    appObj.getEasyrtcsids = function(callback) {\r\n        var easyrtcsids = [];\r\n        for (var key in e.app[appName].session) {\r\n            easyrtcsids.push(key);\r\n        }\r\n        callback(null, easyrtcsids);\r\n    };\r\n\r\n    /**\r\n     * Returns an array of all easyrtcsids within the application. Old SessionKey name kept for transition purposes. Use getEasyrtcsid();\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @ignore\r\n     */\r\n    appObj.getSessionKeys = appObj.getEasyrtcsids;\r\n\r\n\r\n    /**\r\n     * Gets connection status for a connection. It is possible for a connection to be considered connected without being authenticated.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    easyrtcid   EasyRTC unique identifier for a socket connection.\r\n     * @param       {function(?Error, Boolean)} callback Callback with error and a boolean indicating if easyrtcid is connected.\r\n     */\r\n    appObj.isConnected = function(easyrtcid, callback) {\r\n        if (e.app[appName] && e.app[appName].connection && e.app[appName].connection[easyrtcid]) {\r\n            callback(null, true);\r\n        } else {\r\n            callback(null, false);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Gets connection status for a connection. It is possible for a connection to be considered connected without being authenticated. Synchronous function.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    easyrtcid   EasyRTC unique identifier for a socket connection.\r\n     * @returns     {boolean}\r\n     */\r\n    appObj.isConnectedSync = function(easyrtcid) {\r\n        if (e.app[appName] && e.app[appName].connection && e.app[appName].connection[easyrtcid]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Sets individual option. Set value to NULL to delete the option (thus reverting to global option).\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {String}    optionName  Option name\r\n     * @param       {?*}        optionValue Option value\r\n     * @return      {Boolean}               true on success, false on failure\r\n     */\r\n    appObj.setOption = function(optionName, optionValue) {\r\n        // Can only set options which currently exist\r\n        if (typeof e.option[optionName] == \"undefined\") {\r\n            pub.util.logError(\"Error setting option. Unrecognised option name '\" + optionName + \"'.\");\r\n            return false;\r\n        }\r\n\r\n        // If value is null, delete option from application (reverts to global option)\r\n        if (optionValue == null) {\r\n            if (!(e.app[appName].option[optionName] === 'undefined')) {\r\n                delete e.app[appName].option[optionName];\r\n            }\r\n        } else {\r\n            // Set the option value to be a full deep copy, thus preserving private nature of the private EasyRTC object.\r\n            e.app[appName].option[optionName] = pub.util.deepCopy(optionValue);\r\n        }\r\n        return true;\r\n    };\r\n\r\n\r\n    /**\r\n     * Sets application field value for a given field name.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    fieldName       Must be formatted according to \"fieldNameRegExp\" option.\r\n     * @param       {Object}    fieldValue\r\n     * @param       {?Object}   fieldOption     Field options (such as isShared which defaults to false)\r\n     * @param       {nextCallback} [next]       A success callback of form next(err).\r\n     */\r\n    appObj.setField = function(fieldName, fieldValue, fieldOption, next) {\r\n        pub.util.logDebug(\"[\" + appName + \"] Setting field [\" + fieldName + \"]\", fieldValue);\r\n        if (!_.isFunction(next)) {\r\n            next = pub.util.nextToNowhere;\r\n        }\r\n\r\n        if (!pub.getOption(\"fieldNameRegExp\").test(fieldName)) {\r\n            pub.util.logWarning(\"Can not create application field with improper name: '\" + fieldName + \"'\");\r\n            next(new pub.util.ApplicationWarning(\"Can not create application field with improper name: '\" + fieldName + \"'\"));\r\n            return;\r\n        }\r\n        e.app[appName].field[fieldName] = {\r\n            fieldName: fieldName,\r\n            fieldValue: fieldValue,\r\n            fieldOption: {isShared: ((_.isObject(fieldOption) && fieldOption.isShared) ? true : false)}\r\n        };\r\n\r\n        next(null);\r\n    };\r\n\r\n\r\n    /**\r\n     * Gets connection object for a given connection key. Returns null if connection not found.\r\n     * The returned connection object includes functions for managing connection fields.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    easyrtcid   EasyRTC unique identifier for a socket connection.\r\n     * @param       {connectionCallback} callback Callback with error and object containing EasyRTC connection object.\r\n     */\r\n    appObj.connection = function(easyrtcid, callback) {\r\n        if (!e.app[appName].connection[easyrtcid]) {\r\n            pub.util.logWarning(\"Attempt to request non-existent connection key: '\" + easyrtcid + \"'\");\r\n            callback(new pub.util.ConnectionWarning(\"Attempt to request non-existent connection key: '\" + easyrtcid + \"'\"));\r\n            return;\r\n        }\r\n\r\n        if (!pub.socketServer) {\r\n            pub.util.logError(\"Socket server undefined.\");\r\n            callback(new pub.util.ConnectionWarning(\"Attempt to request non-existent socket: '\" + easyrtcid + \"'\"));\r\n            return;\r\n        }\r\n\r\n        var socketId = e.app[appName].connection[easyrtcid].socketId;\r\n\r\n        if (pub.socketServer.sockets.connected){\r\n            if (!pub.socketServer.sockets.connected[socketId] || pub.socketServer.sockets.connected[socketId].disconnected) {\r\n                pub.util.logWarning(\"[\"+easyrtcid+\"] Attempt to request non-existent socket: '\" + socketId + \"'\");\r\n                callback(new pub.util.ConnectionWarning(\"Attempt to request non-existent socket: '\" + socketId + \"'\"));\r\n                return;\r\n            }\r\n\r\n            if (pub.socketServer.sockets.connected[socketId].disconnected) {\r\n                pub.util.logWarning(\"[\"+easyrtcid+\"] Attempt to request disconnected socket: '\" + socketId + \"'\");\r\n                callback(new pub.util.ConnectionWarning(\"Attempt to request disconnected socket: '\" + socketId + \"'\"));\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            if (!pub.socketServer.sockets.sockets[socketId] || pub.socketServer.sockets.sockets[socketId].disconnected) {\r\n                pub.util.logWarning(\"[\"+easyrtcid+\"] Attempt to request non-existent socket: '\" + socketId + \"'\");\r\n                callback(new pub.util.ConnectionWarning(\"Attempt to request non-existent socket: '\" + socketId + \"'\"));\r\n                return;\r\n            }\r\n\r\n            if (pub.socketServer.sockets.sockets[socketId].disconnected) {\r\n                pub.util.logWarning(\"[\"+easyrtcid+\"] Attempt to request disconnected socket: '\" + socketId + \"'\");\r\n                callback(new pub.util.ConnectionWarning(\"Attempt to request disconnected socket: '\" + socketId + \"'\"));\r\n                return;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * @class       connectionObj\r\n         * @memberof    pub.appObj\r\n         */\r\n        var connectionObj = {};\r\n\r\n        // House the local session object\r\n        var _sessionObj;\r\n\r\n        /**\r\n         * Expose all event functions\r\n         * \r\n         * @memberof    pub.appObj.connectionObj\r\n         */\r\n        connectionObj.events = pub.events;\r\n\r\n\r\n        /**\r\n         * Expose all utility functions\r\n         * \r\n         * @memberof    pub.appObj.connectionObj\r\n         */\r\n        connectionObj.util = pub.util;\r\n\r\n\r\n        /**\r\n         * Reference to connection's socket.io object. See http://socket.io/ for more information.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         */\r\n        if (pub.socketServer.sockets.connected){\r\n            connectionObj.socket = pub.socketServer.sockets.connected[socketId];\r\n        }\r\n        else {\r\n            connectionObj.socket = pub.socketServer.sockets.sockets[socketId];\r\n        }\r\n\r\n\r\n        /**\r\n         * Returns the application object to which the connection belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @return      {Object}    The application object\r\n         */\r\n        connectionObj.getApp = function() {\r\n            return appObj;\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the application name for the application to which the connection belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @return      {string}    The application name\r\n         */\r\n        connectionObj.getAppName = function() {\r\n            return appName;\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the easyrtcid for the connection.  Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @return      {string}    Returns the connection's easyrtcid, which is the EasyRTC unique identifier for a socket connection.\r\n         */\r\n        connectionObj.getEasyrtcid = function() {\r\n            return easyrtcid;\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns connection level field object for a given field name to a provided callback.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string}    fieldName       Field name\r\n         * @param       {function(?Error, Object=)} callback Callback with error and field object (any type)\r\n         */\r\n        connectionObj.getField = function(fieldName, callback) {\r\n            if (!e.app[appName].connection[easyrtcid].field[fieldName]) {\r\n                pub.util.logDebug(\"Can not find connection field: '\" + fieldName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Can not find connection field: '\" + fieldName + \"'\"));\r\n                return;\r\n            }\r\n            callback(null, pub.util.deepCopy(e.app[appName].connection[easyrtcid].field[fieldName]));\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns connection level field object for a given field name. If the field is not set, it will return a field object will a null field value.  This is a synchronous function, thus may not be available in custom cases where state is not kept in memory.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string}    fieldName       Field name\r\n         * @returns     {Object}    Field object\r\n         */\r\n        connectionObj.getFieldSync = function(fieldName) {\r\n            if (!e.app[appName].connection[easyrtcid].field[fieldName]) {\r\n                return {\"fieldName\": fieldName, \"fieldOption\": {}, \"fieldValue\": null};\r\n            }\r\n            return pub.util.deepCopy(e.app[appName].connection[easyrtcid].field[fieldName]);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns connection level field value for a given field name. If the field is not set, it will return a null field value.  This is a synchronous function, thus may not be available in custom cases where state is not kept in memory.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string}    fieldName       Field name\r\n         * @returns     {?*}        Field value\r\n         */\r\n        connectionObj.getFieldValueSync = function(fieldName) {\r\n            if (!e.app[appName].connection[easyrtcid].field[fieldName]) {\r\n                return null;\r\n            }\r\n            return pub.util.deepCopy(e.app[appName].connection[easyrtcid].field[fieldName].fieldValue);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns an object containing all field names and values within the connection to a provided callback. Can be limited to fields with isShared option set to true.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {boolean}   limitToIsShared Limits returned fields to those which have the isShared option set to true.\r\n         * @param       {function(?Error, Object=)} callback Callback with error and object containing field names and values.\r\n         */\r\n        connectionObj.getFields = function(limitToIsShared, callback) {\r\n            var fieldObj = {};\r\n            for (var fieldName in e.app[appName].connection[easyrtcid].field) {\r\n                if (!limitToIsShared || e.app[appName].connection[easyrtcid].field[fieldName].fieldOption.isShared) {\r\n                    fieldObj[fieldName] = {\r\n                        fieldName: fieldName,\r\n                        fieldValue: pub.util.deepCopy(e.app[appName].connection[easyrtcid].field[fieldName].fieldValue)\r\n                    };\r\n                }\r\n            }\r\n            callback(null, fieldObj);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns an array of all room names which connection has entered.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {function(?Error, Array.<string>)} callback Callback with error and array of room names.\r\n         */\r\n        connectionObj.getRoomNames = function(callback) {\r\n            var roomNames = [];\r\n            for (var key in e.app[appName].connection[easyrtcid].room) {\r\n                roomNames.push(key);\r\n            }\r\n            callback(null, roomNames);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the session object to which the connection belongs (if one exists). Returns a null if connection is not attached to a session (such as when sessions are disabled). Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @return      {Object}    The session object. May be null if connection has not been joined to a session.\r\n         */\r\n        connectionObj.getSession = function() {\r\n            return _sessionObj;\r\n        };\r\n\r\n\r\n        /**\r\n         * TO BE REMOVED - Use getSession() instead.\r\n         * Returns the session object which the connection belongs to. Will return null if connection is not in a session (such as if session handling is disabled).\r\n         * \r\n         * @ignore\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {function(?Error, Object=)} callback Callback with error and Session object\r\n         */\r\n        connectionObj.getSessionObj = function(callback) {\r\n            if (e.app[appName].connection[easyrtcid] && e.app[appName].connection[easyrtcid].toSession && e.app[appName].connection[easyrtcid].toSession.easyrtcsid) {\r\n                appObj.session(e.app[appName].connection[easyrtcid].toSession.easyrtcsid, callback);\r\n            }\r\n            else {\r\n                callback(null, null);\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the username associated with the connection. Returns NULL if no username has been set.\r\n         * Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @return      {String}    The username associated with the connection.\r\n         */\r\n        connectionObj.getUsername = function() {\r\n            return e.app[appName].connection[easyrtcid].username;\r\n        };\r\n\r\n\r\n        /**\r\n         * Joins the connection to a specified session. A connection can only be assigned to one session.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string}    easyrtcsid      EasyRTC session identifier\r\n         * @param       {nextCallback} next         A success callback of form next(err).\r\n         */\r\n        connectionObj.joinSession = function(easyrtcsid, next) {\r\n            if (!e.app[appName].session[easyrtcsid]) {\r\n                next(new pub.util.ConnectionWarning(\"[\" + appName + \"][\" + easyrtcid + \"] Session [\" + easyrtcsid + \"] does not exist. Could not join session\"));\r\n                return;\r\n            }\r\n\r\n            appObj.session(easyrtcsid, function(err, sessionObj) {\r\n                if (err) {\r\n                    next(err);\r\n                    return;\r\n                }\r\n\r\n                if(!e.app[appName] || !e.app[appName].connection[easyrtcid] || !e.app[appName].session[easyrtcsid]) {\r\n                    next(new pub.util.ConnectionWarning(\"[\" + appName + \"][\" + easyrtcid + \"] Session [\" + easyrtcsid + \"] does not exist. Could not join session\"));\r\n                    return;\r\n                }\r\n\r\n                e.app[appName].connection[easyrtcid].toSession = e.app[appName].session[easyrtcsid];\r\n                e.app[appName].connection[easyrtcid].toSession.toConnection[easyrtcid] = e.app[appName].connection[easyrtcid];\r\n\r\n                // Set local session object\r\n                _sessionObj = sessionObj;\r\n\r\n                next(null);\r\n            });\r\n        };\r\n\r\n\r\n        /**\r\n         * Sets connection authentication status for the connection.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {Boolean}   isAuthenticated True/false as to if the connection should be considered authenticated.\r\n         * @param       {nextCallback} next         A success callback of form next(err).\r\n         */\r\n        connectionObj.setAuthenticated = function(isAuthenticated, next) {\r\n            if (isAuthenticated) {\r\n                e.app[appName].connection[easyrtcid].isAuthenticated = true;\r\n            } else {\r\n                e.app[appName].connection[easyrtcid].isAuthenticated = false;\r\n            }\r\n            next(null);\r\n        };\r\n\r\n\r\n        /**\r\n         * Sets the credential for the connection.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {?*}        credential      Credential for the connection. Can be any JSON object.\r\n         * @param       {nextCallback} next         A success callback of form next(err).\r\n         */\r\n        connectionObj.setCredential = function(credential, next) {\r\n            e.app[appName].connection[easyrtcid].credential = credential;\r\n            next(null);\r\n        };\r\n\r\n\r\n        /**\r\n         * Sets connection field value for a given field name.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string}    fieldName       Must be formatted according to \"fieldNameRegExp\" option.\r\n         * @param       {Object}    fieldValue\r\n         * @param       {?Object}   fieldOption     Field options (such as isShared which defaults to false)\r\n         * @param       {nextCallback} [next]       A success callback of form next(err). Possible err will be instanceof (ApplicationWarning).\r\n         */\r\n        connectionObj.setField = function(fieldName, fieldValue, fieldOption, next) {\r\n            pub.util.logDebug(\"[\" + appName + \"][\" + easyrtcid + \"] - Setting field [\" + fieldName + \"]\", fieldValue);\r\n            if (!_.isFunction(next)) {\r\n                next = pub.util.nextToNowhere;\r\n            }\r\n\r\n            if (!pub.getOption(\"fieldNameRegExp\").test(fieldName)) {\r\n                pub.util.logWarning(\"Can not create connection field with improper name: '\" + fieldName + \"'\");\r\n                next(new pub.util.ApplicationWarning(\"Can not create connection field with improper name: '\" + fieldName + \"'\"));\r\n                return;\r\n            }\r\n\r\n            e.app[appName].connection[easyrtcid].field[fieldName] = {\r\n                fieldName: fieldName,\r\n                fieldValue: fieldValue,\r\n                fieldOption: {isShared: ((_.isObject(fieldOption) && fieldOption.isShared) ? true : false)}\r\n            };\r\n\r\n            next(null);\r\n        };\r\n\r\n\r\n        /**\r\n         * Sets the presence object for the connection.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {Object}    presenceObj     A presence object.\r\n         * @param       {nextCallback} next         A success callback of form next(err).\r\n         */\r\n        connectionObj.setPresence = function(presenceObj, next) {\r\n            if (presenceObj.show !== undefined) {\r\n                e.app[appName].connection[easyrtcid].presence.show = presenceObj.show;\r\n            }\r\n            if (presenceObj.status !== undefined) {\r\n                e.app[appName].connection[easyrtcid].presence.status = presenceObj.status;\r\n            }\r\n            if (presenceObj.type !== undefined) {\r\n                e.app[appName].connection[easyrtcid].presence.type = presenceObj.type;\r\n            }\r\n            next(null);\r\n        };\r\n\r\n\r\n        /**\r\n         * Sets the username string for the connection.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {?string}   username        Username to assign to the connection.\r\n         * @param       {nextCallback} next         A success callback of form next(err).\r\n         */\r\n        connectionObj.setUsername = function(username, next) {\r\n            e.app[appName].connection[easyrtcid].username = username;\r\n            next(null);\r\n        };\r\n\r\n\r\n        /**\r\n         * Emits the roomData message with a clientListDelta for the current connection to other connections in rooms this connection is in.\r\n         * Note: To send listDeltas for individual rooms, use connectionRoomObj.emitRoomDataDelta\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {Boolean}   isLeavingAllRooms   Indicator if connection is leaving all rooms. Meant to be used upon disconnection / logoff.\r\n         * @param       {function(?Error, Object=)} callback Callback of form (err, roomDataObj) which will contain the roomDataObj including all updated rooms of the connection and is designed to be returnable to the connection.\r\n         */\r\n        connectionObj.emitRoomDataDelta = function(isLeavingAllRooms, callback) {\r\n            pub.util.logDebug(\"[\" + appName + \"][\" + easyrtcid + \"] Running func 'connectionObj.emitRoomDataDelta'\");\r\n            if (!_.isFunction(callback)) {\r\n                callback = function(err, roomDataObj) {\r\n                };\r\n            }\r\n\r\n            var fullRoomDataDelta = {};\r\n\r\n            var otherClients = {};\r\n\r\n            // Generate a complete roomDelta for the current client\r\n            connectionObj.generateRoomDataDelta(isLeavingAllRooms, function(err, newFullRoomDataDelta) {\r\n                fullRoomDataDelta = newFullRoomDataDelta;\r\n\r\n                // Running callback right away so client doesn't have to wait to continue\r\n                callback(null, fullRoomDataDelta);\r\n\r\n                // Populate otherClients object with other clients who share room(s)\r\n                for (var currentRoomName in fullRoomDataDelta) {\r\n                    for (var currentEasyrtcid in e.app[appName].room[currentRoomName].clientList) {\r\n                        if (otherClients[currentEasyrtcid] === undefined) {\r\n                            otherClients[currentEasyrtcid] = {};\r\n                        }\r\n                        otherClients[currentEasyrtcid][currentRoomName] = true;\r\n                    }\r\n                }\r\n\r\n                // Emit custom roomData object to each client who shares a room with the current client\r\n                for (var currentEasyrtcid in otherClients) {\r\n                    var msg = {\r\n                        \"msgData\": {\r\n                            \"roomData\": {}\r\n                        }\r\n                    };\r\n\r\n                    for (var currentRoomName in otherClients[currentEasyrtcid]) {\r\n                        if (fullRoomDataDelta[currentRoomName]) {\r\n                            msg.msgData.roomData[currentRoomName] = fullRoomDataDelta[currentRoomName];\r\n                        }\r\n                    }\r\n\r\n                    // Anonymous wrapper to deliver arguments\r\n                    (function(innerCurrentEasyrtcid, innerMsg){\r\n                        connectionObj.getApp().connection(innerCurrentEasyrtcid, function(err, emitToConnectionObj) {\r\n                            if (!err && innerCurrentEasyrtcid != easyrtcid && emitToConnectionObj) {\r\n                                pub.events.emit(\"emitEasyrtcCmd\", emitToConnectionObj, \"roomData\", innerMsg, null, function() {});\r\n                            }\r\n                        });\r\n                    })(currentEasyrtcid, msg);\r\n                }\r\n            });\r\n        };\r\n\r\n\r\n        /**\r\n         * Generates a full room clientList object for the given connection\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {?string}   [roomStatus=\"join\"] Room status which allow for values of \"join\"|\"update\"|\"leave\".\r\n         * @param       {?Object}   roomMap     Map of rooms to generate connection clientList for. If null, then all rooms will be used.\r\n         * @param       {function(?Error, Object=)} callback    Callback which includes a formed roomData object .\r\n         */\r\n        connectionObj.generateRoomClientList = function(roomStatus, roomMap, callback) {\r\n            if (!_.isString(roomStatus)) {\r\n                roomStatus = \"join\";\r\n            }\r\n\r\n            if (!_.isObject(roomMap)) {\r\n                roomMap = e.app[appName].connection[easyrtcid].room;\r\n            }\r\n\r\n            var roomData = {};\r\n\r\n            for (var currentRoomName in e.app[appName].connection[easyrtcid].room) {\r\n                // If room is not in the provided roomMap, then skip it.\r\n                if (!roomMap[currentRoomName]) {\r\n                    continue;\r\n                }\r\n\r\n                var connectionRoom = e.app[appName].connection[easyrtcid].room[currentRoomName];\r\n                roomData[currentRoomName] = {\r\n                    \"roomName\": currentRoomName,\r\n                    \"roomStatus\": roomStatus,\r\n                    \"clientList\": {}\r\n                };\r\n\r\n                // Empty current clientList\r\n                connectionRoom.clientList = {};\r\n\r\n                // Fill connection clientList, and roomData clientList for current room\r\n                for (var currentEasyrtcid in connectionRoom.toRoom.clientList) {\r\n\r\n                    var currentToConnection = connectionRoom.toRoom.clientList[currentEasyrtcid].toConnection;\r\n\r\n                    connectionRoom.clientList[currentEasyrtcid] = {\r\n                        \"toConnection\": currentToConnection\r\n                    };\r\n\r\n                    roomData[currentRoomName].clientList[currentEasyrtcid] = {\r\n                        \"easyrtcid\": currentEasyrtcid,\r\n                        \"roomJoinTime\": currentToConnection.room[currentRoomName].enteredOn,\r\n                        \"presence\": currentToConnection.presence\r\n                    };\r\n\r\n                    if (currentToConnection.room[currentRoomName] && (!_.isEmpty(currentToConnection.room[currentRoomName].apiField))) {\r\n                        roomData[currentRoomName].clientList[currentEasyrtcid].apiField = currentToConnection.room[currentRoomName].apiField;\r\n                    }\r\n\r\n                    if (currentToConnection.username) {\r\n                        roomData[currentRoomName].clientList[currentEasyrtcid].username = currentToConnection.username;\r\n                    }\r\n                }\r\n\r\n                // Include room fields (with isShared set to true)\r\n                for (var fieldName in connectionRoom.toRoom.field) {\r\n                    if (_.isObject(connectionRoom.toRoom.field[fieldName].fieldOption) && connectionRoom.toRoom.field[fieldName].fieldOption.isShared) {\r\n                        if (!_.isObject(roomData[currentRoomName].field)) {\r\n                            roomData[currentRoomName].field = {};\r\n                        }\r\n                        roomData[currentRoomName].field[fieldName] = {\r\n                            \"fieldName\": fieldName,\r\n                            \"fieldValue\": pub.util.deepCopy(connectionRoom.toRoom.field[fieldName].fieldValue)\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // Updating timestamp of when clientList was retrieved. Useful for sending delta's later on.\r\n                connectionRoom.gotListOn = Date.now();\r\n            }\r\n            callback(null, roomData);\r\n        };\r\n\r\n\r\n        /**\r\n         * Generates a delta roomData object for the current user including all rooms the user is in. The result can be selectively parsed to deliver delta roomData objects to other clients.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {Boolean}   isLeavingRoom   Indicates if connection is in the process of leaving the room.\r\n         * @param       {function(?Error, Object=)} callback Callback of form (err, roomDataDelta).\r\n         */\r\n        connectionObj.generateRoomDataDelta = function(isLeavingRoom, callback) {\r\n            pub.util.logDebug(\"[\" + appName + \"][\" + easyrtcid + \"] Running func 'connectionObj.generateRoomDataDelta'\");\r\n\r\n            var roomDataDelta = {};\r\n\r\n            // set the roomData's clientListDelta for each room the client is in\r\n            for (var currentRoomName in e.app[appName].connection[easyrtcid].room) {\r\n                roomDataDelta[currentRoomName] = {\r\n                    \"roomName\": currentRoomName,\r\n                    \"roomStatus\": \"update\",\r\n                    \"clientListDelta\": {}\r\n                };\r\n\r\n                if (isLeavingRoom) {\r\n                    roomDataDelta[currentRoomName].clientListDelta.removeClient = {};\r\n                    roomDataDelta[currentRoomName].clientListDelta.removeClient[easyrtcid] = {\"easyrtcid\": easyrtcid};\r\n                } else {\r\n                    roomDataDelta[currentRoomName].clientListDelta.updateClient = {};\r\n                    roomDataDelta[currentRoomName].clientListDelta.updateClient[easyrtcid] = {\r\n                        \"easyrtcid\": easyrtcid,\r\n                        \"roomJoinTime\": e.app[appName].connection[easyrtcid].room[currentRoomName].enteredOn,\r\n                        \"presence\": e.app[appName].connection[easyrtcid].presence\r\n                    };\r\n\r\n                    if (!_.isEmpty(e.app[appName].connection[easyrtcid].apiField)) {\r\n                        roomDataDelta[currentRoomName].clientListDelta.updateClient[easyrtcid].apiField = e.app[appName].connection[easyrtcid].apiField;\r\n                    }\r\n                    if (e.app[appName].connection[easyrtcid].username) {\r\n                        roomDataDelta[currentRoomName].clientListDelta.updateClient[easyrtcid].username = e.app[appName].connection[easyrtcid].username;\r\n                    }\r\n                }\r\n            }\r\n\r\n            callback(null, roomDataDelta);\r\n        };\r\n\r\n\r\n        /**\r\n         * Generates the roomList message object\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {function(?Error, Object=)} callback Callback with error and roomList object.\r\n         */\r\n        connectionObj.generateRoomList = function(callback) {\r\n            pub.util.logDebug(\"[\" + appName + \"][\" + easyrtcid + \"] Running func 'connectionObj.generateRoomList'\");\r\n            var roomList = {};\r\n\r\n            for (var currentRoomName in e.app[appName].room) {\r\n                roomList[currentRoomName] = {\r\n                    \"roomName\": currentRoomName,\r\n                    \"numberClients\": _.size(e.app[appName].room[currentRoomName].clientList)\r\n                };\r\n            }\r\n            callback(null, roomList);\r\n        };\r\n\r\n\r\n        /**\r\n         * Gets connection authentication status for the connection. It is possible for a connection to become disconnected and keep the authenticated flag. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @returns     {Boolean}   Authentication status\r\n         */\r\n        connectionObj.isAuthenticated = function() {\r\n            if (e.app[appName].connection[easyrtcid] && e.app[appName].connection[easyrtcid].isAuthenticated) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Gets connection status for the connection. It is possible for a connection to be considered connected without being authenticated. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @returns     {Boolean}   Connection status\r\n         */\r\n        connectionObj.isConnected = function() {\r\n            if (connectionObj.socket && connectionObj.socket.socket) {\r\n                return connectionObj.socket.socket.connected;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns a boolean to the callback indicating if connection is in a given group. NOT YET IMPLEMENTED\r\n         * @ignore\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string}    groupName Group name to check.\r\n         * @param       {function(?Error, Boolean)} callback Callback with error and a boolean indicating if connection is in a room..\r\n         */\r\n        connectionObj.isInGroup = function(groupName, callback) {\r\n            if (_.isString(groupName) && e.app[appName].connection[easyrtcid].group[groupName] !== undefined) {\r\n                callback(null, true);\r\n            }\r\n            else {\r\n                callback(null, false);\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns a boolean to the callback indicating if connection is in a given room\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n         * @param       {function(?Error, Boolean)} callback Callback with error and a boolean indicating if connection is in a room..\r\n         */\r\n        connectionObj.isInRoom = function(roomName, callback) {\r\n            if (_.isString(roomName) && e.app[appName].connection[easyrtcid].room[roomName] !== undefined) {\r\n                callback(null, true);\r\n            }\r\n            else {\r\n                callback(null, false);\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Joins an existing room, returning a connectionRoom object.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n         * @param       {function(?Error, Object=)} callback Callback with error and object containing EasyRTC connection room object (same as calling room(roomName))\r\n         */\r\n        connectionObj.joinRoom = function(roomName, callback) {\r\n            if (!roomName || !appObj.getOption(\"roomNameRegExp\").test(roomName)) {\r\n                pub.util.logWarning(\"[\" + appName + \"][\" + easyrtcid + \"] Can not enter room with improper name: '\" + roomName + \"'\");\r\n                callback(new pub.util.ConnectionWarning(\"Can not enter room with improper name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            // Check if room doesn't exist\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"[\" + appName + \"][\" + easyrtcid + \"] Can not enter room which doesn't exist: '\" + roomName + \"'\");\r\n                callback(new pub.util.ConnectionWarning(\"Can not enter room which doesn't exist: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n\r\n            // Check if client already in room\r\n            if (e.app[appName].connection[easyrtcid].room[roomName]) {\r\n                connectionObj.room(roomName, callback);\r\n                return;\r\n            }\r\n\r\n            // Local private function to create the default connection-room object in the private variable\r\n            var createConnectionRoom = function(roomName, appRoomObj, callback) {\r\n                // Join room. Creates a default connection room object\r\n                e.app[appName].connection[easyrtcid].room[roomName] = {\r\n                    apiField: {},\r\n                    enteredOn: Date.now(),\r\n                    gotListOn: Date.now(),\r\n                    clientList: {},\r\n                    toRoom: e.app[appName].room[roomName]\r\n                };\r\n\r\n                // Add easyrtcid to room clientList\r\n                e.app[appName].room[roomName].clientList[easyrtcid] = {\r\n                    enteredOn: Date.now(),\r\n                    modifiedOn: Date.now(),\r\n                    toConnection: e.app[appName].connection[easyrtcid]\r\n                };\r\n\r\n                // Returns connection room object to callback.\r\n                connectionObj.room(roomName, callback);\r\n            };\r\n\r\n            appObj.room(roomName, function(err, appRoomObj) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                createConnectionRoom(roomName, appRoomObj, callback);\r\n            });\r\n        };\r\n\r\n\r\n        /**\r\n         * Gets room object for a given room name. Returns null if room not found.\r\n         * The returned room object includes functions for managing room fields.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n         * @param       {function(?Error, Object=)} callback Callback with error and object containing EasyRTC connection room object.\r\n         */\r\n        connectionObj.room = function(roomName, callback) {\r\n            if (_.isUndefined(e.app[appName].connection[easyrtcid].room[roomName])) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                callback(new pub.util.ConnectionWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n\r\n            /**\r\n             * This is a gateway object connecting connections to the rooms they are in.\r\n             *\r\n             * @class       connectionRoomObj\r\n             * @memberof    pub.appObj.connectionObj\r\n             */\r\n            var connectionRoomObj = {};\r\n\r\n            // House the local room object\r\n            var _roomObj;\r\n\r\n\r\n            /**\r\n             * Expose all event functions\r\n             * \r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             */\r\n            connectionRoomObj.events = pub.events;\r\n\r\n\r\n            /**\r\n             * Expose all utility functions\r\n             * \r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             */\r\n            connectionRoomObj.util = pub.util;\r\n\r\n\r\n            /**\r\n             * Returns the application object to which the connection belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @return      {Object}    The application object\r\n             */\r\n            connectionRoomObj.getApp = function() {\r\n                return appObj;\r\n            };\r\n\r\n\r\n            /**\r\n             * Returns the application name for the application to which the connection belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @return      {string}    The application name\r\n             */\r\n            connectionRoomObj.getAppName = function() {\r\n                return appName;\r\n            };\r\n\r\n\r\n            /**\r\n             * Returns the connection object to which the connection belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @return      {Object}    The application object\r\n             */\r\n            connectionRoomObj.getConnection = function() {\r\n                return connectionObj;\r\n            };\r\n\r\n\r\n            /**\r\n             * Returns the room object to which the connection belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @return      {Object}    The room object\r\n             */\r\n            connectionRoomObj.getRoom = function() {\r\n                return _roomObj;\r\n            };\r\n\r\n\r\n            /**\r\n             * Returns the room name to which the connection belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @return      {string}    The room name\r\n             */\r\n            connectionRoomObj.getRoomName = function() {\r\n                return roomName;\r\n            };\r\n\r\n\r\n            /**\r\n             * Leaves the current room. Any room variables will be lost.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @param       {nextCallback} [next]   A success callback of form next(err).\r\n             */\r\n            connectionRoomObj.leaveRoom = function(next) {\r\n                if (!_.isFunction(next)) {\r\n                    next = pub.util.nextToNowhere;\r\n                }\r\n\r\n                if (appObj.isRoomSync(roomName)){\r\n                    e.app[appName].room[roomName].modifiedOn = Date.now();\r\n                    delete e.app[appName].room[roomName].clientList[easyrtcid];\r\n                }\r\n\r\n                if (e.app[appName].connection[easyrtcid]){\r\n                    delete e.app[appName].connection[easyrtcid].room[roomName];\r\n                }\r\n\r\n                connectionRoomObj.emitRoomDataDelta(true, function(err, roomDataObj) {\r\n                    next(err);\r\n                });\r\n            };\r\n\r\n\r\n            /**\r\n             * Emits the roomData message with a clientListDelta for the current connection to other connections in the same room.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @param       {boolean}   isLeavingRoom   Is connection leaving the room?\r\n             * @param       {function(?Error, Object=)} callback Callback with error and room data delta object.\r\n             */\r\n            connectionRoomObj.emitRoomDataDelta = function(isLeavingRoom, callback) {\r\n                pub.util.logDebug(\"[\" + appName + \"][\" + easyrtcid + \"] Room [\" + roomName + \"] Running func 'connectionRoomObj.emitRoomDataDelta'\");\r\n                if (!_.isFunction(callback)) {\r\n                    callback = function(err, roomDataObj) {\r\n                    };\r\n                }\r\n\r\n                connectionRoomObj.generateRoomDataDelta(isLeavingRoom, function(err, roomDataDelta) {\r\n                    if (err) {\r\n                        callback(err);\r\n                        return;\r\n                    }\r\n                    if (!appObj.isRoomSync(roomName)) {\r\n                        pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                        callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                        return;\r\n                    }\r\n\r\n                    var msg = {\"msgData\": {\"roomData\": {}}};\r\n                    msg.msgData.roomData[roomName] = roomDataDelta;\r\n\r\n                    for (var currentEasyrtcid in e.app[appName].room[roomName].clientList) {\r\n                        // Anonymous wrapper to deliver arguments\r\n                        (function(innerCurrentEasyrtcid, innerMsg){\r\n                            connectionObj.getApp().connection(innerCurrentEasyrtcid, function(err, emitToConnectionObj) {\r\n                                if (!err && innerCurrentEasyrtcid != easyrtcid && emitToConnectionObj) {\r\n                                    pub.events.emit(\"emitEasyrtcCmd\", emitToConnectionObj, \"roomData\", innerMsg, null, function() {\r\n                                    });\r\n                                }\r\n                            });\r\n                        })(currentEasyrtcid, msg);\r\n\r\n                    }\r\n                    callback(null, roomDataDelta);\r\n                });\r\n            };\r\n\r\n\r\n            /**\r\n             * Generated the roomData[room] message with a clientListDelta for the current connection to other connections in the same room.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @param       {boolean}   isLeavingRoom   Is connection leaving the room?\r\n             * @param       {function(?Error, Object=)} callback Callback with error and room data delta object.\r\n             */\r\n            connectionRoomObj.generateRoomDataDelta = function(isLeavingRoom, callback) {\r\n                pub.util.logDebug(\"[\" + appName + \"][\" + easyrtcid + \"] Room [\" + roomName + \"] Running func 'connectionRoomObj.generateRoomDataDelta'\");\r\n                if (!_.isFunction(callback)) {\r\n                    callback = pub.util.nextToNowhere;\r\n                }\r\n                if (!appObj.isRoomSync(roomName)) {\r\n                    pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                    callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                    return;\r\n                }\r\n                var roomDataDelta = {\"roomName\": roomName, \"roomStatus\": \"update\", \"clientListDelta\": {}};\r\n\r\n                if (isLeavingRoom) {\r\n                    roomDataDelta.clientListDelta.removeClient = {};\r\n                    roomDataDelta.clientListDelta.removeClient[easyrtcid] = {\"easyrtcid\": easyrtcid};\r\n                } else {\r\n                    var connectionRoom = e.app[appName].connection[easyrtcid].room[roomName];\r\n                    roomDataDelta.clientListDelta.updateClient = {};\r\n                    roomDataDelta.clientListDelta.updateClient[easyrtcid] = {\r\n                        \"easyrtcid\": easyrtcid,\r\n                        \"roomJoinTime\": e.app[appName].connection[easyrtcid].room[roomName].enteredOn,\r\n                        \"presence\": e.app[appName].connection[easyrtcid].presence\r\n                    };\r\n\r\n                    if (!_.isEmpty(e.app[appName].connection[easyrtcid].room[roomName].apiField)) {\r\n                        roomDataDelta.clientListDelta.updateClient[easyrtcid].apiField = e.app[appName].connection[easyrtcid].room[roomName].apiField;\r\n                    }\r\n                    if (e.app[appName].connection[easyrtcid].username) {\r\n                        roomDataDelta.clientListDelta.updateClient[easyrtcid].username = e.app[appName].connection[easyrtcid].username;\r\n                    }\r\n                }\r\n\r\n                callback(null, roomDataDelta);\r\n            };\r\n\r\n            /**\r\n             * Sets the API field for the current connection in a room.\r\n             *\r\n             * @memberof    pub.appObj.connectionObj.connectionRoomObj\r\n             * @param       {object}    apiFieldObj     A API field object, including the field name and field value.\r\n             * @param       {nextCallback} next         A success callback of form next(err).\r\n             */\r\n            connectionRoomObj.setApiField = function(apiFieldObj, next) {\r\n                if (!_.isFunction(next)) {\r\n                    next = pub.util.nextToNowhere;\r\n                }\r\n\r\n                e.app[appName].connection[easyrtcid].room[roomName].apiField = pub.util.deepCopy(apiFieldObj);\r\n                next(null);\r\n            };\r\n\r\n            // Set the roomObj before returning the connectionRoomObj\r\n            appObj.room(roomName,\r\n                    function(err, roomObj) {\r\n                        _roomObj = roomObj;\r\n                        callback(null, connectionRoomObj);\r\n                    }\r\n            );\r\n        };\r\n\r\n\r\n        /**\r\n         * Removes a connection object. Does not (currently) remove connection from rooms or groups.\r\n         *\r\n         * @memberof    pub.appObj.connectionObj\r\n         * @param       {nextCallback} next         A success callback of form next(err).\r\n         */\r\n        connectionObj.removeConnection = function(next) {\r\n            if (e.app[appName] && _.isObject(e.app[appName].connection) && e.app[appName].connection[easyrtcid]) {\r\n                e.app[appName].connection[easyrtcid].isAuthenticated = false;\r\n                // Remove link to connection from session in local storage\r\n                if (e.app[appName].connection[easyrtcid].toSession) {\r\n                    delete e.app[appName].connection[easyrtcid].toSession.toConnection[easyrtcid];\r\n                }\r\n\r\n                // Remove connection from local storage\r\n                delete e.app[appName].connection[easyrtcid];\r\n            }\r\n            next(null);\r\n        };\r\n\r\n        // Before returning connectionObj, join the connection to a session (if available).\r\n        if (e.app[appName].connection[easyrtcid].toSession) {\r\n            appObj.session(e.app[appName].connection[easyrtcid].toSession.easyrtcsid, function(err, sessionObj) {\r\n                if (err) {\r\n                    callback(err);\r\n                    return;\r\n                }\r\n                _sessionObj = sessionObj;\r\n                callback(null, connectionObj);\r\n            });\r\n        } else {\r\n            callback(null, connectionObj);\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Creates a new connection with a provided connection key\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    easyrtcid   EasyRTC unique identifier for a socket connection.\r\n     * @param       {string}    socketId    Socket.io socket identifier for a socket connection.\r\n     * @param       {function(?Error, Object=)} callback Callback with error and object containing EasyRTC connection object (same as calling connection(easyrtcid))\r\n     */\r\n    appObj.createConnection = function(easyrtcid, socketId, callback) {\r\n        if (!easyrtcid || !appObj.getOption(\"easyrtcidRegExp\").test(easyrtcid)) {\r\n            pub.util.logWarning(\"Can not create connection with improper name: '\" + easyrtcid + \"'\");\r\n            callback(new pub.util.ConnectionWarning(\"Can not create connection with improper name: '\" + easyrtcid + \"'\"));\r\n            return;\r\n        }\r\n\r\n        if (e.app[appName].connection[easyrtcid]) {\r\n            pub.util.logWarning(\"Can not create connection which already exists: '\" + easyrtcid + \"'\");\r\n            callback(new pub.util.ConnectionWarning(\"Can not create connection which already exists: '\" + easyrtcid + \"'\"));\r\n            return;\r\n        }\r\n\r\n        // Set the connection structure with some default values\r\n        e.app[appName].connection[easyrtcid] = {\r\n            easyrtcid: easyrtcid,\r\n            socketId: socketId,\r\n            connectOn: Date.now(),\r\n            isAuthenticated: false,\r\n            userName: null,\r\n            credential: null,\r\n            field: {},\r\n            group: {},\r\n            presence: {\r\n                show: \"chat\",\r\n                status: null\r\n            },\r\n            room: {},\r\n            toApp: e.app[appName]\r\n        };\r\n\r\n        // Initialize a new connection object\r\n        appObj.connection(easyrtcid, function(err, connectionObj) {\r\n            if (err) {\r\n                callback(err);\r\n                return;\r\n            }\r\n\r\n            // Set default connection fields\r\n            var connectionDefaultFieldObj = appObj.getOption(\"connectionDefaultFieldObj\");\r\n            if (_.isObject(connectionDefaultFieldObj)) {\r\n                for (var currentFieldName in connectionDefaultFieldObj) {\r\n                    connectionObj.setField(\r\n                            currentFieldName,\r\n                            connectionDefaultFieldObj[currentFieldName].fieldValue,\r\n                            connectionDefaultFieldObj[currentFieldName].fieldOption,\r\n                            null\r\n                            );\r\n                }\r\n            }\r\n\r\n            callback(null, connectionObj);\r\n        });\r\n    };\r\n\r\n\r\n    /**\r\n     * Counts how many occupants are in a room.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n     * @param       {function(?Error, number=)} callback Callback with error and client count\r\n     */\r\n    appObj.getRoomOccupantCount = function(roomName, callback) {\r\n        if (!appObj.isRoomSync(roomName)) {\r\n            callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n            return;\r\n        }\r\n\r\n        callback(null, _.size(e.app[appName].room[roomName].clientList));\r\n    };\r\n\r\n    /**\r\n     * Delete an existing room, providing the room is empty.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n     * @param       {function(?Error, Object=)} callback Callback with error and true if a room was deleted.\r\n     */\r\n    appObj.deleteRoom = function(roomName, callback) {\r\n        if (!roomName) {\r\n            var errorMsg = \"Can't delete room with a null room name\";\r\n            pub.util.logWarning(errorMsg);\r\n            callback(new pub.util.ApplicationWarning(errorMsg), false);\r\n            return;\r\n        }\r\n\r\n        // If room is already deleted or if it doesn't exist, report error\r\n        if (!appObj.isRoomSync(roomName)) {\r\n            var errorMsg = \"Can't delete non-existing room: \" + roomName;\r\n            pub.util.logWarning(errorMsg);\r\n            callback(new pub.util.ApplicationWarning(errorMsg), false);\r\n            return;\r\n        }\r\n\r\n        if (!_.isEmpty(e.app[appName].room[roomName].clientList)){\r\n            var errorMsg = \"Can't delete room \" + roomName + \" because it isn't empty\";\r\n            pub.util.logWarning(errorMsg);\r\n            callback(new pub.util.ApplicationWarning(errorMsg), false);\r\n            return;\r\n        }\r\n\r\n        e.app[appName].room[roomName].deleted = true;\r\n\r\n        delete e.app[appName].room[roomName];\r\n        callback(null, true);\r\n    };\r\n\r\n\r\n    /**\r\n     * Creates a new room, sending the resulting room object to a provided callback.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n     * @param       {?object}   options     Options object with options to apply to the room. May be null.\r\n     * @param       {function(?Error, Object=)} callback Callback with error and object containing EasyRTC room object (same as calling appObj.room(roomName))\r\n     */\r\n    appObj.createRoom = function(roomName, options, callback) {\r\n        if (!roomName || !appObj.getOption(\"roomNameRegExp\").test(roomName)) {\r\n            pub.util.logWarning(\"Can not create room with improper name: '\" + roomName + \"'\");\r\n            callback(new pub.util.ApplicationWarning(\"Can not create room with improper name: '\" + roomName + \"'\"));\r\n            return;\r\n        }\r\n        if (appObj.isRoomSync(roomName)) {\r\n            pub.util.logWarning(\"Can not create room which already exists: '\" + roomName + \"'\");\r\n            callback(new pub.util.ApplicationWarning(\"Can not create room which already exists: '\" + roomName + \"'\"));\r\n            return;\r\n        }\r\n        if (!_.isObject(options)) {\r\n            options = {};\r\n        }\r\n        pub.util.logDebug(\"Creating room: '\" + roomName + \"' with options:\", options);\r\n\r\n        e.app[appName].room[roomName] = {\r\n            roomName: roomName,\r\n            deleted: false,\r\n            clientList: {},\r\n            field: {},\r\n            option: {},\r\n            modifiedOn: Date.now()\r\n        };\r\n\r\n        // Initialize a new room object\r\n        appObj.room(roomName, function(err, roomObj) {\r\n            if (err) {\r\n                callback(err);\r\n                return;\r\n            }\r\n\r\n            // Set all options in options object. If any fail, an error will be sent to the callback.\r\n            async.each(Object.keys(options), function(currentOptionName, asyncCallback) {\r\n                roomObj.setOption(currentOptionName, options[currentOptionName]);\r\n                asyncCallback(null);\r\n            },\r\n                    function(err) {\r\n                        if (err) {\r\n                            callback(new pub.util.ApplicationError(\"Could not set options when creating room: '\" + roomName + \"'\", err));\r\n                            return;\r\n                        }\r\n\r\n                        // Set default room fields\r\n                        var roomDefaultFieldObj = roomObj.getOption(\"roomDefaultFieldObj\");\r\n\r\n                        if (_.isObject(roomDefaultFieldObj)) {\r\n                            for (var currentFieldName in roomDefaultFieldObj) {\r\n                                roomObj.setField(\r\n                                        currentFieldName,\r\n                                        roomDefaultFieldObj[currentFieldName].fieldValue,\r\n                                        roomDefaultFieldObj[currentFieldName].fieldOption,\r\n                                        null\r\n                                        );\r\n                            }\r\n                        }\r\n\r\n                        // Return room object to callback\r\n                        callback(null, roomObj);\r\n                    });\r\n        });\r\n    };\r\n\r\n\r\n    /**\r\n     * Creates a new session with a provided easyrtcsid\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    easyrtcsid  EasyRTC Session Identifier. Must be formatted according to \"easyrtcsidRegExp\" option.\r\n     * @param       {function(?Error, Object=)} callback Callback with error and object containing EasyRTC session object (same as calling session(easyrtcsid))\r\n     */\r\n    appObj.createSession = function(easyrtcsid, callback) {\r\n        pub.util.logDebug(\"[\" + appObj.getAppName() + \"] Creating session [\" + easyrtcsid + \"]\");\r\n\r\n        if (!easyrtcsid || !appObj.getOption(\"easyrtcsidRegExp\").test(easyrtcsid)) {\r\n            pub.util.logWarning(\"Can not create session with improper name [\" + easyrtcsid + \"]\");\r\n            callback(new pub.util.ConnectionWarning(\"Can not create session with improper name [\" + easyrtcsid + \"]\"));\r\n            return;\r\n        }\r\n\r\n        if (e.app[appName].session[easyrtcsid]) {\r\n            pub.util.logWarning(\"Can not create session which already exists [\" + easyrtcsid + \"]\");\r\n            callback(new pub.util.ConnectionWarning(\"Can not create session which already exists [\" + easyrtcsid + \"]\"));\r\n            return;\r\n        }\r\n\r\n        // Set the session structure with some default values\r\n        e.app[appName].session[easyrtcsid] = {\r\n            \"easyrtcsid\": easyrtcsid,\r\n            \"startOn\": Date.now(),\r\n            \"toConnection\":{},\r\n            \"field\": {}\r\n        };\r\n\r\n        appObj.session(easyrtcsid, callback);\r\n    };\r\n\r\n\r\n    /**\r\n     * Checks if a provided room is defined. The callback returns a boolean if room is defined.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n     * @param       {function(?Error, boolean)} callback Callback with error and boolean of whether room is defined.\r\n     */\r\n    appObj.isRoom = function(roomName, callback) {\r\n        callback(null,((e.app[appName] && e.app[appName].room[roomName] && !e.app[appName].room[roomName].deleted) ? true : false));\r\n    };\r\n\r\n\r\n    /**\r\n     * Checks if a provided room is defined. This is a synchronous function, thus may not be available in custom cases where room state is not kept in memory.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n     * @return      {Boolean}               Returns boolean. True if room is defined.\r\n     */\r\n    appObj.isRoomSync = function(roomName) {\r\n        return ((e.app[appName] && e.app[appName].room[roomName] && !e.app[appName].room[roomName].deleted) ? true : false);\r\n    };\r\n\r\n\r\n    /**\r\n     * Checks if a provided session is defined. The callback returns a boolean if session is defined\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    easyrtcsid      EasyRTC session identifier\r\n     * @param       {function(?Error, boolean)} callback Callback with error and boolean of whether session is defined.\r\n     */\r\n    appObj.isSession = function(easyrtcsid, callback) {\r\n        callback(null, (e.app[appName].session[easyrtcsid] ? true : false));\r\n    };\r\n\r\n\r\n    /**\r\n     * NOT YET IMPLEMENTED - Gets group object for a given group name. Returns null if group not found.\r\n     * The returned group object includes functions for managing group fields.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    groupName   Group name\r\n     * @param       {function(?Error, Object=)} callback Callback with error and object containing EasyRTC group object.\r\n     */\r\n    appObj.group = function(groupName, callback) {\r\n        if (!e.app[appName].group[groupName]) {\r\n            pub.util.logWarning(\"Attempt to request non-existent group name: '\" + groupName + \"'\");\r\n            callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent group name: '\" + groupName + \"'\"));\r\n            return;\r\n        }\r\n\r\n        var groupObj = {};\r\n\r\n        /**\r\n         * Expose all event functions\r\n         */\r\n        groupObj.events = pub.events;\r\n\r\n        /**\r\n         * Expose all utility functions\r\n         */\r\n        groupObj.util = pub.util;\r\n\r\n        /**\r\n         * NOT YET IMPLEMENTED - Returns an array of all connected clients within the room.\r\n         *\r\n         * @ignore\r\n         * @param {function(?Error, Array.<string>)} callback Callback with error and array containing all easyrtcids.\r\n         */\r\n        groupObj.getConnections = function(callback) {\r\n            var connectedEasyrtcidArray = [];\r\n            for (var key in e.app[appName].group[groupName].clientList) {\r\n                connectedEasyrtcidArray.push(key);\r\n            }\r\n            callback(null, connectedEasyrtcidArray);\r\n        };\r\n\r\n        callback(null, groupObj);\r\n    };\r\n\r\n\r\n    /**\r\n     * Gets room object for a given room name. Returns null if room not found.\r\n     * The returned room object includes functions for managing room fields.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\r\n     * @param       {function(?Error, Object=)} callback Callback with error and object containing EasyRTC room object.\r\n     */\r\n    appObj.room = function(roomName, callback) {\r\n        if (!appObj.isRoomSync(roomName)) {\r\n            pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n            callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * EasyRTC Room Object. Contains methods for handling a specific room including determining which connections have joined.\r\n         *\r\n         * @class       roomObj\r\n         * @memberof    pub.appObj\r\n         */\r\n        var roomObj = {};\r\n\r\n\r\n        /**\r\n         * Expose all event functions\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         */\r\n        roomObj.events = pub.events;\r\n\r\n\r\n        /**\r\n         * Expose all utility functions\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         */\r\n        roomObj.util = pub.util;\r\n\r\n\r\n        /**\r\n         * Returns the application object to which the room belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @return      {Object}    The application object\r\n         */\r\n        roomObj.getApp = function() {\r\n            return appObj;\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the application name for the application to which the room belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @return      {string}    The application name\r\n         */\r\n        roomObj.getAppName = function() {\r\n            return appName;\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the room name for the current room. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @return      {string}    The room name\r\n         */\r\n        roomObj.getRoomName = function() {\r\n            return roomName;\r\n        };\r\n\r\n\r\n        /**\r\n         * INCOMPLETE: Emits a roomData message containing fields to all connections in the current room. This is meant to be called after a room field has been set or updated. \r\n         * @ignore \r\n         */\r\n        roomObj.emitRoomDataFieldUpdate = function(skipEasyrtcid, next) {\r\n            roomObj.getFields(true, function(err, fieldObj) {\r\n                if (err) {\r\n                    next(err);\r\n                    return;\r\n                }\r\n                if (!appObj.isRoomSync(roomName)) {\r\n                    pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                    next(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                    return;\r\n                }\r\n\r\n                var outgoingMsg = {\"msgData\": {\"roomData\": {}}};\r\n                outgoingMsg.msgData.roomData[roomName] = {\r\n                    \"roomName\": roomName,\r\n                    \"roomStatus\": \"update\"\r\n                };\r\n                outgoingMsg.msgData.roomData[roomName].field = fieldObj;\r\n\r\n                async.each(\r\n                        Object.keys(e.app[appName].room[roomName].clientList),\r\n                        function(currentEasyrtcid, asyncCallback) {\r\n\r\n                            // Skip a given easyrtcid?\r\n                            if (skipEasyrtcid && (skipEasyrtcid == currentEasyrtcid)) {\r\n                                asyncCallback(null);\r\n                                return;\r\n                            }\r\n\r\n                            // Retrieve a connection object, then send the roomData message.\r\n                            appObj.connection(currentEasyrtcid, function(err, targetConnectionObj) {\r\n                                if (err || !_.isObject(targetConnectionObj)) {\r\n                                    pub.util.logDebug(\"[\" + currentEasyrtcid + \"] Could not get connection object to send room data field update. Client may have disconnected.\");\r\n                                    asyncCallback(null);\r\n                                    return;\r\n                                }\r\n                                pub.events.emit(\"emitEasyrtcCmd\", targetConnectionObj, \"roomData\", outgoingMsg, function(msg) {\r\n                                }, function(err) {\r\n                                    // Ignore errors if unable to send to a socket. \r\n                                    asyncCallback(null);\r\n                                });\r\n                            });\r\n                        },\r\n                        function(err) {\r\n                            next(null);\r\n                        }\r\n                );\r\n            });\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns room level field object for a given field name to a provided callback.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {string}    fieldName   Field name\r\n         * @param       {function(?Error, Object=)} callback Callback with error and field object (any type)\r\n         */\r\n        roomObj.getField = function(fieldName, callback) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            if (!e.app[appName].room[roomName].field[fieldName]) {\r\n                pub.util.logDebug(\"Can not find room field: '\" + fieldName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Can not find room field: '\" + fieldName + \"'\"));\r\n                return;\r\n            }\r\n            callback(null, pub.util.deepCopy(e.app[appName].room[roomName].field[fieldName]));\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns room level field object for a given field name. If the field is not set, it will return a field value will a null field value.  This is a synchronous function, thus may not be available in custom cases where state is not kept in memory.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {string}    fieldName   Field name\r\n         * @returns     {Object}        Field object\r\n         */\r\n        roomObj.getFieldSync = function(fieldName) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                return {\"fieldName\": fieldName, \"fieldOption\": {}, \"fieldValue\": null};\r\n            }\r\n            if (!e.app[appName].room[roomName].field[fieldName]) {\r\n                return {\"fieldName\": fieldName, \"fieldOption\": {}, \"fieldValue\": null};\r\n            }\r\n            return pub.util.deepCopy(e.app[appName].room[roomName].field[fieldName]);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns room level field value for a given field name. If the field is not set, it will return a null field value.  This is a synchronous function, thus may not be available in custom cases where state is not kept in memory.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {string}    fieldName   Field name\r\n         * @returns     {?*}        Field value\r\n         */\r\n        roomObj.getFieldValueSync = function(fieldName) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                return null;\r\n            }\r\n            if (!e.app[appName].room[roomName].field[fieldName]) {\r\n                return null;\r\n            }\r\n            return pub.util.deepCopy(e.app[appName].room[roomName].field[fieldName].fieldValue);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns an object containing all field names and values within the room. Can be limited to fields with isShared option set to true.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {boolean}   limitToIsShared Limits returned fields to those which have the isShared option set to true.\r\n         * @param       {function(?Error, Object=)} callback Callback with error and object containing field names and values.\r\n         */\r\n        roomObj.getFields = function(limitToIsShared, callback) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            var fieldObj = {};\r\n            for (var fieldName in e.app[appName].room[roomName].field) {\r\n                if (!limitToIsShared || e.app[appName].room[roomName].field[fieldName].fieldOption.isShared) {\r\n                    fieldObj[fieldName] = {\r\n                        fieldName: fieldName,\r\n                        fieldValue: pub.util.deepCopy(e.app[appName].room[roomName].field[fieldName].fieldValue)\r\n                    };\r\n                }\r\n            }\r\n            callback(null, fieldObj);\r\n        };\r\n\r\n\r\n        /**\r\n         * Gets individual option value. Will first check if option is defined for the room, else it will revert to the application level option (which will in turn fall back to the global level).\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {String}    optionName  Option name\r\n         * @return      {*}         Option value (can be any type)\r\n         */\r\n        roomObj.getOption = function(optionName) {\r\n            return ((!appObj.isRoomSync(roomName) || e.app[appName].room[roomName].option[optionName] === undefined) ? appObj.getOption(optionName) : (e.app[appName].room[roomName].option[optionName]));\r\n        };\r\n\r\n\r\n        /**\r\n         * Sets individual option which applies only to this room. Set value to NULL to delete the option (thus reverting to global option)\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {Object}    optionName  Option name\r\n         * @param       {Object}    optionValue Option value\r\n         * @return      {Boolean}               true on success, false on failure\r\n         */\r\n        roomObj.setOption = function(optionName, optionValue) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                return false;\r\n            }\r\n            // Can only set options which currently exist\r\n            if (typeof e.option[optionName] == \"undefined\") {\r\n                pub.util.logError(\"Error setting option. Unrecognised option name '\" + optionName + \"'.\");\r\n                return false;\r\n            }\r\n\r\n            // If value is null, delete option from application (reverts to global option)\r\n            if (optionValue == null) {\r\n                if (!(e.app[appName].option[optionName] === undefined)) {\r\n                    delete e.app[appName].room[roomName].option[optionName];\r\n                }\r\n            } else {\r\n                // Set the option value to be a full deep copy, thus preserving private nature of the private EasyRTC object.\r\n                e.app[appName].room[roomName].option[optionName] = pub.util.deepCopy(optionValue);\r\n            }\r\n            return true;\r\n        };\r\n\r\n\r\n        /**\r\n         * Incomplete function for setting an easyrtcid as being a client in a room.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {string}    easyrtcid   EasyRTC unique identifier for a socket connection.\r\n         * @param       {nextCallback} next     A success callback of form next(err).\r\n         * @ignore\r\n         */\r\n        roomObj.setConnection = function(easyrtcid, next) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                next(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            pub.util.logWarning(\"Using deprecated roomObj.setConnection() function\");\r\n            e.app[appName].room[roomName].clientList[easyrtcid] = {enteredOn: Date.now()};\r\n            next(null);\r\n        };\r\n\r\n\r\n        /**\r\n         * Sets room field value for a given field name.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {string}    fieldName       Must be formatted according to \"fieldNameRegExp\" option.\r\n         * @param       {Object}    fieldValue\r\n         * @param       {?Object}   fieldOption     Field options (such as isShared which defaults to false)\r\n         * @param       {nextCallback} [next]       A success callback of form next(err). Possible err will be instanceof (ApplicationWarning).\r\n         */\r\n        roomObj.setField = function(fieldName, fieldValue, fieldOption, next) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                next(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            pub.util.logDebug(\"[\" + appName + \"] Room [\" + roomName + \"] - Setting field [\" + fieldName + \"]\", fieldValue);\r\n            if (!_.isFunction(next)) {\r\n                next = pub.util.nextToNowhere;\r\n            }\r\n\r\n            if (!pub.getOption(\"fieldNameRegExp\").test(fieldName)) {\r\n                pub.util.logWarning(\"Can not create room field with improper name: '\" + fieldName + \"'\");\r\n                next(new pub.util.ApplicationWarning(\"Can not create room field with improper name: '\" + fieldName + \"'\"));\r\n                return;\r\n            }\r\n\r\n            e.app[appName].room[roomName].field[fieldName] = {\r\n                fieldName: fieldName,\r\n                fieldValue: fieldValue,\r\n                fieldOption: {isShared: ((_.isObject(fieldOption) && fieldOption.isShared) ? true : false)}\r\n            };\r\n\r\n            next(null);\r\n        };\r\n\r\n\r\n        /**\r\n         * Sends the count of the number of connections in a room to a provided callback.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {function(?Error, Number)} callback Callback with error and array containing all easyrtcids.\r\n         */\r\n        roomObj.getConnectionCount = function(callback) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            callback(null, roomObj.getConnectionCountSync());\r\n        };\r\n\r\n\r\n        /**\r\n         * Sends the count of the number of connections in a room to a provided callback. Returns 0 if room doesn't exist.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @returns     {Number} The current number of connections in a room.\r\n         */\r\n        roomObj.getConnectionCountSync = function() {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                return 0;\r\n            }\r\n            return _.size(e.app[appName].room[roomName].clientList);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns an array containing the easyrtcids of all connected clients within the room.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param {function(?Error, Array.<string>=)} callback Callback with error and array containing all easyrtcids.\r\n         */\r\n        roomObj.getConnections = function(callback) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            var connectedEasyrtcidArray = [];\r\n            for (var key in e.app[appName].room[roomName].clientList) {\r\n                connectedEasyrtcidArray.push(key);\r\n            }\r\n            callback(null, connectedEasyrtcidArray);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the connectionObj for a given easyrtcid, but only if it is currently a client in the room\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param       {string}    easyrtcid   EasyRTC unique identifier for a socket connection.\r\n         * @param {function(?Error, Object=)} callback Callback with error and connectionObj.\r\n         */\r\n        roomObj.getConnectionWithEasyrtcid = function(easyrtcid, callback) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            if (e.app[appName].room[roomName].clientList[easyrtcid]){\r\n                appObj.connection(easyrtcid, function(err, connectionObj) {\r\n                    if (err) {\r\n                        callback(new pub.util.ConnectionWarning(\"Can not find connection [\" + easyrtcid + \"] in room.\"));\r\n                        return;\r\n                    }\r\n                    // If there is no error, than run callback with the connection object.\r\n                    callback(null, connectionObj);\r\n                });\r\n            }\r\n            else {\r\n                callback(new pub.util.ConnectionWarning(\"Can not find connection [\" + easyrtcid + \"] in room.\"));\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns an array containing the connectionObjs of all connected clients within the room.\r\n         *\r\n         * @memberof    pub.appObj.roomObj\r\n         * @param {function(?Error, Array.<Object>=)} callback Callback with error and array containing connectionObjs.\r\n         */\r\n        roomObj.getConnectionObjects = function(callback) {\r\n            if (!appObj.isRoomSync(roomName)) {\r\n                pub.util.logWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent room name: '\" + roomName + \"'\"));\r\n                return;\r\n            }\r\n            var connectedObjArray = [];\r\n            async.each(Object.keys(e.app[appName].room[roomName].clientList),\r\n                    function(currentEasyrtcid, asyncCallback) {\r\n                        appObj.connection(currentEasyrtcid, function(err, connectionObj) {\r\n                            if (err) {\r\n                                // We will silently ignore errors\r\n                                asyncCallback(null);\r\n                                return;\r\n                            }\r\n                            // If there is no error, than push the connection object.\r\n                            connectedObjArray.push(connectionObj);\r\n                            asyncCallback(null);\r\n                        });\r\n                    },\r\n                    function(err) {\r\n                        callback(null, connectedObjArray);\r\n                    }\r\n            );\r\n        };\r\n\r\n        callback(null, roomObj);\r\n    };\r\n\r\n\r\n    /**\r\n     * NOT YET IMPLEMENTED - Gets session object for a given easyrtcsid. Returns null if session not found.\r\n     * The returned session object includes functions for managing session fields.\r\n     *\r\n     * @memberof    pub.appObj\r\n     * @param       {string}    easyrtcsid      EasyRTC session identifier\r\n     * @param       {function(?Error, Object=)} callback Callback with error and object containing EasyRTC session object.\r\n     */\r\n    appObj.session = function(easyrtcsid, callback) {\r\n\r\n        if (!e.app[appName].session[easyrtcsid]) {\r\n            pub.util.logWarning(\"Attempt to request non-existent easyrtcsid: '\" + easyrtcsid + \"'\");\r\n            callback(new pub.util.ApplicationWarning(\"Attempt to request non-existent easyrtcsid: '\" + easyrtcsid + \"'\"));\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * The primary method for interfacing with an EasyRTC session.\r\n         *\r\n         * @class       sessionObj\r\n         * @memberof    pub.appObj\r\n         */\r\n        var sessionObj = {};\r\n\r\n\r\n        /**\r\n         * Expose all event functions\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         */\r\n        sessionObj.events = pub.events;\r\n\r\n\r\n        /**\r\n         * Expose all utility functions\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         */\r\n        sessionObj.util = pub.util;\r\n\r\n\r\n        /**\r\n         * Returns the application object to which the session belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         * @return      {Object}    The application object\r\n         */\r\n        sessionObj.getApp = function() {\r\n            return appObj;\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the application name for the application to which the session belongs. Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         * @return      {string}    The application name\r\n         */\r\n        sessionObj.getAppName = function() {\r\n            return appName;\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns the easyrtcsid for the session.  Note that unlike most EasyRTC functions, this returns a value and does not use a callback.\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         * @return      {string}    Returns the easyrtcsid, which is the EasyRTC unique identifier for a session.\r\n         */\r\n        sessionObj.getEasyrtcsid = function() {\r\n            return easyrtcsid;\r\n        };\r\n\r\n        /**\r\n         * Returns the easyrtcsid for the session. Old SessionKey name kept for transition purposes. Use getEasyrtcsid();\r\n         * \r\n         * @memberof    pub.appObj.sessionObj\r\n         * @ignore\r\n         */\r\n        sessionObj.getSessionKey = sessionObj.getEasyrtcsid;\r\n\r\n\r\n        /**\r\n         * Returns session level field object for a given field name to a provided callback.\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         * @param       {string}    fieldName   Field name\r\n         * @param       {function(?Error, Object=)} callback Callback with error and field value (any type)\r\n         */\r\n        sessionObj.getField = function(fieldName, callback) {\r\n            if (!e.app[appName].session[easyrtcsid].field[fieldName]) {\r\n                pub.util.logDebug(\"Can not find session field: '\" + fieldName + \"'\");\r\n                callback(new pub.util.ApplicationWarning(\"Can not find session field: '\" + fieldName + \"'\"));\r\n                return;\r\n            }\r\n            callback(null, pub.util.deepCopy(e.app[appName].session[easyrtcsid].field[fieldName]));\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns session level field object for a given field name. If the field is not set, it will return a field object will a null field value.  This is a synchronous function, thus may not be available in custom cases where state is not kept in memory.\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         * @param       {string}    fieldName   Field name\r\n         * @returns     {Object}    Field object\r\n         */\r\n        sessionObj.getFieldSync = function(fieldName) {\r\n            if (!e.app[appName].session[easyrtcsid].field[fieldName]) {\r\n                return {\"fieldName\": fieldName, \"fieldOption\": {}, \"fieldValue\": null};\r\n            }\r\n            return pub.util.deepCopy(e.app[appName].session[easyrtcsid].field[fieldName]);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns session level field value for a given field name. If the field is not set, it will return a null field value.  This is a synchronous function, thus may not be available in custom cases where state is not kept in memory.\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         * @param       {string}    fieldName   Field name\r\n         * @returns     {?*}        Field value\r\n         */\r\n        sessionObj.getFieldValueSync = function(fieldName) {\r\n            if (!e.app[appName].session[easyrtcsid].field[fieldName]) {\r\n                return null;\r\n            }\r\n            return pub.util.deepCopy(e.app[appName].session[easyrtcsid].field[fieldName].fieldValue);\r\n        };\r\n\r\n\r\n        /**\r\n         * Returns an object containing all field names and values within the session to a provided callback. Can be limited to fields with isShared option set to true.\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         * @param       {boolean}   limitToIsShared Limits returned fields to those which have the isShared option set to true.\r\n         * @param       {function(?Error, Object=)} callback Callback with error and object containing field names and values.\r\n         */\r\n        sessionObj.getFields = function(limitToIsShared, callback) {\r\n            var fieldObj = {};\r\n            for (var fieldName in e.app[appName].session[easyrtcsid].field) {\r\n                if (!limitToIsShared || e.app[appName].session[easyrtcsid].field[fieldName].fieldOption.isShared) {\r\n                    fieldObj[fieldName] = {\r\n                        fieldName: fieldName,\r\n                        fieldValue: pub.util.deepCopy(e.app[appName].session[easyrtcsid].field[fieldName].fieldValue)\r\n                    };\r\n                }\r\n            }\r\n            callback(null, fieldObj);\r\n        };\r\n\r\n\r\n        /**\r\n         * Sets session field value for a given field name.\r\n         *\r\n         * @memberof    pub.appObj.sessionObj\r\n         * @param       {string}    fieldName       Must be formatted according to \"fieldNameRegExp\" option.\r\n         * @param       {Object}    fieldValue\r\n         * @param       {?Object}   fieldOption     Field options (such as isShared which defaults to false)\r\n         * @param       {nextCallback} [next]       A success callback of form next(err). Possible err will be instanceof (ApplicationWarning).\r\n         */\r\n        sessionObj.setField = function(fieldName, fieldValue, fieldOption, next) {\r\n            pub.util.logDebug(\"[\" + appName + \"] Session [\" + easyrtcsid + \"] - Setting field [\" + fieldName + \"]\", fieldValue);\r\n            if (!_.isFunction(next)) {\r\n                next = pub.util.nextToNowhere;\r\n            }\r\n\r\n            if (!pub.getOption(\"fieldNameRegExp\").test(fieldName)) {\r\n                pub.util.logWarning(\"Can not create session field with improper name: '\" + fieldName + \"'\");\r\n                next(new pub.util.ApplicationWarning(\"Can not create session field with improper name: '\" + fieldName + \"'\"));\r\n                return;\r\n            }\r\n\r\n            e.app[appName].session[easyrtcsid].field[fieldName] = {\r\n                fieldName: fieldName,\r\n                fieldValue: fieldValue,\r\n                fieldOption: {isShared: ((_.isObject(fieldOption) && fieldOption.isShared) ? true : false)}\r\n            };\r\n\r\n            next(null);\r\n        };\r\n\r\n        sessionObj.emitSessionDataFieldUpdate = function(next) {\r\n            sessionObj.getFields(true, function(err, fieldObj) {\r\n                if (err) {\r\n                    next(err);\r\n                    return;\r\n                }\r\n                var outgoingMsg = {\"msgData\": {\"sessionData\": {}}};\r\n                outgoingMsg.msgData.sessionData = {\r\n                    \"easyrtcsid\": easyrtcsid,\r\n                    \"sessionStatus\": \"update\"\r\n                };\r\n                outgoingMsg.msgData.sessionData.field = fieldObj;\r\n                // Loop through all active connection objects belonging to session\r\n                async.each(\r\n                    Object.keys(e.app[appName].session[easyrtcsid].toConnection),\r\n                    function(currentEasyrtcid, asyncCallback) {\r\n\r\n                        // Retrieve a connection object, then send the sessionData message.\r\n                        appObj.connection(currentEasyrtcid, function(err, targetConnectionObj) {\r\n                            if (err || !_.isObject(targetConnectionObj)) {\r\n                                pub.util.logDebug(\"[\" + currentEasyrtcid + \"] Could not get connection object to send session data field update. Client may have disconnected.\");\r\n                                asyncCallback(null);\r\n                                return;\r\n                            }\r\n\r\n                            // Emit sessionData easyrtcCmd to each connection\r\n                            pub.events.emit(\"emitEasyrtcCmd\", targetConnectionObj, \"sessionData\", outgoingMsg, function(msg) {\r\n                            }, function(err) {\r\n                                // Ignore errors if unable to send to a socket. \r\n                                asyncCallback(null);\r\n                            });\r\n                        });\r\n                    },\r\n                    function(err) {\r\n                        next(null);\r\n                    }\r\n                );\r\n            });\r\n        };\r\n\r\n        callback(null, sessionObj);\r\n    };\r\n\r\n    callback(null, appObj);\r\n};\r\n\r\n\r\n// Documenting global callbacks\r\n/**\r\n * The next callback is called upon completion of a method. If the `err` parameter is null, than the method completed successfully.\r\n *\r\n * @callback nextCallback\r\n * @param {?Error}      err         Optional Error object. If it is null, than assume no error has occurred.\r\n */\r\n\r\n\r\n/**\r\n * The application callback is called upon completion of a method which is meant to deliver an application object. If the `err` parameter is null, than the method completed successfully.\r\n *\r\n * @callback appCallback\r\n * @param {?Error}      err         Error object. If it is null, than assume no error has occurred.\r\n * @param {?Object}     appObj      Application object. Will be null if an error has occurred.\r\n */\r\n\r\n\r\n/**\r\n * The connection callback is called upon completion of a method which is meant to deliver a connection object. If the `err` parameter is null, than the method completed successfully.\r\n *\r\n * @callback connectionCallback\r\n * @param {?Error}      err         Error object. If it is null, than assume no error has occurred.\r\n * @param {?Object}     connectionObj Connection object. Will be null if an error has occurred.\r\n */\r\n\r\n\r\n/**\r\n * The room callback is called upon completion of a method which is meant to deliver a room object. If the `err` parameter is null, than the method completed successfully.\r\n *\r\n * @callback roomCallback\r\n * @param {?Error}      err         Error object. If it is null, than assume no error has occurred.\r\n * @param {?Object}     roomObj     Room object. Will be null if an error has occurred.\r\n */\r\n\r\n// Documenting Custom Type-Definitions\r\n/**\r\n * An error object\r\n *\r\n * @typedef {Object} Error\r\n */\r\n\r\n// Running the default listeners to initialize the events\r\npub.events.setDefaultListeners();\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/lib/easyrtc_private_obj.js":"/* global module, require */\r\n\r\n/**\r\n * @file        Maintains private object used within EasyRTC for holding in-memory state information\r\n * @module      easyrtc_private_obj\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\r\n\r\n// var _               = require(\"underscore\");                // General utility functions external module\r\nvar defaultOptions  = require(\"./easyrtc_default_options\"); // EasyRTC global variable\r\nvar g               = require(\"./general_util\");            // General utility functions local module\r\n\r\nvar e = {};\r\n\r\ne.version           = g.getPackageData(\"version\");\r\ne.serverStartOn     = Date.now();\r\ne.option            = g.deepCopy(defaultOptions);\r\ne.app               = {};\r\n\r\nmodule.exports = e;\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/lib/easyrtc_default_options.js":"/* global module, require */\r\n\r\n/**\r\n * @file        Default options used within EasyRTC. Overriding of default options should be done using the public listen() or setOption() functions.\r\n * @module      easyrtc_default_options\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\r\n\r\nvar option = {};\r\n\r\n// Application Options\r\noption.appDefaultName       = \"default\";                    // The default application a connection belongs to if it is not initially specified.\r\noption.appAutoCreateEnable  = true;                         // Enables the creation of rooms from the API. Occurs when client joins a nonexistent room.\r\noption.appDefaultFieldObj   = null;                         // Default fields which are set when an application is created. In form of {\"fieldName\":{fieldValue:<JsonObj>, fieldOption:{isShared:<boolean>}}[, ...]}\r\noption.appIceServers = [                                    // Array of STUN and TURN servers. By default there is only publicly available STUN servers.\r\n    {urls: \"stun:stun.l.google.com:19302\"},\r\n    {urls: \"stun:stun.sipgate.net\"},\r\n    {urls: \"stun:217.10.68.152\"},\r\n    {urls: \"stun:stun.sipgate.net:10000\"},\r\n    {urls: \"stun:217.10.68.152:10000\"}\r\n];\r\n\r\n\r\n// Room Options\r\noption.roomDefaultEnable    = true;                         // Enables connections joining a default room if it is not initially specified. If false, than a connection initially may be in no room.\r\noption.roomDefaultName      = \"default\";                    // The default room a connection joins if it is not initially specified.\r\noption.roomAutoCreateEnable = true;                         // Enables the creation of rooms from the API. Occurs when client joins a nonexistent room.\r\noption.roomDefaultFieldObj  = null;                         // Default fields which are set when a room is created. In form of {\"fieldName\":{fieldValue:<JsonObj>, fieldOption:{isShared:<boolean>}}[, ...]}\r\n\r\n\r\n// Connection Options\r\noption.connectionDefaultFieldObj  = null;                   // Default fields which are set when a connection is created. In form of {\"fieldName\":{fieldValue:<JsonObj>, fieldOption:{isShared:<boolean>}}[, ...]}\r\n\r\n\r\n// SessionOptions\r\noption.sessionEnable        = true;                         // Enable sessions. If sessions are disabled, each socket connection from the same user will be the same. Relies on Express session handling also being enabled.\r\noption.sessionCookieEnable  = true;                         // If enabled, the server will attempt to send a easyrtcsid cookie which matches the Express session id.\r\n\r\n\r\n// API Hosting Options\r\noption.apiEnable            = true;                         // Enables hosting of the EasyRTC API files.\r\noption.apiPublicFolder      = \"/easyrtc\";                   // Api public folder without trailing slash. Note that the demos expect this to be '/easyrtc'\r\noption.apiLabsEnable        = true;                         // Enables hosting of the EasyRTC experimental API files located in the 'labs' sub folder\r\noption.apiOldLocationEnable = false;                        // [Depreciated] Listens for requests to core API files in old locations (in addition to the new standard locations)\r\n\r\n\r\n// Demo Options\r\noption.demosEnable          = true;\r\noption.demosPublicFolder    = \"/demos\";                     // Demos public folder without trailing slash. This sets the public URL where where demos are hosted, such as http://yourdomain/demos/\r\n\r\n\r\n// Log options - Only apply if internal 'log' event is used\r\noption.logLevel             = \"info\";                       // The minimum log level to show. (debug|info|warning|error|none)\r\noption.logDateEnable        = false;                        // Display timestamp in each entry\r\noption.logErrorStackEnable  = true;                         // print the stack trace in logged errors when available\r\noption.logWarningStackEnable= true;                         // print the stack trace in logged warnings when available\r\noption.logColorEnable       = true;                         // include console colors. Disable if forwarding logs to files or databases\r\noption.logObjectDepth       = 7;                            // When objects are included in the log, this is the max depth the log will display\r\noption.logMessagesEnable    = false;                        // Log the full contents of incoming and outgoing messages. Also requires the logLevel to be set at \"debug\". Introduces security and performance concerns.\r\n\r\n// Miscellaneous Server Options\r\noption.updateCheckEnable    = true;                         // Checks for updates\r\n\r\n\r\n// Regular expressions for validating names and other input\r\noption.apiVersionRegExp     = /^[a-z0-9_.+-]{1,32}$/i;      // API Version\r\noption.appNameRegExp        = /^[a-z0-9_.-]{1,32}$/i;       // Application name\r\noption.easyrtcidRegExp      = /^[a-z0-9_.-]{1,32}$/i;       // EasyRTC socket id (easyrtcid)\r\noption.easyrtcsidRegExp     = /^[a-z0-9_.-]{1,64}$/i;       // EasyRTC session id (easyrtcsid)\r\noption.groupNameRegExp      = /^[a-z0-9_.-]{1,32}$/i;       // Group name\r\noption.fieldNameRegExp      = /^[a-z0-9_. -]{1,32}$/i;      // Field names (for defining app and room custom fields)\r\noption.optionNameRegExp     = /^[a-z0-9_. -]{1,32}$/i;      // Option names (for defining server options)\r\noption.presenceShowRegExp   = /^(away|chat|dnd|xa)$/;       // Allowed presence \"show\" values (for setPresence command)\r\noption.presenceStatusRegExp = /^(.){0,255}$/;               // Allowed presence \"status\" value\r\noption.roomNameRegExp       = /^[a-z0-9_.-]{1,32}$/i;       // Room name\r\noption.usernameRegExp       = /^(.){1,64}$/i;               // Username\r\n\r\n\r\n// Allows the option object to be seen by the caller.\r\nmodule.exports = option;\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/lib/easyrtc_default_event_listeners.js":"/* global module, require, console, __dirname */\n/**\n * Event listeners used by EasyRTC. Many of these can be overridden using server options.\n * \n * @module      easyrtc_default_event_listeners\n * @author      Priologic Software, info@easyrtc.com\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\n * @license     BSD v2, see LICENSE file in module root folder.\n */\n\nvar util        = require(\"util\");                  // General utility functions core module\nvar _           = require(\"underscore\");            // General utility functions external module\nvar g           = require(\"./general_util\");        // General utility functions local module\n\nvar async       = require(\"async\");                 // Asynchronous calls external module\n\nvar pub         = require(\"./easyrtc_public_obj\");  // EasyRTC public object\n\n/**\n * Event listeners used by EasyRTC. Many of these can be overridden using server options. The interfaces should be used as a guide for creating new listeners.\n *\n * @class \n */\nvar eventListener = module.exports;\n\n/**\n * Default listener for event \"authenticate\". This event is called as part of the authentication process. To deny authentication, call the next() with an Error. By default everyone gets in!\n * \n * @param       {Object} socket         Socket.io socket object. References the individual connection socket. \n * @param       {String} easyrtcid      Unique identifier for an EasyRTC connection.\n * @param       {string} appName        Application name which uniquely identifies it on the server.\n * @param       {?String} username      Username to assign to the connection.\n * @param       {?*} credential         Credential for the connection. Can be any JSONable object.\n * @param       {Object} easyrtcAuthMessage Message object containing the complete authentication message sent by the connection.\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onAuthenticate = function(socket, easyrtcid, appName, username, credential, easyrtcAuthMessage, next) {\n    next(null);\n};\n\n\n/**\n * Default listener for event \"authenticated\". This event is called after a connection is authenticated and the connection object is generated and requested rooms are joined. Call next(err) to continue the connection procedure.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onAuthenticated = function(connectionObj, next) {\n    next(null);\n};\n\n\n/**\n * Default listener for event \"connection\". This event is called when socket.io accepts a new connection.\n *\n * @param       {Object} socket         Socket.io socket object. References the individual connection socket. \n * @param       {String} easyrtcid      Unique identifier for an EasyRTC connection.\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onConnection = function(socket, easyrtcid, next){\n    var connectionObj = {};             // prepare variables to house the connection object\n\n    // Initially upon a connection, we are only concerned with receiving an easyrtcAuth message\n    socket.on(\"easyrtcAuth\", function(msg, socketCallback) {\n\n        if (pub.getOption(\"logMessagesEnable\")) {\n            try {\n                pub.util.logDebug(\"[\"+easyrtcid+\"] Incoming socket.io message: [\"+JSON.stringify(msg)+\"]\");\n            }\n            catch(err) {\n                pub.util.logDebug(\"[\"+easyrtcid+\"] Incoming socket.io message\");\n            }\n        }\n\n        pub.events.emit(\"easyrtcAuth\", socket, easyrtcid, msg, socketCallback, function(err, newConnectionObj){\n            if(err){\n                pub.util.logError(\"[\"+easyrtcid+\"] Unhandled easyrtcCmd listener error.\", err);\n                return;\n            }\n\n            connectionObj = newConnectionObj;\n        });\n    });\n\n    pub.util.logDebug(\"Running func 'onConnection'\");\n    next(null);\n};\n\n\n/**\n * Default listener for event \"disconnect\". This event is called when socket.io detects a disconnection. Disconnections can occur due to either side purposefully dropping a connection, network disconnection, or time out. \n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onDisconnect = function(connectionObj, next){\n    pub.util.logDebug(\"Running func 'onDisconnect'\");\n\n    async.waterfall([\n        function(asyncCallback) {\n            // Get array of rooms\n            connectionObj.getRoomNames(asyncCallback);\n        },\n        function(roomNames, asyncCallback) {\n            // leave all rooms\n            async.each(roomNames,\n                function(currentRoomName, asyncEachCallback) {\n                    pub.events.emit(\"roomLeave\", connectionObj, currentRoomName, function(err){asyncEachCallback(null);});\n                },\n                function(err){\n                    asyncCallback(null);\n                }\n            );\n        },\n        function(asyncCallback) {\n            // log all connections as ended\n            pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Disconnected\");\n            connectionObj.removeConnection(asyncCallback);\n        }\n    ], function(err) {\n        next(null);\n    });\n\n    next(null);\n};\n\n\n/**\n * Default listener for event \"easyrtcAuth\". This event is fired when an incoming 'easyrtcAuth' message is received from a client.\n *\n * @param       {Object}    socket         Socket.io socket object. References the individual connection socket.\n * @param       {String}    easyrtcid      Unique identifier for an EasyRTC connection.\n * @param       {Object}    msg            Message object which contains the full message from a client; this can include the standard msgType and msgData fields.\n * @param       {Function}  socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {Function}  callback       Callback to call upon completion. Delivers parameter (err, connectionObj).\n */\neventListener.onEasyrtcAuth = function(socket, easyrtcid, msg, socketCallback, callback){\n    pub.util.logDebug(\"[\"+easyrtcid+\"] Running func 'onEasyrtcAuth'\");\n\n    var appObj, connectionObj, sessionObj;  // prepare variables to house the application, connection, and session objects\n\n    var tokenMsg = {\n        msgType: \"token\",\n        msgData:{}\n    };\n\n    var appName;\n    var newAppName = (_.isObject(msg.msgData) &&_.isString(msg.msgData.applicationName)) ? msg.msgData.applicationName : pub.getOption(\"appDefaultName\");\n\n    // Ensure socketCallback is present\n    if(!_.isFunction(socketCallback)) {\n        pub.util.logWarning(\"[\"+easyrtcid+\"] EasyRTC Auth message received with no callback. Disconnecting socket.\", msg);\n        try{socket.disconnect();}catch(e){}\n        return;\n    }\n\n    // Only accept authenticate message\n    if(!_.isObject(msg) || !_.isString(msg.msgType) || msg.msgType != \"authenticate\") {\n        pub.util.logWarning(\"[\"+easyrtcid+\"] EasyRTC Auth message received without msgType of 'authenticate'. Disconnecting socket.\", msg);\n        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"LOGIN_BAD_AUTH\"), appObj);\n        try{socket.disconnect();}catch(e){}\n        return;\n    }\n\n    // Check msg structure.\n    if(!_.isObject(msg.msgData)\n        || !_.isString(msg.msgData.apiVersion)\n        || (msg.msgData.roomJoin !== undefined && !_.isObject(msg.msgData.roomJoin))\n    ) {\n        pub.util.logWarning(\"[\"+easyrtcid+\"] EasyRTC Auth message received with improper msgData. Disconnecting socket.\", msg);\n        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"LOGIN_BAD_STRUCTURE\"), appObj);\n        try{socket.disconnect();}catch(e){}\n        return;\n    }\n\n    async.waterfall([\n        function(asyncCallback) {\n            // Check message structure\n            pub.util.isValidIncomingMessage(\"easyrtcAuth\", msg, null, asyncCallback);\n        },\n\n        function(isMsgValid, msgErrorCode, asyncCallback) {\n            // If message structure is invalid, send error, disconnect socket, and write to log\n            if (!isMsgValid) {\n                try{\n                    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(msgErrorCode), appObj);\n                    socket.disconnect();\n                }catch(e){}\n                pub.util.logWarning(\"[\"+easyrtcid+\"] EasyRTC Auth message received with invalid message format [\" + msgErrorCode + \"]. Disconnecting socket.\", msg);\n                callback(new pub.util.ConnectionError(\"[\"+easyrtcid+\"] EasyRTC Auth message received with invalid message format [\" + msgErrorCode + \"]. Disconnecting socket.\"));\n                return;\n            }\n\n            // Remove any old listeners\n            socket.removeAllListeners(\"easyrtcCmd\");\n            socket.removeAllListeners(\"easyrtcMsg\");\n            socket.removeAllListeners(\"disconnect\"); // TODO: Come up with alternative to removing all disconnect listeners\n\n            pub.util.logDebug(\"Emitting Authenticate\");\n\n            var username    = (msg.msgData.username     ? msg.msgData.username  : null);\n            var credential  = (msg.msgData.credential   ? msg.msgData.credential: null);\n\n            // Authenticate is responsible for authenticating the connection\n            pub.events.emit(\"authenticate\", socket, easyrtcid, newAppName, username, credential, msg, function(err){\n                if (err) {\n                    try{\n                        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"LOGIN_BAD_AUTH\"), appObj);\n                        socket.disconnect();\n                        pub.util.logInfo(\"[\"+newAppName+\"][\"+easyrtcid+\"] Authentication denied. Socket disconnected.\", err);\n                    }catch(e){}\n                } else {\n                    asyncCallback(null);\n                }\n            });\n        },\n\n        function(asyncCallback) {\n            // Check to see if the requested app currently exists.\n            pub.isApp(newAppName, asyncCallback);\n\n        },\n\n        function(isApp, asyncCallback) {\n            // If requested app exists, then call it, otherwise create it.\n            if (isApp) {\n                pub.app(newAppName, asyncCallback);\n            } else {\n                // if appAutoCreateEnable is true, then a new app will be created using the default options\n                if(pub.getOption(\"appAutoCreateEnable\")) {\n                    pub.createApp(newAppName, null, asyncCallback);\n                } else {\n                    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"LOGIN_APP_AUTH_FAIL\"), appObj);\n                    socket.disconnect();\n                    pub.util.logWarning(\"[\" + easyrtcid + \"] Authentication failed. Requested application not found [\" + newAppName + \"]. Socket disconnected.\");\n                }\n            }\n        },\n\n        function(newAppObj, asyncCallback) {\n            // Now that we have an app, we can use it\n            appObj = newAppObj;\n            appName = appObj.getAppName();\n\n            appObj.isConnected(easyrtcid, asyncCallback);\n        },\n\n        function(isConnected, asyncCallback) {\n            // If socket has previously connected, disconnect them.\n            if (isConnected){\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"LOGIN_APP_AUTH_FAIL\"), appObj);\n                socket.disconnect();\n                pub.util.logWarning(\"[\" + easyrtcid + \"] Authentication failed. Already connected. Socket disconnected.\");\n                return;\n            }\n\n            // if roomJoin is present in message, check the room names\n            if (msg.msgData.roomJoin) {\n                for (var currentRoomName in msg.msgData.roomJoin) {\n                    if (!_.isString(currentRoomName) || !appObj.getOption(\"roomNameRegExp\").test(currentRoomName)) {\n                        pub.events.emit(\"emitReturnError\", socketCallback, \"MSG_REJECT_TARGET_ROOM\", pub.util.nextToNowhere);\n                        pub.util.logInfo(\"[\" + easyrtcid + \"] Authentication failed. Requested room name not allowed [\" + currentRoomName + \"].\");\n                        return;\n                    }\n                }\n            }\n            asyncCallback(null);\n        },\n\n        function(asyncCallback) {\n            // Create the connection object\n            appObj.createConnection(easyrtcid, socket.id, asyncCallback);\n        },\n\n\n        function(newConnectionObj, asyncCallback) {\n            connectionObj = newConnectionObj;\n\n            // Check if there is an easyrtcsid\n            if (_.isString(msg.msgData.easyrtcsid)) {\n                appObj.isSession(msg.msgData.easyrtcsid, function(err, isSession){\n                    if (err) {\n                        asyncCallback(err);\n                        return;\n                    }\n                    if (isSession) {\n                        appObj.session(msg.msgData.easyrtcsid, asyncCallback);\n                    } else {\n                        appObj.createSession(msg.msgData.easyrtcsid, asyncCallback);\n                    }\n                });\n            }\n            else {\n                asyncCallback(null, null);\n            }\n        },\n\n        function(newSessionObj, asyncCallback) {\n            if (!newSessionObj) {\n                asyncCallback(null);\n                return;\n            }\n            sessionObj = newSessionObj;\n            connectionObj.joinSession(sessionObj.getEasyrtcsid(), asyncCallback);\n        },\n\n        function(asyncCallback) {\n            // Set connection as being authenticated (we pre-authenticated)\n            connectionObj.setAuthenticated(true, asyncCallback);\n        },\n\n        function(asyncCallback) {\n            // Set username (if defined)\n            if (msg.msgData.username !== undefined) {\n                connectionObj.setUsername(msg.msgData.username, asyncCallback);\n            } else {\n                asyncCallback(null);\n            }\n        },\n\n        function(asyncCallback) {\n            // Set credential (if defined)\n            if (msg.msgData.username !== undefined) {\n                connectionObj.setCredential(msg.msgData.credential, asyncCallback);\n            } else {\n                asyncCallback(null);\n            }\n        },\n\n        function(asyncCallback) {\n            // Set presence (if defined)\n            if (_.isObject(msg.msgData.setPresence)) {\n                connectionObj.setPresence(msg.msgData.setPresence,asyncCallback);\n            } else {\n                asyncCallback(null);\n            }\n        },\n\n        function(asyncCallback) {\n            // Join a room. If no rooms are defined than join the default room\n            if (_.isObject(msg.msgData.roomJoin) && !_.isEmpty(msg.msgData.roomJoin)) {\n                async.each(Object.keys(msg.msgData.roomJoin), function(currentRoomName, roomCallback) {\n\n                    appObj.isRoom(currentRoomName, function(err, isRoom){\n                        if(err) {\n                            roomCallback(err);\n                            return;\n                        }\n\n                        // Set roomParameter map. This may be used by custom listeners.\n                        var currentRoomParameter;\n                        if (msg.msgData.roomJoin[currentRoomName] && _.isObject(msg.msgData.roomJoin[currentRoomName].roomParameter)){\n                            currentRoomParameter = msg.msgData.roomJoin[currentRoomName].roomParameter;\n                        }\n\n                        if (isRoom) {\n                            // Join existing room\n                            pub.events.emit(\"roomJoin\", connectionObj, currentRoomName, currentRoomParameter, roomCallback);\n                        }\n                        else if (appObj.getOption(\"roomAutoCreateEnable\")) {\n                            // Room doesn't yet exist, however we are allowed to create it.\n                            pub.events.emit(\"roomCreate\", appObj, connectionObj, currentRoomName, null, function(err, roomObj){\n                                if (err) {\n                                    roomCallback(err);\n                                    return;\n                                }\n                                pub.events.emit(\"roomJoin\", connectionObj, currentRoomName, currentRoomParameter, roomCallback);\n                            });\n                        }\n                        else {\n                            // Can't join room and we are not allowed to create it. Error Out.\n                            try{\n                                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"LOGIN_BAD_ROOM\"), appObj);\n                                socket.disconnect();\n                            }catch(e){}\n                            pub.util.logInfo(\"[\" + easyrtcid + \"] Authentication failed. Requested room name does not exist [\" + currentRoomName + \"].\");\n                        }\n                    });\n                }, function(err, newRoomObj) {\n                    asyncCallback(err);\n                });\n            }\n\n            // If no room is initially provided, have them join the default room (if enabled)\n            else if (connectionObj.getApp().getOption(\"roomDefaultEnable\")) {\n                pub.events.emit(\"roomJoin\", connectionObj, connectionObj.getApp().getOption(\"roomDefaultName\"), null, function(err, roomObj){\n                    asyncCallback(err);\n                });\n            }\n\n            // No room provided, and can't join default room\n            else {\n                asyncCallback(null);\n            }\n        },\n\n        function(asyncCallback) {\n            // Add new listeners\n            socket.on(\"easyrtcCmd\", function(msg, socketCallback){\n                if (pub.getOption(\"logMessagesEnable\")) {\n                    try {\n                        pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Incoming socket.io message: [\"+JSON.stringify(msg)+\"]\");\n                    }\n                    catch(err) {\n                        pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Incoming socket.io message\");\n                    }\n                }\n\n                pub.events.emit(\"easyrtcCmd\", connectionObj, msg, socketCallback, function(err){\n                    if(err){pub.util.logError(\"[\"+appName+\"][\"+easyrtcid+\"] Unhandled easyrtcCmd listener error.\", err);}\n                });\n\n            });\n            socket.on(\"easyrtcMsg\", function(msg, socketCallback){\n                if (pub.getOption(\"logMessagesEnable\")) {\n                    try {\n                        pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Incoming socket.io message: [\"+JSON.stringify(msg)+\"]\");\n                    }\n                    catch(err) {\n                        pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Incoming socket.io message\");\n                    }\n                }\n\n                pub.events.emit(\"easyrtcMsg\", connectionObj, msg, socketCallback, function(err){\n                    if(err){pub.util.logError(\"[\"+appName+\"][\"+easyrtcid+\"] Unhandled easyrtcMsg listener error.\", err);}\n                });\n            });\n            socket.on(\"disconnect\", function(){\n                pub.events.emit(\"disconnect\", connectionObj, function(err){\n                    if(err){pub.util.logError(\"[\"+appName+\"][\"+easyrtcid+\"] Unhandled disconnect listener error.\", err);}\n                });\n            });\n            asyncCallback(null);\n        },\n\n        function(asyncCallback){\n            pub.events.emit(\"authenticated\", connectionObj, asyncCallback);\n        },\n\n        function(asyncCallback){\n            pub.events.emit(\"emitReturnToken\", connectionObj, socketCallback, asyncCallback);\n        },\n\n        function(asyncCallback){\n\n            // TODO: Reinstate this emit function by setting flag for roomJoin event so it doesn't automatically emit delta's\n            // Emit clientList delta to other clients in room\n            // connectionObj.emitRoomDataDelta(false, function(err, roomDataObj){asyncCallback(err);});\n            asyncCallback(null);\n        }\n\n    ],\n    // This function is called upon completion of the async waterfall, or upon an error being thrown.\n    function (err) {\n        if (err){\n            try{\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"LOGIN_GEN_FAIL\"), appObj);\n                socket.disconnect();\n                pub.util.logError(\"[\"+easyrtcid+\"] General authentication error. Socket disconnected.\", err);\n            }catch(e){}\n        } else {\n            callback(null, connectionObj);\n        }\n    });\n};\n\n\n/**\n * Default listener for event \"easyrtcCmd\". This event is fired when an incoming 'easyrtcCmd' message is received from a client.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Object} msg            Message object which contains the full message from a client; this can include the standard msgType and msgData fields.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onEasyrtcCmd = function(connectionObj, msg, socketCallback, next){\n    var appName = connectionObj.getAppName();\n    var appObj = connectionObj.getApp();\n    var easyrtcid = connectionObj.getEasyrtcid();\n\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC command received with msgType [\" + msg.msgType + \"]\");\n    if (!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    if(!_.isFunction(socketCallback)) {\n        pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC command message received with no callback. Ignoring.\", msg);\n        return;\n    }\n\n    async.waterfall([\n        function(asyncCallback) {\n            // Check message structure\n            pub.util.isValidIncomingMessage(\"easyrtcCmd\", msg, connectionObj.getApp(), asyncCallback);\n        },\n\n        function(isMsgValid, msgErrorCode, asyncCallback) {\n            // If message structure is invalid, send error, and write to log\n            if (!isMsgValid) {\n                try{\n                    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(msgErrorCode), appObj);\n                }catch(e){}\n                pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC Auth message received with invalid message format [\" + msgErrorCode + \"]. Disconnecting socket.\", msg);\n                return;\n            }\n            asyncCallback(null);\n        },\n        function(asyncCallback) {\n            // The msgType controls how each message is handled\n            switch(msg.msgType) {\n                case \"setUserCfg\":\n                    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] WebRTC setUserCfg command received. This feature is not yet complete.\");\n                    pub.util.sendSocketCallbackAck(easyrtcid, socketCallback, appObj);\n                    next(null);\n                    break;\n\n                case \"setPresence\":\n                    pub.events.emit(\"msgTypeSetPresence\", connectionObj, msg.msgData.setPresence, socketCallback, next);\n                    break;\n\n                case \"setRoomApiField\":\n                    pub.events.emit(\"msgTypeSetRoomApiField\", connectionObj, msg.msgData.setRoomApiField, socketCallback, next);\n                    break;\n\n                case \"roomJoin\":\n                    pub.events.emit(\"msgTypeRoomJoin\", connectionObj, msg.msgData.roomJoin, socketCallback, next);\n                    break;\n\n                case \"roomLeave\":\n                    pub.events.emit(\"msgTypeRoomLeave\", connectionObj, msg.msgData.roomLeave, socketCallback, next);\n                    break;\n\n                case \"getIceConfig\":\n                    pub.events.emit(\"msgTypeGetIceConfig\", connectionObj, socketCallback, next);\n                    break;\n\n                case \"getRoomList\":\n                    pub.events.emit(\"msgTypeGetRoomList\", connectionObj, socketCallback, next);\n                    break;\n\n                case \"candidate\":\n                case \"offer\":\n                case \"answer\":\n                case \"reject\":\n                case \"hangup\":\n                    // Relay message to targetEasyrtcid\n                    var outgoingMsg = {senderEasyrtcid: connectionObj.getEasyrtcid(), msgData:msg.msgData};\n\n                    connectionObj.getApp().connection(msg.targetEasyrtcid, function(err,targetConnectionObj){\n                        if (err){\n                            pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_TARGET_EASYRTCID\"), appObj);\n                            pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Could not send WebRTC signal to client [\" + msg.targetEasyrtcid + \"]. They may no longer be online.\");\n                            return;\n                        }\n                        pub.events.emit(\"emitEasyrtcCmd\", targetConnectionObj, msg.msgType, outgoingMsg, null, next);\n                        pub.util.sendSocketCallbackAck(easyrtcid, socketCallback, appObj);\n                        next(null);\n                    });\n                    break;\n\n                default:\n                    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_BAD_TYPE\"), appObj);\n                    pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Received easyrtcCmd message with unhandled msgType.\", msg);\n                    next(null);\n            }\n        }\n    ],\n    function(err) {\n        if (err) {\n            try {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_GEN_FAIL\"), appObj);\n                pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Received easyrtcCmd message with general error.\", msg);\n            } catch(e){}\n        }\n    });\n};\n\n\n/**\n * Default listener for event \"easyrtcMsg\". This event is fired when an incoming 'easyrtcMsg' message is received from a client.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Object} msg            Message object which contains the full message from a client; this can include the standard msgType and msgData fields.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onEasyrtcMsg = function(connectionObj, msg, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message received of type [\" + msg.msgType + \"]\");\n\n    if (!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    if(!_.isFunction(socketCallback)) {\n        pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message received with no callback. Ignoring message.\", msg);\n        return;\n    }\n\n    async.waterfall([\n        function(asyncCallback) {\n            // Check message structure\n            pub.util.isValidIncomingMessage(\"easyrtcMsg\", msg, connectionObj.getApp(), asyncCallback);\n        },\n\n        function(isMsgValid, msgErrorCode, asyncCallback) {\n            // If message structure is invalid, send error, and write to log\n            if (!isMsgValid) {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(msgErrorCode), appObj);\n                pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message received with invalid message format [\" + msgErrorCode + \"].\", msg);\n                return;\n            }\n            asyncCallback(null);\n        },\n        function(asyncCallback) {\n\n            // test targetEasyrtcid (if defined). Will prevent client from sending to themselves\n            if (msg.targetEasyrtcid  !== undefined && msg.targetEasyrtcid == connectionObj.getEasyrtcid()) {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_TARGET_EASYRTCID\"), appObj);\n                pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message received with improper targetEasyrtcid\", msg);\n                return;\n            }\n\n            // Determine if sending message to single client, an entire room, or an entire group\n            if (msg.targetEasyrtcid !== undefined) {\n                // Relay a message to a single client\n                var outgoingMsg = {\n                    senderEasyrtcid: connectionObj.getEasyrtcid(),\n                    targetEasyrtcid: msg.targetEasyrtcid,\n                    msgType: msg.msgType,\n                    msgData: msg.msgData\n                };\n                var targetConnectionObj = {};\n\n                async.waterfall([\n                    function(asyncCallback) {\n                        // getting connection object for targetEasyrtcid\n                        connectionObj.getApp().connection(msg.targetEasyrtcid, asyncCallback);\n                    },\n                    function(newTargetConnectionObj, asyncCallback) {\n                        targetConnectionObj = newTargetConnectionObj;\n\n                        // TODO: Add option to restrict users not in same room from sending messages to users in room\n\n                        // Handle targetRoom (if present)\n                        if (msg.targetRoom) {\n                            targetConnectionObj.isInRoom(msg.targetRoom, function(err, isAllowed){\n                                if (err || !isAllowed) {\n                                    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_TARGET_ROOM\"), appObj);\n                                    pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message received with improper target room\", msg);\n                                    return;\n                                }\n                                outgoingMsg.targetRoom = msg.targetRoom;\n                                asyncCallback(null);\n                            });\n                        }\n                        else {\n                            asyncCallback(null);\n                        }\n                    },\n\n                    function(asyncCallback) {\n                        // Handle targetGroup (if present)\n                        if (msg.targetGroup) {\n                            targetConnectionObj.isInGroup(msg.targetGroup, function(err, isAllowed){\n                                if (err || !isAllowed) {\n                                    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_TARGET_GROUP\"), appObj);\n                                    pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message received with improper target group\", msg);\n                                    return;\n                                }\n                                outgoingMsg.targetGroup = msg.targetGroup;\n                                asyncCallback(null);\n                            });\n                        }\n                        else {\n                            asyncCallback(null);\n                        }\n                    },\n\n                    function(asyncCallback) {\n                        pub.events.emit(\"emitEasyrtcMsg\", targetConnectionObj, msg.msgType, outgoingMsg, null, asyncCallback);\n                    }\n\n                ],\n                function (err) {\n                    if (err) {\n                        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_GEN_FAIL\"), appObj);\n                        pub.util.logError(\"[\"+connectionObj.getEasyrtcid()+\"] General message error. Message ignored.\", err);\n                    } else {\n                        pub.util.sendSocketCallbackAck(easyrtcid, socketCallback, appObj);                    }\n                });\n            }\n\n            else if (msg.targetRoom) {\n                // Relay a message to one or more clients in a room\n\n                var outgoingMsg = {\n                    senderEasyrtcid: connectionObj.getEasyrtcid(),\n                    targetRoom: msg.targetRoom,\n                    msgType: msg.msgType,\n                    msgData: msg.msgData\n                };\n\n                var targetRoomObj = null;\n\n                async.waterfall([\n                    function(asyncCallback){\n                        // get room object\n                        connectionObj.getApp().room(msg.targetRoom, asyncCallback);\n                    },\n\n                    function(newTargetRoomObj, asyncCallback) {\n                        targetRoomObj = newTargetRoomObj;\n\n                        // get list of connections in the room\n                        targetRoomObj.getConnections(asyncCallback);\n                    },\n\n                    function(connectedEasyrtcidArray, asyncCallback) {\n                        for (var i = 0; i < connectedEasyrtcidArray.length; i++) {\n                            // Stop client from sending message to themselves\n                            if (connectedEasyrtcidArray[i] == connectionObj.getEasyrtcid()) {\n                                continue;\n                            }\n\n                            connectionObj.getApp().connection(connectedEasyrtcidArray[i], function(err, targetConnectionObj){\n                                if (err) {\n                                    return;\n                                }\n\n                                // Do we limit by group? If not the message goes out to all in room\n                                if(msg.targetGroup) {\n                                    targetConnectionObj.isInGroup(msg.targetGroup, function(err, isAllowed){\n                                        if (isAllowed) {\n                                            pub.events.emit(\"emitEasyrtcMsg\", targetConnectionObj, msg.msgType, outgoingMsg, null, pub.util.nextToNowhere);\n                                        }\n                                    });\n                                }\n                                else {\n                                    pub.events.emit(\"emitEasyrtcMsg\", targetConnectionObj, msg.msgType, outgoingMsg, null, pub.util.nextToNowhere);\n                                }\n                            });\n                        }\n                        asyncCallback(null);\n                    }\n                ],\n                function(err) {\n                    if (err) {\n                        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_TARGET_ROOM\"), appObj);\n                    }\n                    else {\n                        pub.util.sendSocketCallbackAck(easyrtcid, socketCallback, appObj);                    }\n                });\n\n            }\n\n            else if (msg.targetGroup) {\n                // Relay a message to one or more clients in a group\n                var targetGroupObj = null;\n\n                var outgoingMsg = {\n                    senderEasyrtcid: connectionObj.getEasyrtcid(),\n                    targetGroup: msg.targetGroup,\n                    msgType: msg.msgType,\n                    msgData: msg.msgData\n                };\n\n                async.waterfall([\n                    function(asyncCallback){\n                        // get group object\n                        connectionObj.getApp().group(msg.targetGroup, asyncCallback);\n                    },\n\n                    function(newTargetGroupObj, asyncCallback) {\n                        targetGroupObj = newTargetGroupObj;\n\n                        // get list of connections in the group\n                        targetGroupObj.getConnections(asyncCallback);\n                    },\n\n                    function(connectedEasyrtcidArray, asyncCallback) {\n                        for (var i = 0; i < connectedEasyrtcidArray.length; i++) {\n                            // Stop client from sending message to themselves\n                            if (connectedEasyrtcidArray[i] == connectionObj.getEasyrtcid()) {\n                                continue;\n                            }\n\n                            connectionObj.getApp().connection(connectedEasyrtcidArray[i], function(err, targetConnectionObj){\n                                if (err) {\n                                    return;\n                                }\n                                pub.events.emit(\"emitEasyrtcMsg\", targetConnectionObj, msg.msgType, outgoingMsg, null, pub.util.nextToNowhere);\n                            });\n                        }\n                        asyncCallback(null);\n                    }\n                ],\n                function(err) {\n                    if (err) {\n                        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_TARGET_GROUP\"), appObj);\n                    }\n                    else {\n                        pub.util.sendSocketCallbackAck(easyrtcid, socketCallback, appObj);\n                    }\n                });\n\n            }\n            else {\n                pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message received without targetEasyrtcid or targetRoom\", msg);\n                next(null);\n            }\n        }\n    ],\n    function(err) {\n        if (err) {\n            pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_GEN_FAIL\"), appObj);\n            pub.util.logError(\"[\"+connectionObj.getEasyrtcid()+\"] General message error. Message ignored.\", err);\n        }\n    });\n};\n\n\n/**\n * Default listener for event \"emitEasyrtcCmd\". This event is fired when the server should emit an EasyRTC command to a client.\n * \n * The easyrtcid and serverTime fields will be added to the msg automatically.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {String} msgType        Message type of the message.\n * @param       {Object} msg            Message object which contains the full message to a client; this can include the standard msgData field.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onEmitEasyrtcCmd = function(connectionObj, msgType, msg, socketCallback, next){\n    if (!_.isObject(connectionObj)){\n        next(new pub.util.ConnectionError(\"Connection object invalid. Client may have disconnected.\"));\n        return;\n    }\n\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appName = connectionObj.getAppName();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onEmitEasyrtcCmd' with msgType [\"+msgType+\"]\");\n    if (!msg) {\n        msg = {};\n    }\n    if(!_.isFunction(socketCallback)) {\n        socketCallback = function(returnMsg) {\n            if (_.isObject(returnMsg) && _.isString(returnMsg.msgType) && returnMsg.msgType == \"ack\"){\n                // pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message: unhandled Ack return message.\");\n            }\n            else {\n                pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message: unhandled return message.\", returnMsg);\n            }\n        };\n    }\n\n    msg.easyrtcid   = connectionObj.getEasyrtcid();\n    msg.msgType     = msgType;\n    msg.serverTime  = Date.now();\n\n    connectionObj.socket.emit( \"easyrtcCmd\", msg, socketCallback);\n\n    if (pub.getOption(\"logMessagesEnable\")) {\n        try {\n            pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Sending socket.io message: [\"+JSON.stringify(msg)+\"]\");\n        }\n        catch(err) {\n            pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Sending socket.io message\");\n        }\n    }\n\n    next(null);\n};\n\n\n/**\n * Default listener for event \"emitEasyrtcMsg\". This event is fired when the server should emit an EasyRTC message to a client.\n * \n * The easyrtcid and serverTime fields will be added to the msg automatically.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {String} msgType        Message type of the message.\n * @param       {Object} msg            Message object which contains the full message to a client; this can include the standard msgData field.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onEmitEasyrtcMsg = function(connectionObj, msgType, msg, socketCallback, next){\n    if (!_.isObject(connectionObj)){\n        next(new pub.util.ConnectionError(\"Connection object invalid. Client may have disconnected.\"));\n        return;\n    }\n\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appName = connectionObj.getAppName();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onEmitEasyrtcMsg' with msgType [\"+msgType+\"]\");\n\n\n    if (!msg) {\n        msg = {};\n    }\n    if(!_.isFunction(socketCallback)) {\n        socketCallback = function(returnMsg) {\n            if (_.isObject(returnMsg) && _.isString(returnMsg.msgType) && returnMsg.msgType == \"ack\"){\n                // pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message: unhandled Ack return message.\");\n            }\n            else {\n                pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC message: unhandled return message.\", returnMsg);\n            }\n        };\n    }\n    msg.easyrtcid   = connectionObj.getEasyrtcid();\n    msg.msgType     = msgType;\n    msg.serverTime  = Date.now();\n\n    connectionObj.socket.emit( \"easyrtcMsg\", msg, socketCallback);\n\n    if (pub.getOption(\"logMessagesEnable\")) {\n        try {\n            pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Sending socket.io message: [\"+JSON.stringify(msg)+\"]\");\n        }\n        catch(err) {\n            pub.util.logDebug(\"[\"+appName+\"][\"+easyrtcid+\"] Sending socket.io message\");\n        }\n    }\n\n    next(null);\n};\n\n\n/**\n * Default listener for event \"emitError\". This event is fired when the server should emit an EasyRTC error to a client.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {String} errorCode      EasyRTC error code associated with an error.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onEmitError = function(connectionObj, errorCode, socketCallback, next){\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onEmitError'\");\n    if(!_.isFunction(socketCallback)) {\n        socketCallback = function(returnMsg) {\n            pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC info: unhandled ACK return message.\", returnMsg);\n        };\n    }\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    pub.events.emit(\"emitEasyrtcCmd\", connectionObj, \"error\", pub.util.getErrorMsg(errorCode), socketCallback, next);\n};\n\n\n/**\n * Default listener for event \"emitReturnAck\". This event is fired when the server should return an Ack to a client via an acknowledgment message.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onEmitReturnAck = function(connectionObj, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onEmitReturnAck'\");\n    if(!_.isFunction(socketCallback)) {\n        pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC: unable to return ack to socket.\");\n        return;\n    }\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    var msg = {\n        msgType: \"ack\",\n        msgData:{}\n    };\n\n    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, msg, appObj);\n\n    next(null);\n};\n\n\n/**\n * Default listener for event \"emitReturnError\". This event is fired when the server should return an Error to a client via an acknowledgment message.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {String} errorCode      EasyRTC error code associated with an error.\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onEmitReturnError = function(connectionObj, socketCallback, errorCode, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onEmitReturnError'\");\n    if(!_.isFunction(socketCallback)) {\n        pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC: unable to return error to socket. Error code was [\" + errorCode + \"]\");\n\n        next(new pub.util.ConnectionError(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Unable to return error to socket. Error code was [\" + errorCode + \"]\"));\n        return;\n    }\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    var msg = pub.util.getErrorMsg(errorCode);\n\n    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, msg, appObj);\n\n    next(null);\n};\n\n\n/**\n * Default listener for event \"emitReturnToken\". This event is fired when the server should return a token to a client via an acknowledgment message.\n * \n * This is done after a client has been authenticated and the connection has been established.\n *\n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onEmitReturnToken = function(connectionObj, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onSendToken'\");\n\n    var tokenMsg = {\n        msgType: \"token\",\n        msgData:{}\n    };\n\n    // Ensure socketCallback is present\n    if(!_.isFunction(socketCallback)) {\n        pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC onSendToken called with no socketCallback.\");\n        try{connectionObj.socket.disconnect();}catch(e){}\n        return;\n    }\n\n    async.waterfall([\n        function(asyncCallback){\n            // Get rooms user is in along with list\n            connectionObj.generateRoomClientList(\"join\", null, asyncCallback);\n        },\n        function(roomData, asyncCallback) {\n            // Set roomData\n            tokenMsg.msgData.roomData = roomData;\n\n            // Retrieve ice config\n            connectionObj.events.emit(\"getIceConfig\", connectionObj, asyncCallback);\n        },\n\n        function(iceServers, asyncCallback) {\n            tokenMsg.msgData.application        = {applicationName:connectionObj.getAppName()};\n            tokenMsg.msgData.easyrtcid          = connectionObj.getEasyrtcid();\n            tokenMsg.msgData.iceConfig          = {iceServers: iceServers};\n            tokenMsg.msgData.serverTime         = Date.now();\n\n            easyrtcid = tokenMsg.msgData.easyrtcid;\n\n            // Get Application fields\n            appObj.getFields(true, asyncCallback);\n        },\n\n        function(fieldObj, asyncCallback) {\n            if (!_.isEmpty(fieldObj)){\n                tokenMsg.msgData.application.field = fieldObj;\n            }\n\n            // Get Connection fields\n            connectionObj.getFields(true, asyncCallback);\n        },\n\n        function(fieldObj, asyncCallback) {\n            if (!_.isEmpty(fieldObj)){\n                tokenMsg.msgData.field = fieldObj;\n            }\n\n            // get session object\n            connectionObj.getSessionObj(asyncCallback);\n        },\n\n        function(sessionObj, asyncCallback) {\n            if (sessionObj) {\n                tokenMsg.msgData.sessionData = {\"easyrtcsid\":sessionObj.getEasyrtcsid()};\n\n                // Get session fields\n                sessionObj.getFields(true, asyncCallback);\n            }\n            else {\n                asyncCallback(null, null);\n            }\n        },\n\n        function(fieldObj, asyncCallback) {\n            // Set session field (if present)\n            if (fieldObj && !_.isEmpty(fieldObj)){\n                tokenMsg.msgData.sessionData.field = fieldObj;\n            }\n\n            // Emit token back to socket (SUCCESS!)\n            pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, tokenMsg, appObj);\n\n            asyncCallback(null);\n        }\n\n    ],\n    // This function is called upon completion of the async waterfall, or upon an error being thrown.\n    function (err) {\n        if (err){\n            next(err);\n        } else {\n            next(null);\n        }\n    });\n};\n\n\n/**\n * Default listener for event \"log\". This event is fired when ever a loggable item is observed.\n * \n * @param       {string} level          Log severity level. Can be (\"debug\"|\"info\"|\"warning\"|\"error\")\n * @param       {string} logText        Text for log.\n * @param       {?*} [logFields]        Simple JSON object which contains extra fields to be logged.\n * @param       {?nextCallback} next    A success callback of form next(err).\n */\neventListener.onLog = function(level, logText, logFields, next) {\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    var consoleText = \"\";\n\n    var currentDate = new Date();\n    if (pub.getOption(\"logColorEnable\")) {\n        var colors = require(\"colors\");\n        if(pub.getOption(\"logDateEnable\")) {\n            consoleText += currentDate.toISOString().grey + \" - \";\n        }\n        switch (level) {\n            case \"debug\":\n                consoleText += \"debug  \".bold.blue;\n                break;\n            case \"info\":\n                consoleText += \"info   \".bold.green;\n                break;\n            case \"warning\":\n                consoleText += \"warning\".bold.yellow;\n                break;\n            case \"error\":\n                consoleText += \"error  \".bold.red;\n                break;\n            default:\n                consoleText += level.bold;\n        }\n        consoleText += \" - \" + \"EasyRTC: \".bold + logText;\n    }\n    else {\n        if(pub.getOption(\"logDateEnable\")) {\n            consoleText += currentDate.toISOString() + \" - \";\n        }\n        consoleText += level;\n        consoleText += \" - \" + \"EasyRTC: \" + logText;\n    }\n\n    if (logFields != undefined && logFields != null) {\n        if (pub.getOption(\"logErrorStackEnable\") && pub.util.isError(logFields)) {\n            console.log(consoleText, ((pub.getOption(\"logColorEnable\"))? \"\\nStack Trace:\\n------------\\n\".bold + logFields.stack.magenta + \"\\n------------\".bold : \"\\nStack Trace:\\n------------\\n\" + logFields.stack + \"\\n------------\"));\n        }\n        else if (pub.getOption(\"logWarningStackEnable\") && pub.util.isWarning(logFields)) {\n            console.log(consoleText, ((pub.getOption(\"logColorEnable\"))? \"\\nStack Trace:\\n------------\\n\".bold + logFields.stack.cyan + \"\\n------------\".bold : \"\\nStack Trace:\\n------------\\n\" + logFields.stack + \"\\n------------\"));\n        }\n        else {\n            console.log(consoleText, util.inspect(logFields, {colors:pub.getOption(\"logColorEnable\"), showHidden:false, depth:pub.getOption(\"logObjectDepth\")}));\n        }\n    } else {\n        console.log(consoleText);\n    }\n    next(null);\n};\n\n\n/**\n * Default listener for event \"msgTypeRoomJoin\". This event is fired when an easyrtcCmd message with msgType of \"roomJoin\" is received from a client. \n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Object} rooms          A room object containing a map of room names and room parameters.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onMsgTypeRoomJoin = function(connectionObj, rooms, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onMsgTypeRoomJoin'\");\n    if(!_.isFunction(socketCallback)) {\n        pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC info: unhandled socket message callback.\");\n        return;\n    }\n\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    if(!_.isObject(rooms) || _.isEmpty(rooms)) {\n        pub.events.emit(\"emitReturnError\", socketCallback, \"MSG_REJECT_BAD_STRUCTURE\", pub.util.nextToNowhere);\n        return;\n    }\n\n    for (var currentRoomName in rooms) {\n        if (!_.isString(currentRoomName) || !connectionObj.getApp().getOption(\"roomNameRegExp\").test(currentRoomName)) {\n            pub.events.emit(\"emitReturnError\", socketCallback, \"MSG_REJECT_TARGET_ROOM\", pub.util.nextToNowhere);\n            return;\n        }\n    }\n\n    async.each(Object.keys(rooms), function(currentRoomName, roomCallback) {\n        appObj.isRoom(currentRoomName, function(err, isRoom){\n\n            // Set roomParameter map. This may be used by custom listeners.\n            var currentRoomParameter;\n            if (rooms[currentRoomName] && _.isObject(rooms[currentRoomName].roomParameter)){\n                currentRoomParameter = rooms[currentRoomName].roomParameter;\n            }\n\n            if (isRoom) {\n                pub.events.emit(\"roomJoin\", connectionObj, currentRoomName, currentRoomParameter, roomCallback);\n            }\n            else if (appObj.getOption(\"roomAutoCreateEnable\")) {\n                pub.events.emit(\"roomCreate\", appObj, connectionObj, currentRoomName, null, function(err, roomObj){\n                    if (err) {\n                        roomCallback(err);\n                        return;\n                    }\n                    pub.events.emit(\"roomJoin\", connectionObj, currentRoomName, currentRoomParameter, roomCallback);\n                });\n            }\n            else {\n                pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"][\"+currentRoomName+\"] Unable to join non-existent room.\");\n                roomCallback(new pub.util.ConnectionError(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"][\"+currentRoomName+\"] Unable to join room.\"));\n            }\n        });\n    }, function(err, newRoomObj) {\n        if (err) {\n            pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_BAD_ROOM\"), appObj);\n            next(null); // Error has been handled\n            return;\n        }\n\n        connectionObj.generateRoomClientList(\"join\", rooms, function(err, roomData){\n            if (err) {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_BAD_ROOM\"), appObj);\n                next(null); // Error has been handled\n            }\n            else {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, {\"msgType\":\"roomData\", \"msgData\":{\"roomData\":roomData}}, appObj);\n            }\n        });\n    });\n};\n\n\n/**\n * Default listener for event \"msgTypeRoomLeave\". This event is fired when an easyrtcCmd message with msgType of \"roomLeave\" is received from a client. \n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Object} rooms          A room object containing a map of room names.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onMsgTypeRoomLeave = function(connectionObj, rooms, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onMsgTypeRoomLeave' with rooms: \",rooms);\n    if(!_.isFunction(socketCallback)) {\n        socketCallback = function(returnMsg) {\n            pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC info: unhandled ACK return message.\", returnMsg);\n        };\n    }\n\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    // Loop through each room in the rooms object. Emit the leaveRoom event for each one.\n    async.each(Object.keys(rooms), function(currentRoomName, asyncCallback) {\n        connectionObj.events.emit(\"roomLeave\", connectionObj, currentRoomName, function(err){\n            if (err) {\n                pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Error leaving room [\"+currentRoomName+\"].\", err);\n            }\n            asyncCallback(null);\n        });\n    }, function(err, newRoomObj) {\n        var roomData = {};\n        for (var currentRoomName in rooms) {\n            roomData[currentRoomName]={\n                \"roomName\":     currentRoomName,\n                \"roomStatus\":   \"leave\"\n            };\n        }\n        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, {\"msgType\":\"roomData\", \"msgData\":{\"roomData\":roomData}}, appObj);\n        next(null);\n    });\n};\n\n\n/**\n * Default listener for event \"msgTypeGetIceConfig\". This event is fired when an easyrtcCmd message with msgType of \"getIceConfig\" is received from a client. \n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onMsgTypeGetIceConfig = function(connectionObj, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onMsgTypeGetIceConfig'\");\n\n    if(!_.isFunction(socketCallback)) {\n        socketCallback = function(returnMsg) {\n            pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC info: unhandled ACK return message.\", returnMsg);\n        };\n    }\n\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    connectionObj.events.emit(\"getIceConfig\", connectionObj, function(err, iceConfigObj){\n        if (err) {\n            pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_GEN_FAIL\"), appObj);\n        }\n        else {\n            pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, {\"msgType\":\"iceConfig\", \"msgData\":{\"iceConfig\":{\"iceServers\":iceConfigObj}}}, appObj);\n        }\n        next(null);\n    });\n};\n\n\n/**\n * Default listener for event \"msgTypeGetRoomList\". This event is fired when an easyrtcCmd message with msgType of \"getRoomList\" is received from a client. \n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onMsgTypeGetRoomList = function(connectionObj, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onMsgTypeGetRoomList'\");\n\n    if(!_.isFunction(socketCallback)) {\n        socketCallback = function(returnMsg) {\n            pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC info: unhandled ACK return message.\", returnMsg);\n        };\n    }\n\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    connectionObj.generateRoomList(\n        function(err, roomList) {\n            if(err) {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_NO_ROOM_LIST\"), appObj);\n            }\n            else {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, {\"msgType\":\"roomList\", \"msgData\":{\"roomList\":roomList}}, appObj);\n            }\n            next(null);\n        }\n    );\n};\n\n\n/**\n * Default listener for event \"msgTypeSetPresence\". This event is fired when an easyrtcCmd message with msgType of \"setPresence\" is received from a client. \n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Object} presenceObj    Presence object which contains all the fields for setting a presence for a connection.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onMsgTypeSetPresence = function(connectionObj, presenceObj, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onMsgTypeSetPresence' with setPresence: \",presenceObj);\n    if(!_.isFunction(socketCallback)) {\n        socketCallback = function(returnMsg) {\n            pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC info: unhandled ACK return message.\", returnMsg);\n        };\n    }\n\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    connectionObj.setPresence(\n        presenceObj,\n        function(err){\n            if (err) {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_PRESENCE\"), appObj);\n            }\n            else {\n                connectionObj.emitRoomDataDelta(false, function(err, roomDataObj){\n                    if (err) {\n                        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_PRESENCE\"), appObj);\n                    }\n                    else {\n                        pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, {\"msgType\":\"roomData\", \"msgData\":{\"roomData\":roomDataObj}}, appObj);\n                    }\n                });\n            }\n            next(null);\n        }\n    );\n};\n\n\n/**\n * Default listener for event \"msgTypeSetRoomApiField\". This event is fired when an easyrtcCmd message with msgType of \"setRoomApiField\" is received from a client. \n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Object} roomApiFieldObj Api Field object which contains all the fields for setting a presence for a connection.\n * @param       {Function} socketCallback Socket.io callback function which delivers a response to a socket. Expects a single parameter (msg).\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onMsgTypeSetRoomApiField = function(connectionObj, roomApiFieldObj, socketCallback, next){\n    var easyrtcid = connectionObj.getEasyrtcid();\n    var appObj = connectionObj.getApp();\n\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onMsgTypeSetRoomApiField' with apiFieldObj: \",roomApiFieldObj);\n    if(!_.isFunction(socketCallback)) {\n        socketCallback = function(returnMsg) {\n            pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] EasyRTC info: unhandled ACK return message.\", returnMsg);\n        };\n    }\n\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    connectionObj.room(roomApiFieldObj.roomName, function(err, connectionRoomObj){\n        if (err) {\n            pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_BAD_ROOM\"), appObj);\n            next(null);\n            return;\n        }\n        connectionRoomObj.setApiField(roomApiFieldObj.field, function(err){\n            if (err) {\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_BAD_FIELD\"), appObj);\n                next(null);\n                return;\n            }\n            connectionRoomObj.emitRoomDataDelta(false, function(err, roomDataDelta){\n                if (err) {\n                    pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, pub.util.getErrorMsg(\"MSG_REJECT_GEN_FAIL\"), appObj);\n                    next(null);\n                    return;\n                }\n\n                var msg = {\"msgType\":\"roomData\", \"msgData\": {\"roomData\": {}}};\n                msg.msgData.roomData[roomApiFieldObj.roomName] = roomDataDelta;\n                pub.util.sendSocketCallbackMsg(easyrtcid, socketCallback, msg, appObj);\n            });\n        });\n    });\n};\n\n\n/**\n * Default listener for event \"getIceConfig\". Returns an ICE configuration object to the callback.\n * \n * The ICE configuration object will hold the array of STUN and TURN servers the connection should use when forming a peer connection. This default listener uses the \"appIceServers\" configuration option at the application level.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {Function} callback     Callback of form (err, iceConfigArray)\n */\neventListener.onGetIceConfig = function(connectionObj, callback){\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onGetIceConfig'\");\n    callback(null, connectionObj.getApp().getOption(\"appIceServers\"));\n};\n\n\n/**\n * Default listener for event \"roomCreate\". Creates a room attached to an application with a specified room name. The optional creatorConnectionObj is provided to provide context; joining the room is done separately. If successful, the callback returns a roomObj.\n * \n * @param       {Object} appObj         EasyRTC application object. Contains methods used for identifying and managing an application.\n * @param       {?Object} creatorConnectionObj EasyRTC connection object belonging to the creator of the room. Contains methods used for identifying and managing a connection.\n * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\n * @param       {?Object} roomOptions   Sets room level options. May be null or map of key/value pairs.\n * @param       {Function} callback     Callback of form (err, roomObj)\n */\neventListener.onRoomCreate = function(appObj, creatorConnectionObj, roomName, roomOptions, callback){\n    pub.util.logDebug(\"[\"+appObj.getAppName()+\"]\" + (creatorConnectionObj?\"[\"+creatorConnectionObj.getEasyrtcid()+\"]\":\"\") +  \" Room [\"+ roomName +\"] Running func 'onRoomCreate'\");\n    appObj.createRoom(roomName, roomOptions, callback);\n};\n\n\n/**\n * Default listener for event \"roomJoin\". Joins a connection to a a specified room. If successful, the callback will return a connectionRoomObj.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\n * @param       {?Object} roomParameter A map(dictionary) object with key/value pairs. The values can be any JSONable object. This field is not currently looked at by EasyRTC, however it is available for custom server applications. May be used for room options or authentication needs.\n * @param       {Function} callback     Callback of form (err, connectionRoomObj)\n */\neventListener.onRoomJoin = function(connectionObj, roomName, roomParameter, callback){\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onRoomJoin'\");\n\n    // roomParameter is a new field. To ease upgrading we'll just show a warning to server applications which haven't updated \n    if (_.isFunction(roomParameter)){\n        pub.util.logWarning(\"Upgrade notice: EasyRTC roomJoin event called without roomParameter object.\");\n        callback = roomParameter;\n        roomParameter = null;\n    }\n\n    connectionObj.joinRoom(roomName, function(err, connectionRoomObj){\n        if (err) {\n            callback(err);\n            return;\n        }\n        connectionRoomObj.emitRoomDataDelta(false, function(err, roomDataDelta){\n            // Return connectionRoomObj regardless of if there was a problem sending out the deltas\n            callback(null, connectionRoomObj);\n        });\n    });\n};\n\n\n/**\n * Default listener for event \"roomLeave\". Run upon a connection leaving a room.\n * \n * @param       {Object} connectionObj  EasyRTC connection object. Contains methods used for identifying and managing a connection.\n * @param       {string} roomName       Room name which uniquely identifies a room within an EasyRTC application.\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onRoomLeave = function(connectionObj, roomName, next){\n    pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Running func 'onRoomLeave' with rooms [\"+roomName+\"]\");\n\n    if(!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    connectionObj.room(roomName, function(err, connectionRoomObj){\n        if (err) {\n            pub.util.logWarning(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Couldn't leave room [\" + roomName + \"]\");\n            next(err);\n            return;\n        }\n\n        pub.util.logDebug(\"[\"+connectionObj.getAppName()+\"][\"+connectionObj.getEasyrtcid()+\"] Leave room [\" + roomName + \"]\");\n        connectionRoomObj.leaveRoom(next);\n    });\n};\n\n\n/**\n * Default listener for event \"shutdown\". This event is fired when the server is being shutdown.\n * \n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onShutdown = function(next){\n    pub.util.logDebug(\"Running func 'onShutdown'\");\n    next(null);\n};\n\n\n/**\n * Default listener for event \"startup\". This event initializes EasyRTC server so it is ready for connections.\n *\n * @param       {nextCallback} next     A success callback of form next(err).\n */\neventListener.onStartup = function(next){\n    if (!_.isFunction(next)) {\n        next = pub.util.nextToNowhere;\n    }\n\n    pub.util.logDebug(\"Running func 'onStartup'\");\n    async.waterfall([\n        function(callback) {\n            pub.util.logDebug(\"Configuring Http server\");\n\n            // Set the EasyRTC demos\n            if (pub.getOption(\"demosEnable\")) {\n                pub.util.logDebug(\"Setting up demos to be accessed from '\" + pub.getOption(\"demosPublicFolder\") + \"/'\");\n                pub.httpApp.get(pub.getOption(\"demosPublicFolder\") + \"/*\", function(req, res) {\n                    (res.sendFile||res.sendfile).call(res,\n                        \"./demos/\" + (req.params[0] ? req.params[0] : \"index.html\"),\n                        // TODO security check\n                        {root:__dirname + \"/../\"},\n                        function(err) {\n                            try{if (err && err.status && res && !res._headerSent) {\n                                res.status(404);\n                                var body =    \"<html><head><title>File Not Found</title></head><body><h1>File Not Found</h1></body></html>\";\n                                res.setHeader(\"Content-Type\", \"text/html\");\n                                res.setHeader(\"Content-Length\", body.length);\n                                res.end(body);\n                            }}catch(e){}\n                        }\n                    );\n                });\n                // Forward people who forget the trailing slash to the folder.\n                pub.httpApp.get(pub.getOption(\"demosPublicFolder\"), function(req, res) {res.redirect(pub.getOption(\"demosPublicFolder\") + \"/\");});\n            }\n\n            if (pub.getOption(\"apiEnable\")) {\n                // Set the EasyRTC API files\n                pub.util.logDebug(\"Setting up API files to be accessed from '\" + pub.getOption(\"apiPublicFolder\") + \"/'\");\n                pub.httpApp.get(pub.getOption(\"apiPublicFolder\") + \"/easyrtc.js\",                  function(req, res) {pub.util.sendSessionCookie(req, res); (res.sendFile||res.sendfile).call(res,\"api/easyrtc.js\",                   {root:__dirname + \"/../\"});});\n                pub.httpApp.get(pub.getOption(\"apiPublicFolder\") + \"/easyrtc_ft.js\",               function(req, res) {pub.util.sendSessionCookie(req, res); (res.sendFile||res.sendfile).call(res,\"api/easyrtc_ft.js\",                {root:__dirname + \"/../\"});});\n                pub.httpApp.get(pub.getOption(\"apiPublicFolder\") + \"/easyrtc.css\",                 function(req, res) {pub.util.sendSessionCookie(req, res); (res.sendFile||res.sendfile).call(res,\"api/easyrtc.css\",                  {root:__dirname + \"/../\"});});\n                pub.httpApp.get(pub.getOption(\"apiPublicFolder\") + \"/easyrtc.min.js\",              function(req, res) {pub.util.sendSessionCookie(req, res); (res.sendFile||res.sendfile).call(res,\"open_source/api/easyrtc.min.js\",   {root:__dirname + \"/../\"});});\n                pub.httpApp.get(pub.getOption(\"apiPublicFolder\") + \"/easyrtc_ft.min.js\",           function(req, res) {pub.util.sendSessionCookie(req, res); (res.sendFile||res.sendfile).call(res,\"api/easyrtc_ft.min.js\",            {root:__dirname + \"/../\"});});\n                pub.httpApp.get(pub.getOption(\"apiPublicFolder\") + \"/easyrtc.min.css\",             function(req, res) {pub.util.sendSessionCookie(req, res); (res.sendFile||res.sendfile).call(res,\"open_source/api/easyrtc.min.css\",  {root:__dirname + \"/../\"});});\n                pub.httpApp.get(pub.getOption(\"apiPublicFolder\") + \"/img/*\", function(req, res) {\n                    pub.util.sendSessionCookie(req, res); \n                    (res.sendFile||res.sendfile).call(res,\n                        \"./api/img/\" + (req.params[0] ? req.params[0] : \"index.html\"),\n                        {root:__dirname + \"/../\"},\n                        function(err) {\n                            try{if (err && err.status && res && !res._headerSent) {\n                                res.status(404);\n                                var body =    \"<html><head><title>File Not Found</title></head><body><h1>File Not Found</h1></body></html>\";\n                                res.setHeader(\"Content-Type\", \"text/html\");\n                                res.setHeader(\"Content-Length\", body.length);\n                                res.end(body);\n                            }}catch(e){}\n                        }\n                    );\n                });\n                if(pub.getOption(\"apiLabsEnable\")){\n                    pub.httpApp.get(pub.getOption(\"apiPublicFolder\") + \"/labs/*\", function(req, res) {\n                        pub.util.sendSessionCookie(req, res);\n                        (res.sendFile||res.sendfile).call(res,\n                                \"./api/labs/\" + (req.params[0] ? req.params[0] : \"index.html\"),\n                            {root:__dirname + \"/../\"},\n                            function(err) {\n                                try{if (err && err.status && res && !res._headerSent) {\n                                    res.status(404);\n                                    var body =    \"<html><head><title>File Not Found</title></head><body><h1>File Not Found</h1></body></html>\";\n                                    res.setHeader(\"Content-Type\", \"text/html\");\n                                    res.setHeader(\"Content-Length\", body.length);\n                                    res.end(body);\n                                }}catch(e){}\n                            }\n                        );\n                    });\n                }\n            }\n\n            if (pub.getOption(\"apiEnable\") && pub.getOption(\"apiOldLocationEnable\")) {\n                pub.util.logWarning(\"Enabling listening for API files in older depreciated location.\");\n                // Transition - Old locations of EasyRTC API files\n                pub.httpApp.get(\"/js/easyrtc.js\",                   function(req, res) {(res.sendFile||res.sendfile).call(res,\"api/easyrtc.js\",              {root:__dirname + \"/../\"});});\n                pub.httpApp.get(\"/css/easyrtc.css\",                 function(req, res) {(res.sendFile||res.sendfile).call(res,\"api/easyrtc.css\",             {root:__dirname + \"/../\"});});\n            }\n            callback(null);\n        },\n\n        function(callback) {\n            pub.util.logDebug(\"Configuring Socket server\");\n\n            pub.socketServer.sockets.on(\"connection\", function (socket) {\n                var easyrtcid = pub.util.getAvailableEasyrtcid();\n\n                pub.util.logDebug(\"[\"+easyrtcid+\"][\"+socket.id+\"] Socket connected\");\n                pub.util.logDebug(\"Emitting event 'connection'\");\n                pub.events.emit(\"connection\", socket, easyrtcid, function(err){\n                    if(err){\n                        socket.disconnect();\n                        pub.util.logError(\"[\"+easyrtcid+\"] Connect error\", err);\n                    }\n                });\n            });\n            callback(null);\n        },\n\n        // Setup default application\n        function(callback) {\n            pub.createApp(pub.getOption(\"appDefaultName\"), null, callback);\n        },\n\n        function(appObj, callback) {\n            // Checks to see if there is a newer version of EasyRTC available\n            if (pub.getOption(\"updateCheckEnable\")) {\n                pub.util.updateCheck();\n            }\n            callback(null);\n        }\n    ],\n    // This function is called upon completion of the async waterfall, or upon an error being thrown.\n    function (err) {\n        next(err);\n    });\n};","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/lib/easyrtc_util.js":"/* global module, require */\r\n\r\n/**\r\n * Utility functions specific to EasyRTC.\r\n *\r\n * @module      easyrtc_util\r\n * @author      Priologic Software, info@easyrtc.com\r\n * @copyright   Copyright 2016 Priologic Software. All rights reserved.\r\n * @license     BSD v2, see LICENSE file in module root folder.\r\n */\r\n\r\nvar util            = require(\"util\");\r\nvar _               = require(\"underscore\");                // General utility functions external module\r\nvar g               = require(\"./general_util\");            // General utility functions local module\r\nvar e               = require(\"./easyrtc_private_obj\");     // EasyRTC private object\r\n\r\n/**\r\n *  Object to hold EasyRTC Utility methods and classes.\r\n *\r\n * @class\r\n */\r\nvar eu = module.exports;\r\n\r\n/**\r\n * Disconnects socket. Failure results in a debug level log message.\r\n *\r\n * @param       {Object} socket         Socket.io connection object.\r\n */\r\neu.socketDisconnect = function(socket) {\r\n    try {\r\n        socket.disconnect();\r\n    } catch(err) {\r\n        eu.log(\"debug\", \"Socket disconnection command failed. Socket may already be disconnected.\");\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Server Errors.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\neu.ServerError = function(msg) {\r\n    eu.ServerError.super_.call(this, msg, this.constructor);\r\n};\r\nutil.inherits(eu.ServerError, g.AbstractError);\r\neu.ServerError.prototype.name = \"Server Error\";\r\neu.ServerError.prototype.errorLevel = \"error\";\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Application Errors.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\neu.ApplicationError = function(msg) {\r\n    eu.ApplicationError.super_.call(this, msg, this.constructor);\r\n};\r\nutil.inherits(eu.ApplicationError, g.AbstractError);\r\neu.ApplicationError.prototype.name = \"Application Error\";\r\neu.ApplicationError.prototype.errorLevel = \"error\";\r\n\r\n\r\n/**\r\n * Custom Error Object for Connection Errors.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\neu.ConnectionError = function(msg) {\r\n    eu.ConnectionError.super_.call(this, msg, this.constructor);\r\n};\r\nutil.inherits(eu.ConnectionError, g.AbstractError);\r\neu.ConnectionError.prototype.name = \"Connection Error\";\r\neu.ConnectionError.prototype.errorLevel = \"error\";\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Server Warnings.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\neu.ServerWarning = function(msg) {\r\n    eu.ServerWarning.super_.call(this, msg, this.constructor);\r\n};\r\nutil.inherits(eu.ServerWarning, g.AbstractError);\r\neu.ServerWarning.prototype.name = \"Server Warning\";\r\neu.ServerWarning.prototype.errorLevel = \"warning\";\r\n\r\n\r\n/**\r\n * Custom Error Object for EasyRTC Application Warnings.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\neu.ApplicationWarning = function(msg) {\r\n    eu.ApplicationWarning.super_.call(this, msg, this.constructor);\r\n};\r\nutil.inherits(eu.ApplicationWarning, g.AbstractError);\r\neu.ApplicationWarning.prototype.name = \"Application Warning\";\r\neu.ApplicationWarning.prototype.errorLevel = \"warning\";\r\n\r\n\r\n/**\r\n * Custom Error Object for Connection Warnings.\r\n *\r\n * @extends     Error\r\n * @param       {string} msg            Text message describing the error.\r\n * @returns     {Error}\r\n */\r\neu.ConnectionWarning = function(msg) {\r\n    eu.ConnectionWarning.super_.call(this, msg, this.constructor);\r\n};\r\nutil.inherits(eu.ConnectionWarning, g.AbstractError);\r\neu.ConnectionWarning.prototype.name = \"Connection Warning\";\r\neu.ConnectionWarning.prototype.errorLevel = \"warning\";\r\n\r\n\r\n/**\r\n * Determines if an Error object is an instance of ApplicationError, ConnectionError, or ServerError. If it is, it will return true.\r\n *\r\n * @param   {Error}     err\r\n * @return  {Boolean}\r\n */\r\neu.isError = function(err) {\r\n    if (err && ((err instanceof eu.ConnectionError)||(err instanceof eu.ApplicationError)||(err instanceof eu.ServerError)||(err instanceof Error))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Determines if an Error object is an instance of ApplicationWarning, ConnectionWarning, or ServerWarning. If it is, it will return true.\r\n *\r\n * @param   {Error}     err\r\n * @return  {Boolean}\r\n */\r\neu.isWarning = function(err) {\r\n    if (err && ((err instanceof eu.ConnectionWarning)||(err instanceof eu.ApplicationWarning)||(err instanceof eu.ServerWarning))) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Returns a random available easyrtcid.\r\n *\r\n * @return  {String} Available easyrtcid. A unique identifier for an EasyRTC connection.\r\n */\r\neu.getAvailableEasyrtcid = function() {\r\n    var newEasyrtcid = \"\";\r\n    var easyrtcidExists = false;\r\n\r\n    do {\r\n        newEasyrtcid = g.randomString();\r\n        easyrtcidExists = false;\r\n        for (var key in e.app) {\r\n            if (e.app[key].connection[newEasyrtcid]) {\r\n                easyrtcidExists = true;\r\n                break;\r\n            }\r\n        }\r\n    } while (easyrtcidExists);\r\n\r\n    return newEasyrtcid;\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/gruntfile.js":"/*global module:false, require */\nmodule.exports = (function() {\n\n    \"use strict\";\n\n    var fs = require('fs'),\n        stripJSONComments = require('strip-json-comments');\n\n    function readJSON(jsonFile) {\n        var data = fs.readFileSync(jsonFile, 'utf8');\n        return JSON.parse(stripJSONComments(data));\n    }\n\n    // Project Configuration\n    return function(grunt) {\n\n        // require it at the top and pass in the grunt instance\n        require('time-grunt')(grunt);\n\n        grunt.initConfig({\n\n            pkg: readJSON('package.json'),\n\n            // Project settings\n            config: {\n                // Configurable paths\n                apiPath: 'api',\n                apiDistPath: 'api/dist',\n                demosPath: 'demos',\n                libPath: 'lib',\n                docsPath: 'docs',\n                testPath: 'test',\n                bowerPath: 'bower_components'\n            },\n\n            watch: {\n                options: {\n                    livereload: true,\n                },\n                bower: {\n                    files: ['bower.json'],\n                    tasks: ['bowerInstall']\n                },\n                css: {\n                    files: [\n                        '<%= config.apiPath %>/**/*.css',\n                        '<%= config.demosPath %>/**/*.css'\n                    ],\n                    tasks: ['csslint']\n                },\n                js: {\n                    files: [\n                        'Gruntfile.js',\n                        '<%= config.apiPath %>/**/*.js',\n                        '<%= config.libPath %>/**/*.js'\n                    ],\n                    tasks: ['jshint']\n                },\n                html: {\n                    files: [\n                        '<%= config.demosPath %>/**/*.html'\n                    ],\n                    tasks: ['htmlhint']\n                }\n            },\n\n            jshint: {\n                options: {\n                    jshintrc: '.jshintrc',\n                    ignores: [\n                        '<%= config.apiPath %>/**/*.min.js'\n                    ]\n                },\n                all: [\n                    'Gruntfile.js',\n                    '<%= config.apiPath %>/**/*.js',\n                    '<%= config.libPath %>/**/*.js'\n                ],\n                api: [\n                    '<%= config.apiPath %>/**/*.js',\n                    '!<%= config.apiPath %>/**/easyrtc.js',\n                    '!<%= config.apiPath %>/labs/**/*.js'\n                ],\n                api_ft: [\n                    '<%= config.apiPath %>/**/easyrtc_ft.js'\n                ],\n                labs: [\n                    '<%= config.apiPath %>/labs/**/*.js'\n                ],\n                lib: [\n                    '<%= config.libPath %>/**/*.js'\n                ]\n            },\n\n            csslint: {\n                options: {\n                    csslintrc: '.csslintrc'\n                },\n                strict: {\n                    options: {\n                        import: 2\n                    },\n                    src: [\n                        '<%= config.apiPath %>/**/*.css',\n                        '<%= config.demosPath %>/**/*.css'\n                    ]\n                }\n            },\n\n            htmlhint: {\n                html1: {\n                    options: {\n                        'tag-pair': true\n                    },\n                    src: ['<%= config.demosPath %>/**/*.html']\n                }\n            },\n\n            requirejs: {\n                options: {\n                    // How to optimize all the JS files in the build output directory.\n                    optimize: 'none'\n                },\n                build_api: {\n                    options: {\n\n                        // Name of input file (without the .js extention)\n                        name: 'easyrtc',\n\n                        out: 'api/easyrtc.js',\n\n                        paths: {\n                             // Don't attempt to include dependencies whose path begins with socket.io/\n                            \"socket.io\": \"empty:\",\n                            // Ditto for the following 3rd-party libraries\n                            'webrtc-adapter': '<%= config.bowerPath %>/webrtc-adapter/adapter',\n                            'easyrtc_lang': '<%= config.apiPath %>/easyrtc_lang',\n                            'easyrtc': '<%= config.apiPath %>/easyrtc_int',\n                            'easyrtc_app': '<%= config.apiPath %>/easyrtc_app'\n                        },\n\n                        deps: ['easyrtc_app']\n                    }\n                }\n            },\n\n            jsdoc : {\n                jsdoc: './node_modules/.bin/jsdoc',\n                options: {\n                    private: false,\n                    configure: '<%= config.docsPath %>/conf.json',\n                    template: './node_modules/jsdoc-oblivion/template'\n                },\n                \n                client : {\n                    src: [\n                        '<%= config.apiPath %>/easyrtc_int.js',\n                        '<%= config.apiPath %>/easyrtc_ft.js',\n                        '<%= config.apiPath %>/easyrtc_app.js',\n                        '<%= config.apiPath %>/easyrtc_lang.js',\n                        '<%= config.docsPath %>/easyrtc_client_tutorial.md'\n                    ],\n                    options: {\n                        destination: '<%= config.docsPath %>/client_html_docs'\n                    }\n                },\n\n                server: {\n                    src: [\n                        '<%= config.libPath %>/easyrtc_public_obj.js',\n                        '<%= config.libPath %>/easyrtc_default_event_listeners',\n                        '<%= config.docsPath %>/easyrtc_server_install.md'\n                    ],\n                    options: {\n                        destination: '<%= config.docsPath %>/server_html_docs_lite'\n                    }\n                },\n                \n                client_lite: {\n                    src: [\n                        '<%= config.apiPath %>/easyrtc_int.js',\n                        '<%= config.apiPath %>/easyrtc_ft.js',\n                        '<%= config.apiPath %>/easyrtc_app.js',\n                        '<%= config.apiPath %>/easyrtc_lang.js'\n                    ],\n                    options: {\n                        template: 'dev/scripts/client_jsdoc_templates',\n                        destination: '<%= config.docsPath %>/client_html_docs_lite'\n                    }\n                },\n\n                client_ft_lite: {\n                    src: [\n                        '<%= config.apiPath %>/easyrtc_ft.js'\n                    ],\n                    options: {\n                        template: 'dev/scripts/client_jsdoc_templates2',\n                        destination: '<%= config.docsPath %>/client_ft_html_docs_lite'\n                    }\n                },\n\n                server_lite: {\n                    src: [\n                        '<%= config.libPath %>/easyrtc_public_obj.js',\n                        '<%= config.libPath %>/easyrtc_default_event_listeners'\n                    ],\n                    options: {\n                        destination: '<%= config.docsPath %>/server_html_docs_lite'\n                    }\n                }\n            },\n\n            connect: {\n                options: {\n                    keepalive: true,\n                    open: true,\n                    index: 'index.html',\n                    maxAge: 0\n                },\n                dev: {\n                    options: {\n                        port: 3000,\n                        base: '<%= config.demosPath %>'\n                    }\n                },\n                doc: {\n                    options: {\n                        port: 3005,\n                        base: '<%= config.docsPath %>'\n                    }\n                },\n                test_api: {\n                    options: {\n                        port: 3006,\n                        base: ['<%= config.bowerPath %>', '<%= config.apiPath %>', '<%= config.testPath %>/api']\n                    }\n                }\n            },\n\n            karma: {\n                test_api: {\n                    configFile: '<%= config.testPath %>/api/karma.conf.js'\n                }\n            },\n\n            file_info: {\n                build_api: {\n                    src: [\n                        '<%= config.apiPath %>/easyrtc_int.js',\n                        '<%= config.apiPath %>/easyrtc_lang.js',\n                        '<%= config.apiPath %>/easyrtc_ft.js',\n                        '<%= config.apiPath %>/easyrtc_app.js',\n                        '<%= config.apiPath %>/easyrtc.js', \n                    ],\n                    options: {\n                        stdout:\n                          'Easyrtc              - {{= sizeText(size(src[0]), 7) }}' + grunt.util.linefeed +\n                          'Easyrtc Lang         - {{= sizeText(size(src[1]), 7) }}' + grunt.util.linefeed +\n                          'Easyrtc FileTransfer - {{= sizeText(size(src[2]), 7) }}' + grunt.util.linefeed +\n                          'Easyrtc App          - {{= sizeText(size(src[3]), 7) }}' + grunt.util.linefeed +\n                          'Easyrtc Dist         - {{= sizeText(size(src[4]), 7) }}' + grunt.util.linefeed\n                    }\n                }\n            }\n        });\n\n        // Making grunt default to force in order not to break the project.\n        grunt.option('force', true);\n\n        grunt.loadNpmTasks('grunt-contrib-connect');\n        \n        grunt.loadNpmTasks('grunt-contrib-watch');\n        grunt.loadNpmTasks('grunt-contrib-jshint');\n        grunt.loadNpmTasks('grunt-contrib-csslint');\n        grunt.loadNpmTasks('grunt-htmlhint');\n\n        grunt.loadNpmTasks('grunt-karma');\n        grunt.loadNpmTasks('grunt-jsdoc');  \n        grunt.loadNpmTasks('grunt-file-info');\n        grunt.loadNpmTasks('grunt-contrib-requirejs');\n\n        // Default task(s) and.\n        grunt.registerTask('default', ['serve']);\n        grunt.registerTask('serve', function (target) {\n            target = target || 'dev';\n            grunt.task.run(['connect:' + target]);\n        });\n\n        // Code QA task(s)\n        grunt.registerTask('lint', ['csslint', 'jshint', 'htmlhint']);\n        grunt.registerTask('jslint', ['jshint']);\n        grunt.registerTask('csshint', ['csslint']);\n        grunt.registerTask('htmllint', ['htmlhint']);\n\n        // Build task(s).\n        grunt.registerTask('build', ['build_api']);\n\n\n        grunt.registerTask('build_api', ['requirejs:build_api', 'file_info:build_api']);\n\n        // Test task(s).\n        grunt.registerTask('test', ['test:karma']);\n        grunt.registerTask('test:karma', ['karma:test_api']);\n        grunt.registerTask('test:jasmine', ['serve:test_api']);\n    };\n\n}());\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/easyrtc_app.js":"/* global define, module, require, console */\n/*!\n  Script: easyrtc_app.js\n\n    Provides support file and data transfer support to easyrtc.\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define(['easyrtc'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory(require('easyrtc'));\n    } else {\n        //Vanilla JS, ensure dependencies are loaded correctly\n        if (typeof window.easyrtc !== 'object' || !window.easyrtc) {\n            throw new Error(\"easyrtc_app requires easyrtc\");\n        }\n        root.easyrtc = factory(window.easyrtc);\n  }\n}(this, function (easyrtc, undefined) {\n\n    \"use strict\";\n\n    /**\n     * This file adds additional methods to Easyrtc for simplifying the \n     * management of video-mediastream assignment.\n     * @class Easyrtc_App\n     */\n\n    /** @private */\n    var autoAddCloseButtons = true;\n\n    /** By default, the easyApp routine sticks a \"close\" button on top of each caller\n     * video object that it manages. Call this function(before calling easyApp) to disable that particular feature.\n     * @function\n     * @memberOf Easyrtc_App\n     * @example\n     *    easyrtc.dontAddCloseButtons();\n     */\n    easyrtc.dontAddCloseButtons = function() {\n        autoAddCloseButtons = false;\n    };\n\n    /**\n     * This is a helper function for the easyApp method. It manages the assignment of video streams\n     * to video objects. It assumes\n     * @param {String} monitorVideoId is the id of the mirror video tag.\n     * @param {Array} videoIds is an array of ids of the caller video tags.\n     * @private\n     */\n    function easyAppBody(monitorVideoId, videoIds) {\n\n        var videoIdsP = videoIds || [],\n            numPEOPLE = videoIds.length,\n            videoIdToCallerMap = {},\n            onCall = null, \n            onHangup = null;\n\n        /**\n         * Validates that the video ids correspond to dom objects.\n         * @param {String} monitorVideoId\n         * @param {Array} videoIds\n         * @returns {Boolean}\n         * @private\n         */\n        function validateVideoIds(monitorVideoId, videoIds) {\n            var i;\n            // verify that video ids were not typos.\n            if (monitorVideoId && !document.getElementById(monitorVideoId)) {\n                easyrtc.showError(easyrtc.errCodes.DEVELOPER_ERR, \"The monitor video id passed to easyApp was bad, saw \" + monitorVideoId);\n                return false;\n            }\n    \n            for (i in videoIds) {\n                if (!videoIds.hasOwnProperty(i)) {\n                    continue;\n                }\n                var name = videoIds[i];\n                if (!document.getElementById(name)) {\n                    easyrtc.showError(easyrtc.errCodes.DEVELOPER_ERR, \"The caller video id '\" + name + \"' passed to easyApp was bad.\");\n                    return false;\n                }\n            }\n            return true;\n        }\n\n\n        function getCallerOfVideo(videoObject) {\n            return videoIdToCallerMap[videoObject.id];\n        }\n\n        function setCallerOfVideo(videoObject, callerEasyrtcId) {\n            videoIdToCallerMap[videoObject.id] = callerEasyrtcId;\n        }\n\n        function videoIsFree(obj) {\n            var caller = getCallerOfVideo(obj);\n            return (caller === \"\" || caller === null || caller === undefined);\n        }\n\n        function getIthVideo(i) {\n            if (videoIdsP[i]) {\n                return document.getElementById(videoIdsP[i]);\n            }\n            else {\n                return null;\n            }\n        }\n\n        function showVideo(video, stream) {\n            easyrtc.setVideoObjectSrc(video, stream);\n            if (video.style.visibility) {\n                video.style.visibility = 'visible';\n            }\n        }\n\n        function hideVideo(video) {\n            easyrtc.setVideoObjectSrc(video, \"\");\n            video.style.visibility = \"hidden\";\n        }\n\n        if (!validateVideoIds(monitorVideoId, videoIdsP)) {\n            throw \"bad video element id\";\n        }\n\n        if (monitorVideoId) {\n            document.getElementById(monitorVideoId).muted = \"muted\";\n        }\n\n        easyrtc.addEventListener(\"roomOccupants\", \n            function(eventName, eventData) {\n                var i;\n                for (i = 0; i < numPEOPLE; i++) {\n                    var video = getIthVideo(i);\n                    if (!videoIsFree(video)) {\n                if( !easyrtc.isPeerInAnyRoom(getCallerOfVideo(video))){\n                           if( onHangup ) {\n                               onHangup(getCallerOfVideo(video), i);\n                           }\n                           setCallerOfVideo(video, null);\n                        }\n                    }\n                }\n            }\n        );\n\n        /** Sets an event handler that gets called when an incoming MediaStream is assigned \n         * to a video object. The name is poorly chosen and reflects a simpler era when you could\n         * only have one media stream per peer connection.\n         * @function\n         * @memberOf Easyrtc_App\n         * @param {Function} cb has the signature function(easyrtcid, slot){}\n         * @example\n         *   easyrtc.setOnCall( function(easyrtcid, slot){\n         *      console.log(\"call with \" + easyrtcid + \"established\");\n         *   });\n         */\n        easyrtc.setOnCall = function(cb) {\n            onCall = cb;\n        };\n\n        /** Sets an event handler that gets called when a call is ended.\n         * it's only purpose (so far) is to support transitions on video elements.\n         x     * this function is only defined after easyrtc.easyApp is called.\n         * The slot is parameter is the index into the array of video ids.\n         * Note: if you call easyrtc.getConnectionCount() from inside your callback\n         * it's count will reflect the number of connections before the hangup started.\n         * @function\n         * @memberOf Easyrtc_App\n         * @param {Function} cb has the signature function(easyrtcid, slot){}\n         * @example\n         *   easyrtc.setOnHangup( function(easyrtcid, slot){\n         *      console.log(\"call with \" + easyrtcid + \"ended\");\n         *   });\n         */\n        easyrtc.setOnHangup = function(cb) {\n            onHangup = cb;\n        };\n\n        /** \n          * Get the easyrtcid of the ith caller, starting at 0.\n          * @function\n          * @memberOf Easyrtc_App\n          * @param {number} i\n          * @returns {String}\n          */\n        easyrtc.getIthCaller = function(i) {\n            if (i < 0 || i >= videoIdsP.length) {\n                return null;\n            }\n            var vid = getIthVideo(i);\n            return getCallerOfVideo(vid);\n        };\n\n        /** \n          * This is the complement of getIthCaller. Given an easyrtcid,\n          * it determines which slot the easyrtc is in.\n          * @function\n          * @memberOf Easyrtc_App\n          * @param {string} easyrtcid \n          * @returns {number} or -1 if the easyrtcid is not a caller.\n          */\n        easyrtc.getSlotOfCaller = function(easyrtcid) {\n            var i;\n            for (i = 0; i < numPEOPLE; i++) {\n                if (easyrtc.getIthCaller(i) === easyrtcid) {\n                    return i;\n                }\n            }\n            return -1; // caller not connected\n        };\n\n        easyrtc.setOnStreamClosed(function(caller) {\n            var i;\n            for (i = 0; i < numPEOPLE; i++) {\n                var video = getIthVideo(i);\n                if (getCallerOfVideo(video) === caller) {\n                    hideVideo(video);\n                    setCallerOfVideo(video, \"\");\n                    if (onHangup) {\n                        onHangup(caller, i);\n                    }\n                }\n            }\n        });\n\n        //\n        // Only accept incoming calls if we have a free video object to display\n        // them in.\n        //\n        easyrtc.setAcceptChecker(function(caller, helper) {\n            var i;\n            for (i = 0; i < numPEOPLE; i++) {\n                var video = getIthVideo(i);\n                if (videoIsFree(video)) {\n                    helper(true);\n                    return;\n                }\n            }\n            helper(false);\n        });\n\n        easyrtc.setStreamAcceptor(function(caller, stream) {\n            var i;\n            if (easyrtc.debugPrinter) {\n                easyrtc.debugPrinter(\"stream acceptor called\");\n            }\n\n            var video;\n\n            for (i = 0; i < numPEOPLE; i++) {\n                video = getIthVideo(i);\n                if (getCallerOfVideo(video) === caller) {\n                    showVideo(video, stream);\n                    if (onCall) {\n                        onCall(caller, i);\n                    }\n                    return;\n                }\n            }\n\n            for (i = 0; i < numPEOPLE; i++) {\n                video = getIthVideo(i);\n                if (videoIsFree(video)) {\n                    setCallerOfVideo(video, caller);\n                    if (onCall) {\n                        onCall(caller, i);\n                    }\n                    showVideo(video, stream);\n                    return;\n                }\n            }\n            //\n            // no empty slots, so drop whatever caller we have in the first slot and use that one.\n            //\n            video = getIthVideo(0);\n            if (video) {\n                easyrtc.hangup(getCallerOfVideo(video));\n                showVideo(video, stream);\n                if (onCall) {\n                    onCall(caller, 0);\n                }\n            }\n\n            setCallerOfVideo(video, caller);\n        });\n\n        var addControls, parentDiv, closeButton, i;\n        if (autoAddCloseButtons) {\n\n            addControls = function(video) {\n                parentDiv = video.parentNode;\n                setCallerOfVideo(video, \"\");\n                closeButton = document.createElement(\"div\");\n                closeButton.className = \"easyrtc_closeButton\";\n                closeButton.onclick = function() {\n                    if (getCallerOfVideo(video)) {\n                        easyrtc.hangup(getCallerOfVideo(video));\n                        hideVideo(video);\n                        setCallerOfVideo(video, \"\");\n                    }\n                };\n                parentDiv.appendChild(closeButton);\n            };\n\n            for (i = 0; i < numPEOPLE; i++) {\n                addControls(getIthVideo(i));\n            }\n        }\n\n        var monitorVideo = null;\n        if (easyrtc.videoEnabled && monitorVideoId !== null) {\n            monitorVideo = document.getElementById(monitorVideoId);\n            if (!monitorVideo) {\n                console.error(\"Programmer error: no object called \" + monitorVideoId);\n                return;\n            }\n            monitorVideo.muted = \"muted\";\n            monitorVideo.defaultMuted = true;\n        }\n    }\n\n    /**\n     * Provides a layer on top of the easyrtc.initMediaSource and easyrtc.connect, assign the local media stream to\n     * the video object identified by monitorVideoId, assign remote video streams to\n     * the video objects identified by videoIds, and then call onReady. One of it's\n     * side effects is to add hangup buttons to the remote video objects, buttons\n     * that only appear when you hover over them with the mouse cursor. This method will also add the\n     * easyrtcMirror class to the monitor video object so that it behaves like a mirror.\n     * @function\n     * @memberOf Easyrtc_App\n     *  @param {String} applicationName - name of the application.\n     *  @param {String} monitorVideoId - the id of the video object used for monitoring the local stream.\n     *  @param {Array} videoIds - an array of video object ids (strings)\n     *  @param {Function} onReady - a callback function used on success. It is called with the easyrtcId this peer is known to the server as.\n     *  @param {Function} onFailure - a callback function used on failure (failed to get local media or a connection of the signaling server).\n     *  @example\n     *     easyrtc.easyApp('multiChat', 'selfVideo', ['remote1', 'remote2', 'remote3'],\n     *              function(easyrtcId){\n     *                  console.log(\"successfully connected, I am \" + easyrtcId);\n     *              },\n     *              function(errorCode, errorText){\n     *                  console.log(errorText);\n     *              });\n     */\n    easyrtc.easyApp = function(applicationName, monitorVideoId, videoIds, onReady, onFailure) {\n        \n        var gotMediaCallback = null,\n            gotConnectionCallback = null;\n\n        easyAppBody(monitorVideoId, videoIds);\n\n        easyrtc.setGotMedia = function(gotMediaCB) {\n            gotMediaCallback = gotMediaCB;\n        };\n\n        //\n        // try to restablish broken connections that weren't caused by a hangup\n        //\n        easyrtc.setPeerClosedListener( function(easyrtcid) {\n           setTimeout( function() {\n               if( easyrtc.getSlotOfCaller(easyrtcid)  >= 0 && easyrtc.isPeerInAnyRoom(easyrtcid)) {\n                    easyrtc.call(easyrtcid, function(){}, function() {}, function(){});\n               }\n           }, 1000);\n        });\n\n        /** Sets an event handler that gets called when a connection to the signaling\n         * server has or has not been made. Can only be called after calling easyrtc.easyApp.\n         * @function\n         * @memberOf Easyrtc_App\n         * @param {Function} gotConnectionCB has the signature (gotConnection, errorText)\n         * @example\n         *    easyrtc.setGotConnection( function(gotConnection, errorText){\n         *        if( gotConnection ){\n         *            console.log(\"Successfully connected to signaling server\");\n         *        }\n         *        else{\n         *            console.log(\"Failed to connect to signaling server because: \" + errorText);\n         *        }\n         *    });\n         */\n        easyrtc.setGotConnection = function(gotConnectionCB) {\n            gotConnectionCallback = gotConnectionCB;\n        };\n        \n        function nextInitializationStep(/* token */) {\n            if (gotConnectionCallback) {\n                gotConnectionCallback(true, \"\");\n            }\n            onReady(easyrtc.myEasyrtcid);\n        }\n\n        function postGetUserMedia() {\n            if (gotMediaCallback) {\n                gotMediaCallback(true, null);\n            }\n            if (monitorVideoId !== null) {\n                easyrtc.setVideoObjectSrc(document.getElementById(monitorVideoId), easyrtc.getLocalStream());\n            }\n            function connectError(errorCode, errorText) {\n                if (gotConnectionCallback) {\n                    gotConnectionCallback(false, errorText);\n                }\n                else if (onFailure) {\n                    onFailure(easyrtc.errCodes.CONNECT_ERR, errorText);\n                }\n                else {\n                    easyrtc.showError(easyrtc.errCodes.CONNECT_ERR, errorText);\n                }\n            }\n\n            easyrtc.connect(applicationName, nextInitializationStep, connectError);\n        }\n\n        var stream = easyrtc.getLocalStream(null);\n        if (stream) {\n            postGetUserMedia();\n        }\n        else {\n            easyrtc.initMediaSource(\n                    postGetUserMedia,\n                    function(errorCode, errorText) {\n                        if (gotMediaCallback) {\n                            gotMediaCallback(false, errorText);\n                        }\n                        else if (onFailure) {\n                            onFailure(easyrtc.errCodes.MEDIA_ERR, errorText);\n                        }\n                        else {\n                            easyrtc.showError(easyrtc.errCodes.MEDIA_ERR, errorText);\n                        }\n                    },\n                    null // default stream\n                );\n        }\n    };\n\nreturn easyrtc;\n\n})); // end of module wrapper\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/easyrtc_ft.js":"/* global define, module, require, console */\n/*!\n  Script: easyrtc_ft.js\n\n    Provides support file and data transfer support to easyrtc.\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define(['easyrtc'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory(require('easyrtc'));\n    } else {\n        //Vanilla JS, ensure dependencies are loaded correctly\n        if (typeof window.easyrtc !== 'object' || !window.easyrtc) {\n            throw new Error(\"easyrtc_ft requires easyrtc\");\n        }\n        root.easyrtc_ft = factory(window.easyrtc);\n  }\n}(this, function (easyrtc, undefined) {\n\n\"use strict\";\n\n/**\n * @class Easyrtc_ft.\n *\n * @returns {Easyrtc_ft} the new easyrtc instance.\n *\n * @constructs Easyrtc_ft\n */\n\nvar easyrtc_ft = {};\n\n/**\n * Error codes that the EasyRTC will use in the errorCode field of error object passed\n * to error handler set by easyrtc.setOnError. The error codes are short printable strings.\n * @type Object\n */\neasyrtc_ft.errCodes = {\n    DATA_LOST: \"DATA_LOST\",\n    INVALID_DATA: \"INVALID_DATA\",\n    DROP_FILE: \"DROP_FILE\"\n};\n\n/**\n * Establish an area as a drag-n-drop drop site for files.\n * @param {DOMString} droptargetName - the id of the drag-and-drop site or the actual DOM object.\n * @param {Function} filesHandler - function that accepts an array of File's.\n */\neasyrtc_ft.buildDragNDropRegion = function(droptargetName, filesHandler) {\n    var droptarget;\n    if (typeof droptargetName === 'string') {\n        droptarget = document.getElementById(droptargetName);\n        if (!droptarget) {\n            throw (\"unknown object \" + droptargetName);\n        }\n    }\n    else {\n        droptarget = droptargetName;\n    }\n\n    function addClass(target, classname) {\n        if (target.className) {\n            if (target.className.indexOf(classname, 0) >= 0) {\n                return;\n            }\n            else {\n                target.className = target.className + \" \" + classname;\n            }\n        }\n        else {\n            target.className = classname;\n        }\n        target.className = target.className.replace(\"  \", \" \");\n    }\n\n    function removeClass(target, classname) {\n        if (!target.className) {\n            return;\n        }\n        target.className = target.className.replace(classname, \"\").replace(\"  \", \" \");\n    }\n\n    function ignore(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        return false;\n    }\n\n    function drageventcancel(e) {\n        if (e.preventDefault) {\n            e.preventDefault(); // required by FF + Safari\n        }\n        e.dataTransfer.dropEffect = 'copy'; // tells the browser what drop effect is allowed here\n        return false; // required by IE\n    }\n\n    var dropCueClass = \"easyrtcfiledrop\";\n\n    function dropHandler(e) {\n        removeClass(droptarget, dropCueClass);\n        var dt = e.dataTransfer;\n        var files = dt.files;\n        if (dt.files.length > 0) {\n            try {\n                filesHandler(files);\n            } catch (errorEvent) {\n                easyrtc.showError(easyrtc_ft.errCodes.DROP_FILE, errorEvent);\n            }\n        }\n        return ignore(e);\n    }\n\n    function dragEnterHandler(e) {\n        addClass(droptarget, dropCueClass);\n        return drageventcancel(e);\n    }\n\n    function dragLeaveHandler(e) {\n        removeClass(droptarget, dropCueClass);\n        return drageventcancel(e);\n    }\n\n    var addEvent = (function() {\n        if (document.addEventListener) {\n            return function(el, type, fn) {\n                if (el && el.nodeName || el === window) {\n                    el.addEventListener(type, fn, false);\n                } else if (el && el.length) {\n                    for (var i = 0; i < el.length; i++) {\n                        addEvent(el[i], type, fn);\n                    }\n                }\n            };\n        } else {\n            return function(el, type, fn) {\n                if (el && el.nodeName || el === window) {\n                    el.attachEvent('on' + type, function() {\n                        return fn.call(el, window.event);\n                    });\n                } else if (el && el.length) {\n                    for (var i = 0; i < el.length; i++) {\n                        addEvent(el[i], type, fn);\n                    }\n                }\n            };\n        }\n    })();\n\n    droptarget.ondrop = dropHandler;\n    droptarget.ondragenter = dragEnterHandler;\n    droptarget.ondragleave = dragLeaveHandler;\n    droptarget.ondragover = drageventcancel;\n};\n\n/**\n * Builds a function that can be used to send a group of files to a peer.\n * @param {String} destUser easyrtcid of the person being sent to.\n * @param {Function} progressListener - if provided, is called with the following objects:\n *    {status:\"waiting\"}  // once a file offer has been sent but not accepted or rejected yet\n *    {status:\"started_file\", name: filename}\n *    {status:\"working\", name:filename, position:position_in_file, size:size_of_current_file, numFiles:number_of_files_left}\n *    {status:\"cancelled\"}  // if the remote user cancels the sending\n *    {status:\"done\"}       // when the file is done\n *    the progressListener should always return true for normal operation, false to cancel a filetransfer.\n * @return {Function} an object that accepts an array of File (the Files to be sent), and a boolean\n * @param {Object} options - overide default file transfer settings\n *    maxPacketSize is the size (before base64 encoding) that is sent in a\n *               single data channel message, in bytes.\n *    maxChunkSize is the amount read from a file at a time, in bytes.\n *    ackThreshold is the amount of data that can be sent before an ack is\n *              received from the party we're sending to, bytes.\n *    maxChunkSize should be a multiple of maxPacketSize.\n *    ackThreshold should be several times larger than maxChunkSize. For\n *              network paths that have greater latency, increase\n *              ackThreshold further.\n */\neasyrtc_ft.buildFileSender = function(destUser, progressListener, options) {\n    options = options || {};\n    var droptarget;\n    var seq = 0;\n    var positionAcked = 0;\n    var filePosition = 0;\n    var filesOffered = []; // TODO ARray vs Object look weird here but seq is Number \n    var filesBeingSent = [];\n    var curFile = null;\n    var curSeq = null;\n    var curFileSize;\n    var filesAreBinary;\n    var maxPacketSize = options.maxPacketSize || (10 * 1024); // max bytes per packet, before base64 encoding\n    var maxChunkSize = options.maxPacketSize || (maxPacketSize * 10); // max binary bytes read at a time.\n    var ackThreshold = options.maxPacketSize || (maxChunkSize * 4); // send is allowed to be 400KB ahead of receiver\n\n    var waitingForAck = false;\n    var offersWaiting = [];\n    var outseq = 0;\n\n    function fileCancelReceived(sender, msgType, msgData, targeting) {\n\n        if (!msgData.seq || !filesOffered[msgData.seq]){\n            return;\n        }\n\n        progressListener({\n            seq: msgData.seq,\n            status: \"cancelled\"\n        });\n\n        // Offer can be offered only once\n        delete filesOffered[msgData.seq];\n    }\n\n    function cancelFilesOffer(offerSeq) {\n\n        // Clear from of\n        if (filesOffered[offerSeq]) {\n\n            fileCancelReceived(destUser, 'filesCancel', filesOffered[offerSeq]);  \n\n            delete filesOffered[offerSeq]; \n        } else {\n\n            // Clear from waiting queue\n            offersWaiting = offersWaiting.filter(function(offersWaiting) {\n                var isOfferToCancel = offersWaiting.seq === offerSeq;\n                if (isOfferToCancel) {\n                    fileCancelReceived(destUser, 'filesCancel', offersWaiting);  \n                }\n                return !isOfferToCancel;\n            }); \n        }\n\n        easyrtc.sendData(destUser, \"filesChunk\", {\n            seq: offerSeq,\n            done: \"cancelled\"\n        });\n    }\n\n    function sendFilesOffer(files, areBinary) {\n        \n        var fileNameList = [];\n        for (var i = 0, l = files.length; i < l; i++) {\n            fileNameList[i] = {\n                name: files[i].name, \n                size: files[i].size\n            };\n        }\n\n        seq++;\n        filesOffered[seq] = {\n            seq: seq,\n            files: files,\n            areBinary: areBinary\n        };\n        \n        easyrtc.sendDataWS(destUser, \"filesOffer\", {\n            seq: seq, \n            fileNameList: fileNameList\n        });\n\n        progressListener({\n            seq: seq,\n            status: \"waiting\"\n        });\n\n        return cancelFilesOffer.bind(null, seq);\n    }\n\n    function addOfferToWaitingList(offer) {\n        offersWaiting.push(offer);\n    }\n\n    function processOfferWaiting() {\n        if (offersWaiting.length > 0) {\n            setTimeout(function() {\n                var fileset = offersWaiting.shift();\n                sendOffer(fileset);\n            }, 240);\n        }\n    }\n\n    function sendChunk() {\n\n        if (!curSeq) {\n            return;\n        }\n\n        if (!curFile) {\n            if (filesBeingSent.length === 0) {\n\n                outseq = 0;\n                easyrtc.sendData(destUser, \"filesChunk\", {\n                    seq: curSeq,\n                    done: \"all\"\n                });\n\n                progressListener({\n                    seq: curSeq,\n                    status: \"done\"\n                });\n                    \n                curSeq = null;\n                processOfferWaiting();\n                return;\n            }\n            else {\n                curFile = filesBeingSent.shift();\n                curFileSize = curFile.size;\n                positionAcked = 0;\n                waitingForAck = false;\n                easyrtc.sendData(destUser, \"filesChunk\", {\n                    seq: curSeq,\n                    name: curFile.name, \n                    type: curFile.type, \n                    outseq: outseq, \n                    size: curFile.size\n                });\n                outseq++;\n\n                progressListener({\n                    seq: curSeq,\n                    status: \"started_file\", \n                    name: curFile.name\n                });\n            }\n        }\n\n        var amountToRead = Math.min(maxChunkSize, curFileSize - filePosition);\n        var progressAck = progressListener({\n            seq: curSeq,\n            status: \"working\", \n            name: curFile.name, \n            position: filePosition, \n            size: curFileSize, \n            numFiles: filesBeingSent.length + 1\n        });\n\n        if (!progressAck) {\n            curSeq = null;\n            curFile = null;\n            filePosition = 0;\n            cancelFilesOffer(curSeq);\n            processOfferWaiting();\n            return;\n        }\n\n        var nextLocation = filePosition + amountToRead;\n        var blobSlice = curFile.slice(filePosition, nextLocation);\n\n        var reader = new FileReader();\n        reader.onloadend = function(evt) {\n            if (evt.target.readyState === FileReader.DONE) { // DONE == 2\n\n                var binaryString = \"\";\n                var bytes = new Uint8Array(evt.target.result);\n                var length = bytes.length;\n\n                for( var i = 0; i < length; i++ ) {\n                   binaryString += String.fromCharCode(bytes[i]);\n                }\n\n                for (var pp = 0; pp < binaryString.length; pp++) {\n                    var oneChar = binaryString.charCodeAt(pp);\n                }\n\n                for (var pos = 0; pos < binaryString.length; pos += maxPacketSize) {\n                    \n                    var packetLen = Math.min(maxPacketSize, amountToRead - pos);\n                    var packetData = binaryString.substring(pos, pos + packetLen);\n                    var packetObject = {\n                        seq: curSeq,\n                        outseq: outseq\n                    };\n                    \n                    if (filesAreBinary) {\n                        packetObject.data64 = btoa(packetData);\n                    } else {\n                        packetObject.datatxt = packetData;\n                    }\n\n                    easyrtc.sendData(destUser, \"filesChunk\", packetObject);\n                    outseq++;\n                }\n\n                if (nextLocation >= curFileSize) {\n                    easyrtc.sendData(destUser, \"filesChunk\", {\n                        seq: curSeq,\n                        done: \"file\"\n                    });\n                }\n\n                if (filePosition < positionAcked + ackThreshold) {\n                    sendChunk();\n                } else {\n                    waitingForAck = true;\n                }\n            }\n        };\n\n        reader.readAsArrayBuffer(blobSlice);\n        filePosition = nextLocation;\n\n        //  advance to the next file if we've read all of this file\n        if (nextLocation >= curFileSize) {\n            curFile = null;\n            filePosition = 0;\n        }\n    }\n\n    if (!progressListener) {\n        progressListener = function() {\n            return true;\n        };\n    }\n\n    var roomOccupantListener = function(eventType, eventData) {\n        var roomName;\n        var foundUser = false;\n        for (roomName in eventData) {\n            if (eventData[roomName][destUser]) {\n                foundUser = true;\n            }\n        }\n        if (!foundUser) {\n            easyrtc.removeEventListener(\"roomOccupant\", roomOccupantListener);\n\n            if (filesBeingSent.length > 0) {\n                cancelFilesOffer(curSeq);\n            }\n            \n            if (filesOffered.length > 0) {\n                filesOffered.forEach(function (filesOffered, seq) {\n                    cancelFilesOffer(seq);\n                });\n            }\n        }\n    };\n\n    easyrtc.addEventListener(\"roomOccupant\", roomOccupantListener);\n\n    function sendOffer(offer) {\n\n        curSeq = offer.seq;\n        for (var i = 0, l = offer.files.length; i < l; i++) {\n            filesBeingSent.push(offer.files[i]);\n        }\n        filesAreBinary = offer.filesAreBinary;\n        filePosition = 0;\n\n        progressListener({\n            seq: curSeq,\n            status: \"started\"\n        });\n\n        sendChunk(); // this starts the file reading\n    }\n    \n    //\n    // if a file offer is rejected, we delete references to it.\n    //\n    function fileOfferRejected(sender, msgType, msgData, targeting) {\n        \n        if (!msgData.seq || !filesOffered[msgData.seq]){\n            return;\n        }\n\n        progressListener({\n            seq: msgData.seq,\n            status: \"rejected\"\n        });\n\n        delete filesOffered[msgData.seq];\n    }\n    //\n    // if a file offer is accepted, initiate sending of files.\n    //\n    function fileOfferAccepted(sender, msgType, msgData, targeting) {\n        \n        if (!msgData.seq || !filesOffered[msgData.seq]){\n            return;\n        }\n\n        var alreadySending = filesBeingSent.length > 0;\n        var offer = filesOffered[msgData.seq];\n\n        // Offer can be offered only once\n        delete filesOffered[msgData.seq];\n\n        if (!alreadySending && !curFile) {\n            sendOffer(offer);\n        } else {\n            addOfferToWaitingList(offer);\n        }\n    }\n\n    function packageAckReceived(sender, msgType, msgData) {\n        positionAcked = msgData.positionAck;\n        if (waitingForAck && filePosition < positionAcked + ackThreshold) {\n            waitingForAck = false;\n            sendChunk();\n        }\n    }\n\n    easyrtc.setPeerListener(fileOfferRejected, \"filesReject\", destUser);\n    easyrtc.setPeerListener(fileOfferAccepted, \"filesAccept\", destUser);\n    easyrtc.setPeerListener(fileCancelReceived, \"filesCancel\", destUser);\n    easyrtc.setPeerListener(packageAckReceived, \"filesAck\", destUser);\n\n    return sendFilesOffer;\n};\n\n\n/**\n * Enable datachannel based file receiving. The received blobs get passed to the statusCB in the 'eof' typed message.\n * @param {Function(otherGuy,fileNameList, wasAccepted)} acceptRejectCB - this function is called when another peer\n * (otherGuy) offers to send you a list of files. this function should call it's wasAccepted function with true to\n * allow those files to be sent, or false to disallow them.\n * @param {Function} blobAcceptor - this function is called three arguments arguments: the suppliers easyrtcid, a blob and a filename. It is responsible for\n * saving the blob to the file, usually using easyrtc_ft.saveAs.\n * @param {type} statusCB  - this function is called with the current state of file receiving. It is passed two arguments:\n * otherGuy - the easyrtcid of the person sending the files. *\n * msg - one of the following structures:\n * {status:\"done\", reason:\"accept_failed\"}\n * {status:\"done\", reason:\"success\"}\n * {status:\"done\", reason:\"cancelled\"}\n * {status:\"eof\"},\n * {status:\"started_file, name:\"filename\"}\n * {status:\"progress\", name:filename,\n *    received:received_size_in_bytes,\n *    size:file_size_in_bytes }\n *  @example\n *\n *    easyrtc_ft(\n *       function(otherGuy, filenamelist, wasAccepted) {  wasAccepted(true);},\n *       function(otherGuy, blob, filename) { easyrtc_ft(blob, filename);},\n *       function(otherGuy, status) {  console.log(\"status:\" + JSON.stringify(status))}\n *     );\n */\neasyrtc_ft.buildFileReceiver = function(acceptRejectCB, blobAcceptor, statusCB, options) {\n    options = options || {};\n\n    var usersOffers = {};\n    var positionAcked = 0;\n    var ackThreshold = options.ackThreshold || 10000; // receiver is allowed to be 10KB behind of sender\n\n    var roomOccupantListener = function(eventType, eventData) {\n        var destUser;\n        var foundUser;\n        var roomName;\n        var destOffer;\n        for (destUser in usersOffers) {\n            if (usersOffers.hasOwnProperty(destUser)) {\n                \n                foundUser = false;\n                for (roomName in eventData) {\n                    if (eventData[roomName][destUser]) {\n                        foundUser = true;\n                    }\n                }\n\n                if (!foundUser) {   \n                    var userOffers = usersOffers[destUser];\n                    for (var userOffer in userOffers[destUser]) {\n                        if (userOffers.hasOwnProperty(userOffer)) {\n                            delete userOffers[userOffer];\n                            statusCB(destUser, {\n                                seq: destOffer,\n                                status: \"done\", \n                                reason: \"cancelled\"\n                            });\n                        }\n                    }\n\n                    delete usersOffers[destUser];\n                }\n            }\n        }\n    };\n\n    easyrtc.addEventListener(\"roomOccupant\", roomOccupantListener);\n\n    function fileOfferHandler(otherGuy, msgType, msgData) {\n        var destOffer = msgData.seq;\n        if (!destOffer){\n            return;\n        }\n        var userOffers = usersOffers[otherGuy] = usersOffers[otherGuy] || {};\n        var userOffer = userOffers[destOffer] = {\n            seq: destOffer,\n            status: 'pending'\n        };\n        acceptRejectCB(otherGuy, msgData.fileNameList, function(wasAccepted) {\n            var ackHandler = function(ackMesg) {\n\n                if (ackMesg.msgType === \"error\") {\n                    statusCB(otherGuy, {\n                        seq: destOffer,\n                        status: \"done\", \n                        reason: \"accept_failed\"\n                    });\n                    delete userOffers[destOffer];\n                }\n                else {\n                    statusCB(otherGuy, {\n                        seq: destOffer,\n                        status: \"started\"\n                    });\n                }\n            };\n            if (wasAccepted) {\n                userOffers[destOffer] = {\n                    seq: destOffer,\n                    status: \"accepted\",\n                    nextPacketSeq: 0\n                };\n\n                easyrtc.sendDataWS(otherGuy, \"filesAccept\", {\n                    seq: destOffer\n                }, ackHandler);\n            }\n            else {\n                easyrtc.sendDataWS(otherGuy, \"filesReject\", {\n                    seq: destOffer\n                });\n\n                statusCB(otherGuy, {\n                    seq: destOffer,\n                    status: \"rejected\"\n                });\n\n                delete userOffers[destOffer];\n            }\n        });\n    }\n\n    function fileChunkHandler(otherGuy, msgType, msgData) {\n        var destOffer = msgData.seq;\n        if (!destOffer){\n            return;\n        }\n        var userOffers = usersOffers[otherGuy];\n        if (!userOffers) {\n            return;\n        }\n        var userOffer = userOffers[destOffer];\n        if (!userOffer) {\n            return;\n        }\n        if (msgData.done) {\n            switch (msgData.done) {\n                case \"file\":\n                    var blob = new Blob(userOffer.currentData, {\n                        type: userOffer.currentFileType\n                    });\n                    blobAcceptor(otherGuy, blob, userOffer.currentFileName);\n                    statusCB(otherGuy, {\n                        seq: destOffer,\n                        status: \"eof\", \n                        name: userOffer.currentFileName\n                    });\n                    \n                    blob = null;\n                    positionAcked = 0;\n                    userOffer.currentData = [];\n                    break;\n                case \"all\":\n                    statusCB(otherGuy, {\n                        seq: destOffer,\n                        status: \"done\", \n                        reason: \"success\"\n                    });\n                    break;\n                case \"cancelled\":\n                    delete userOffers[destOffer];\n                    statusCB(otherGuy, {\n                        seq: destOffer,\n                        status: \"done\", \n                        reason: \"cancelled\"\n                    });\n                    break;\n            }\n        }\n        else if (msgData.name) {\n            statusCB(otherGuy, {\n                seq: destOffer,\n                status: \"started_file\", \n                name: msgData.name\n            });\n            userOffer.currentFileName = msgData.name;\n            userOffer.currentFileType = msgData.type;\n            userOffer.lengthReceived = 0;\n            userOffer.lengthExpected = msgData.size;\n            userOffer.currentData = [];\n        }\n        else if (msgData.data64 || msgData.datatxt) {\n            var binData;\n            if (msgData.data64) {\n                binData = atob(msgData.data64);\n            }\n            else {\n                binData = msgData.datatxt;\n            }\n            var i;\n            var n = binData.length;\n            var binheap = new Uint8Array(n);\n            for (i = 0; i < n; i += 1) {\n                binheap[i] = binData.charCodeAt(i);\n            }\n            userOffer.lengthReceived += n;\n\n            if (!userOffer.currentData) {\n                easyrtc.showError(easyrtc_ft.errCodes.DATA_LOST, \"file tranfert data lost\");\n            }\n\n            userOffer.currentData.push(binheap);\n\n            statusCB(otherGuy, {\n                seq: destOffer,\n                status: \"progress\",\n                name: userOffer.currentFileName,\n                received: userOffer.lengthReceived,\n                size: userOffer.lengthExpected});\n\n            if (userOffer.lengthReceived > positionAcked + ackThreshold) {\n                positionAcked = userOffer.lengthReceived;\n                easyrtc.sendData(otherGuy, \"filesAck\", {\n                    seq: destOffer,\n                    positionAck: positionAcked\n                });\n            }\n        }\n        else {\n            easyrtc.showError(easyrtc.errCodes.INVALID_DATA, \"Unexpected data structure in filesChunk\");\n        }\n    }\n\n    easyrtc.setPeerListener(fileOfferHandler, \"filesOffer\");\n    easyrtc.setPeerListener(fileChunkHandler, \"filesChunk\");\n};\n\n/** This is a wrapper around Eli Grey's saveAs function. This saves to the browser's downloads directory.\n * @param {Blob} Blob - the data to be saved.\n * @param {String} filename - the name of the file the blob should be written to.\n */\neasyrtc_ft.saveAs = (function() {\n\n    /* FileSaver.js\n     * A saveAs() FileSaver implementation.\n     * 2013-01-23\n     *\n     * By Eli Grey, http://eligrey.com\n     * License: X11/MIT\n     *   See LICENSE.md\n     */\n\n    /*global self */\n    /*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,\n     plusplus: true */\n\n    /*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n    var saveAs = window.saveAs || (navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator)) || (function(view) {\n\n        var doc = view.document,\n            // only get URL when necessary in case BlobBuilder.js hasn't overridden it yet\n            get_URL = function () {\n                return view.URL || view.webkitURL || view;\n            },\n            URL = view.URL || view.webkitURL || view,\n            save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\"),\n            can_use_save_link = !view.externalHost && \"download\" in save_link,\n            click = function(node) {\n                var event = doc.createEvent(\"MouseEvents\");\n                event.initMouseEvent(\n                    \"click\", true, false, view, 0, 0, 0, 0, 0,\n                    false, false, false, false, 0, null\n                );\n                node.dispatchEvent(event);\n            },\n            webkit_req_fs = view.webkitRequestFileSystem,\n            req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem,\n            throw_outside = function(ex) {\n                (view.setImmediate || view.setTimeout)(function() {\n                    throw ex;\n                }, 0);\n            },\n            force_saveable_type = \"application/octet-stream\",\n            fs_min_size = 0,\n            deletion_queue = [];\n\n        function process_deletion_queue() {\n            var i = deletion_queue.length;\n            while (i--) {\n                var file = deletion_queue[i];\n                if (typeof file === \"string\") { // file is an object URL\n                    URL.revokeObjectURL(file);\n                } else { // file is a File\n                    file.remove();\n                }\n            }\n            deletion_queue.length = 0; // clear queue\n        }\n\n        function dispatch(filesaver, event_types, event) {\n            event_types = [].concat(event_types);\n            var i = event_types.length;\n            while (i--) {\n                var listener = filesaver[\"on\" + event_types[i]];\n                if (typeof listener === \"function\") {\n                    try {\n                        listener.call(filesaver, event || filesaver);\n                    } catch (ex) {\n                        throw_outside(ex);\n                    }\n                }\n            }\n        }\n\n        function FileSaver(blob, name) {\n            // First try a.download, then web filesystem, then object URLs\n            var filesaver = this,\n                type = blob.type,\n                blob_changed = false,\n                object_url,\n                target_view,\n                get_object_url = function() {\n                    var object_url = get_URL().createObjectURL(blob);\n                    deletion_queue.push(object_url);\n                    return object_url;\n                },\n                dispatch_all = function() {\n                    dispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n                },\n                // on any filesys errors revert to saving with object URLs\n                fs_error = function() {\n                    // don't create more object URLs than needed\n                    if (blob_changed || !object_url) {\n                        object_url = get_object_url(blob);\n                    }\n                    if (target_view) {\n                        target_view.location.href = object_url;\n                    } else {\n                        window.open(object_url, \"_blank\");\n                    }\n                    filesaver.readyState = filesaver.DONE;\n                    dispatch_all();\n                },\n                abortable = function(func) {\n                    return function() {\n                        if (filesaver.readyState !== filesaver.DONE) {\n                            return func.apply(this, arguments);\n                        }\n                        else {\n                            return null;\n                        }\n                    };\n                },\n                create_if_not_found = {create: true, exclusive: false},\n                slice;\n\n            filesaver.readyState = filesaver.INIT;\n\n            if (!name) {\n                name = \"download\";\n            }\n\n            if (can_use_save_link) {\n                object_url = get_object_url(blob);\n                save_link.href = object_url;\n                save_link.download = name;\n                click(save_link);\n                filesaver.readyState = filesaver.DONE;\n                dispatch_all();\n                return;\n            }\n            // Object and web filesystem URLs have a problem saving in Google Chrome when\n            // viewed in a tab, so I force save with application/octet-stream\n            // http://code.google.com/p/chromium/issues/detail?id=91158\n            if (view.chrome && type && type !== force_saveable_type) {\n                slice = blob.slice || blob.webkitSlice;\n                blob = slice.call(blob, 0, blob.size, force_saveable_type);\n                blob_changed = true;\n            }\n            // Since I can't be sure that the guessed media type will trigger a download\n            // in WebKit, I append .download to the filename.\n            // https://bugs.webkit.org/show_bug.cgi?id=65440\n            if (webkit_req_fs && name !== \"download\") {\n                name += \".download\";\n            }\n            if (type === force_saveable_type || webkit_req_fs) {\n                target_view = view;\n            }\n            if (!req_fs) {\n                fs_error();\n                return;\n            }\n            fs_min_size += blob.size;\n            req_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {\n                fs.root.getDirectory(\"saved\", create_if_not_found, abortable(function(dir) {\n                    var save = function() {\n                        dir.getFile(name, create_if_not_found, abortable(function(file) {\n                            file.createWriter(abortable(function(writer) {\n                                writer.onwriteend = function(event) {\n                                    target_view.location.href = file.toURL();\n                                    deletion_queue.push(file);\n                                    filesaver.readyState = filesaver.DONE;\n                                    dispatch(filesaver, \"writeend\", event);\n                                };\n                                writer.onerror = function() {\n                                    var error = writer.error;\n                                    if (error.code !== error.ABORT_ERR) {\n                                        fs_error();\n                                    }\n                                };\n                                \"writestart progress write abort\".split(\" \").forEach(function(event) {\n                                    writer[\"on\" + event] = filesaver[\"on\" + event];\n                                });\n                                writer.write(blob);\n                                filesaver.abort = function() {\n                                    writer.abort();\n                                    filesaver.readyState = filesaver.DONE;\n                                };\n                                filesaver.readyState = filesaver.WRITING;\n                            }), fs_error);\n                        }), fs_error);\n                    };\n                    dir.getFile(name, {create: false}, abortable(function(file) {\n                        // delete file if it already exists\n                        file.remove();\n                        save();\n                    }), abortable(function(ex) {\n                        if (ex.code === ex.NOT_FOUND_ERR) {\n                            save();\n                        } else {\n                            fs_error();\n                        }\n                    }));\n                }), fs_error);\n            }), fs_error);\n        }\n\n        function saveAs(blob, name) {\n            return new FileSaver(blob, name);\n        }\n\n        var FS_proto = FileSaver.prototype;\n\n        FS_proto.abort = function() {\n            var filesaver = this;\n            filesaver.readyState = filesaver.DONE;\n            dispatch(filesaver, \"abort\");\n        };\n\n        FS_proto.readyState = FS_proto.INIT = 0;\n        FS_proto.WRITING = 1;\n        FS_proto.DONE = 2;\n        FS_proto.error = null;\n        FS_proto.onwritestart = null;\n        FS_proto.onprogress = null;\n        FS_proto.onwrite = null;\n        FS_proto.onabort = null;\n        FS_proto.onerror = null;\n        FS_proto.onwriteend = null;\n\n        view.addEventListener(\"unload\", process_deletion_queue, false);\n\n        return saveAs;\n\n    }(self));\n\n    return saveAs;\n})();\n\nreturn easyrtc_ft;\n\n})); \n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/easyrtc_int.js":"/* global define, module, require, console, MediaStreamTrack, createIceServer, RTCIceCandidate, RTCPeerConnection, RTCSessionDescription */\n/*!\n  Script: easyrtc.js\n\n    Provides client side support for the EasyRTC framework.\n    See the easyrtc_client_api.md and easyrtc_client_tutorial.md\n    for more details.\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define(['easyrtc_lang', 'webrtc-adapter', 'socket.io'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory(require('easyrtc_lang'), require('webrtc-adapter'), require('socket.io'));\n    } else {\n        //Vanilla JS, ensure dependencies are loaded correctly\n        if (typeof window.io === 'undefined' || !window.io) {\n            throw new Error(\"easyrtc requires socket.io\");\n        }\n        root.easyrtc = factory(window.easyrtc_lang, window.adapter, window.io);\n  }\n}(this, function (easyrtc_lang, adapter, io, undefined) {\n\n\"use strict\";\n/**\n * @class Easyrtc.\n *\n * @returns {Easyrtc} the new easyrtc instance.\n *\n * @constructs Easyrtc\n */\nvar Easyrtc = function() {\n\n    var self = this;\n\n    function logDebug (message, obj) {\n        if (self.debugPrinter) {\n            self.debugPrinter(message, obj);\n        }\n    }\n\n    function isEmptyObj(obj) {\n        if (obj === null || obj === undefined) {\n            return true;\n        }\n        var key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /** @private */\n    var autoInitUserMedia = true;\n    /** @private */\n    var sdpLocalFilter = null;\n    /** @private */\n    var sdpRemoteFilter = null;\n    /** @private */\n    var iceCandidateFilter = null;\n    /** @private */\n    var iceConnectionStateChangeListener = null;\n    var signalingStateChangeListener = null;\n    /** @private */\n    var connectionOptions =  {\n        'connect timeout': 10000,\n        'force new connection': true\n    };\n\n    /** @private */\n    //\n    // this function replaces the deprecated MediaStream.stop method\n    //\n    function stopStream(stream) {\n       var i;\n       var tracks;\n\n       tracks = stream.getAudioTracks();\n       for( i = 0; i < tracks.length; i++ ) {\n           try {\n             tracks[i].stop();\n           } catch(err){}\n       }\n       tracks = stream.getVideoTracks();\n       for( i = 0; i < tracks.length; i++ ) {\n           try {\n             tracks[i].stop();\n           } catch(err){}\n       }\n\n       if (typeof stream.stop === 'function') {\n           try {\n             stream.stop();\n           } catch(err){}\n       }\n    }\n\n    /**\n     * Sets functions which filter sdp records before calling setLocalDescription or setRemoteDescription.\n     * This is advanced functionality which can break things, easily. See the easyrtc_rates.js file for a\n     * filter builder.\n     * @param {Function} localFilter a function that takes an sdp string and returns an sdp string.\n     * @param {Function} remoteFilter a function that takes an sdp string and returns an sdp string.\n     */\n    this.setSdpFilters = function(localFilter, remoteFilter) {\n        sdpLocalFilter = localFilter;\n        sdpRemoteFilter = remoteFilter;\n    };\n\n    /**\n     * Sets a function to warn about the peer connection closing.\n     *  @param {Function} handler: a function that gets an easyrtcid as an argument.\n     */\n    this.setPeerClosedListener = function( handler ) {\n       this.onPeerClosed = handler;\n    };\n\n    /**\n     * Sets a function to warn about the peer connection open.\n     *  @param {Function} handler: a function that gets an easyrtcid as an argument.\n     */\n    this.setPeerOpenListener = function( handler ) {\n       this.onPeerOpen = handler;\n    };\n\n    /**\n     * Sets a function to receive warnings about the peer connection\n     * failing. The peer connection may recover by itself.\n     *  @param {Function} failingHandler: a function that gets an easyrtcid as an argument.\n     *  @param {Function} recoveredHandler: a function that gets an easyrtcid as an argument.\n     */\n    this.setPeerFailingListener = function( failingHandler, recoveredHandler ) {\n       this.onPeerFailing = failingHandler;\n       this.onPeerRecovered = recoveredHandler;\n    };\n\n    /**\n     * Sets a function which filters IceCandidate records being sent or received.\n     *\n     * Candidate records can be received while they are being generated locally (before being\n     * sent to a peer), and after they are received by the peer. The filter receives two arguments, the candidate record and a boolean\n     * flag that is true for a candidate being received from another peer,\n     * and false for a candidate that was generated locally. The candidate record has the form:\n     *  {type: 'candidate', label: sdpMLineIndex, id: sdpMid, candidate: candidateString}\n     * The function should return one of the following: the input candidate record, a modified candidate record, or null (indicating that the\n     * candidate should be discarded).\n     * @param {Function} filter\n     */\n    this.setIceCandidateFilter = function(filter) {\n        iceCandidateFilter = filter;\n    };\n\n    /**\n     * Sets a function that listens on IceConnectionStateChange events.\n     *\n     * During ICE negotiation the peer connection fires the iceconnectionstatechange event.\n     * It is sometimes useful for the application to learn about these changes, especially if the ICE connection fails.\n     * The function should accept three parameters: the easyrtc id of the peer, the iceconnectionstatechange event target and the iceconnectionstate.\n     * @param {Function} listener\n     */\n    this.setIceConnectionStateChangeListener = function(listener) {\n       iceConnectionStateChangeListener = listener;\n    };\n\n    /**\n     * Sets a function that listens on SignalingStateChange events.\n     *\n     * During ICE negotiation the peer connection fires the signalingstatechange event.\n     * The function should accept three parameters: the easyrtc id of the peer, the signalingstatechange event target and the signalingstate.\n     * @param {Function} listener\n     */\n    this.setSignalingStateChangeListener = function(listener) {\n       signalingStateChangeListener = listener;\n    };\n\n    /**\n     * Controls whether a default local media stream should be acquired automatically during calls and accepts\n     * if a list of streamNames is not supplied. The default is true, which mimics the behaviour of earlier releases\n     * that didn't support multiple streams. This function should be called before easyrtc.call or before entering an\n     * accept  callback.\n     * @param {Boolean} flag true to allocate a default local media stream.\n     */\n    this.setAutoInitUserMedia = function(flag) {\n        autoInitUserMedia = !!flag;\n    };\n\n    /**\n     * This function performs a printf like formatting. It actually takes an unlimited\n     * number of arguments, the declared arguments arg1, arg2, arg3 are present just for\n     * documentation purposes.\n     * @param {String} format A string like \"abcd{1}efg{2}hij{1}.\"\n     * @param {String} arg1 The value that replaces {1}\n     * @param {String} arg2 The value that replaces {2}\n     * @param {String} arg3 The value that replaces {3}\n     * @returns {String} the formatted string.\n     */\n    this.format = function(format, arg1, arg2, arg3) {\n        var formatted = arguments[0];\n        for (var i = 1; i < arguments.length; i++) {\n            var regexp = new RegExp('\\\\{' + (i - 1) + '\\\\}', 'gi');\n            formatted = formatted.replace(regexp, arguments[i]);\n        }\n        return formatted;\n    };\n\n    /**\n     * This function checks if a socket is actually connected.\n     * @private\n     * @param {Object} socket a socket.io socket.\n     * @return true if the socket exists and is connected, false otherwise.\n    */\n    function isSocketConnected(socket) {\n       return socket && (\n            (socket.socket && socket.socket.connected) || socket.connected\n        );\n    }\n\n    /** @private */\n    //\n    // Maps a key to a language specific string using the easyrtc_lang map.\n    // Defaults to the key if the key can not be found, but outputs a warning in that case.\n    // This function is only used internally by easyrtc.js\n    //\n    var haveAudioVideo = {\n        audio: false,\n        video: false\n    };\n\n    /**\n     * @private\n     * @param {String} key\n     */\n    this.getConstantString = function(key) {\n        if (easyrtc_lang[key]) {\n            return easyrtc_lang[key];\n        }\n        else {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Could not find key='\" + key + \"' in easyrtc_lang\");\n            return key;\n        }\n    };\n\n    /** @private */\n    //\n    // this is a list of the events supported by the generalized event listener.\n    //\n    var allowedEvents = {\n        roomOccupant: true,  // this receives the list of everybody in any room you belong to\n        roomOccupants: true  // this receives a {roomName:..., occupants:...} value for a specific room\n    };\n\n    /** @private */\n    //\n    // A map of eventListeners. The key is the event type.\n    //\n    var eventListeners = {};\n\n    /**\n     * This function checks if an attempt was made to add an event listener or\n     * or emit an unlisted event, since such is typically a typo.\n     * @private\n     * @param {String} eventName\n     * @param {String} callingFunction the name of the calling function.\n     */\n    function event(eventName, callingFunction) {\n        if (typeof eventName !== 'string') {\n            self.showError(self.errCodes.DEVELOPER_ERR, callingFunction + \" called without a string as the first argument\");\n            throw \"developer error\";\n        }\n        if (!allowedEvents[eventName]) {\n            self.showError(self.errCodes.DEVELOPER_ERR, callingFunction + \" called with a bad event name = \" + eventName);\n            throw \"developer error\";\n        }\n    }\n\n    /**\n     * Adds an event listener for a particular type of event.\n     * Currently the only eventName supported is \"roomOccupant\".\n     * @param {String} eventName the type of the event\n     * @param {Function} eventListener the function that expects the event.\n     * The eventListener gets called with the eventName as it's first argument, and the event\n     * data as it's second argument.\n     * @returns {void}\n     */\n    this.addEventListener = function(eventName, eventListener) {\n        event(eventName, \"addEventListener\");\n        if (typeof eventListener !== 'function') {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"addEventListener called with a non-function for second argument\");\n            throw \"developer error\";\n        }\n        //\n        // remove the event listener if it's already present so we don't end up with two copies\n        //\n        self.removeEventListener(eventName, eventListener);\n        if (!eventListeners[eventName]) {\n            eventListeners[eventName] = [];\n        }\n        eventListeners[eventName][eventListeners[eventName].length] = eventListener;\n    };\n\n    /**\n     * Removes an event listener.\n     * @param {String} eventName\n     * @param {Function} eventListener\n     */\n    this.removeEventListener = function(eventName, eventListener) {\n        event(eventName, \"removeEventListener\");\n        var listeners = eventListeners[eventName];\n        var i = 0;\n        if (listeners) {\n            for (i = 0; i < listeners.length; i++) {\n                if (listeners[i] === eventListener) {\n                    if (i < listeners.length - 1) {\n                        listeners[i] = listeners[listeners.length - 1];\n                    }\n                    listeners.length = listeners.length - 1;\n                }\n            }\n        }\n    };\n\n    /**\n     * Emits an event, or in other words, calls all the eventListeners for a\n     * particular event.\n     * @param {String} eventName\n     * @param {Object} eventData\n     */\n    this.emitEvent = function(eventName, eventData) {\n        event(eventName, \"emitEvent\");\n        var listeners = eventListeners[eventName];\n        var i = 0;\n        if (listeners) {\n            for (i = 0; i < listeners.length; i++) {\n                listeners[i](eventName, eventData);\n            }\n        }\n    };\n\n    /**\n     * Error codes that the EasyRTC will use in the errorCode field of error object passed\n     * to error handler set by easyrtc.setOnError. The error codes are short printable strings.\n     * @type Object\n     */\n    this.errCodes = {\n        BAD_NAME: \"BAD_NAME\", // a user name wasn't of the desired form\n        CALL_ERR: \"CALL_ERR\", // something went wrong creating the peer connection\n        DEVELOPER_ERR: \"DEVELOPER_ERR\", // the developer using the EasyRTC library made a mistake\n        SYSTEM_ERR: \"SYSTEM_ERR\", // probably an error related to the network\n        CONNECT_ERR: \"CONNECT_ERR\", // error occurred when trying to create a connection\n        MEDIA_ERR: \"MEDIA_ERR\", // unable to get the local media\n        MEDIA_WARNING: \"MEDIA_WARNING\", // didn't get the desired resolution\n        INTERNAL_ERR: \"INTERNAL_ERR\",\n        PEER_GONE: \"PEER_GONE\", // peer doesn't exist\n        ALREADY_CONNECTED: \"ALREADY_CONNECTED\",\n        BAD_CREDENTIAL: \"BAD_CREDENTIAL\",\n        ICECANDIDATE_ERR: \"ICECANDIDATE_ERR\",\n        NOVIABLEICE: \"NOVIABLEICE\",\n        SIGNAL_ERR: \"SIGNAL_ERR\"\n    };\n\n    this.apiVersion = \"1.1.0\";\n\n    /** Most basic message acknowledgment object */\n    this.ackMessage = {msgType: \"ack\"};\n\n    /** Regular expression pattern for user ids. This will need modification to support non US character sets */\n    this.usernameRegExp = /^(.){1,64}$/;\n\n    /** Default cookieId name */\n    this.cookieId = \"easyrtcsid\";\n\n    /** @private */\n    var username = null;\n\n    /** Flag to indicate that user is currently logging out */\n    this.loggingOut = false;\n\n    /** @private */\n    this.disconnecting = false;\n\n    /** @private */\n    //\n    // A map of ids to local media streams.\n    //\n    var namedLocalMediaStreams = {};\n\n    /** @private */\n    var sessionFields = [];\n\n    /** @private */\n    var receivedMediaConstraints = {};\n\n    /**\n     * Control whether the client requests audio from a peer during a call.\n     * Must be called before the call to have an effect.\n     * @param value - true to receive audio, false otherwise. The default is true.\n     */\n    this.enableAudioReceive = function(value) {\n        if (\n            adapter && adapter.browserDetails &&\n             (adapter.browserDetails.browser === \"firefox\" || adapter.browserDetails.browser === \"edge\")\n        ) {\n            receivedMediaConstraints.offerToReceiveAudio = value;\n        }\n        else {\n            receivedMediaConstraints.mandatory = receivedMediaConstraints.mandatory || {};\n            receivedMediaConstraints.mandatory.OfferToReceiveAudio = value;\n        }\n    };\n\n    /**\n     * Control whether the client requests video from a peer during a call.\n     * Must be called before the call to have an effect.\n     * @param value - true to receive video, false otherwise. The default is true.\n     */\n    this.enableVideoReceive = function(value) {\n        if (\n            adapter && adapter.browserDetails &&\n             (adapter.browserDetails.browser === \"firefox\" || adapter.browserDetails.browser === \"edge\")\n        ) {\n           receivedMediaConstraints.offerToReceiveVideo = value;\n        }\n        else {\n            receivedMediaConstraints.mandatory = receivedMediaConstraints.mandatory || {};\n            receivedMediaConstraints.mandatory.OfferToReceiveVideo = value;\n        }\n    };\n\n    // True by default\n    // TODO should not be true by default only for legacy\n    this.enableAudioReceive(true);\n    this.enableVideoReceive(true);\n\n    function getSourceList(callback, sourceType) {\n        navigator.mediaDevices.enumerateDevices().then(\n             function(values) {\n                var results = [];\n                for (var i = 0; i < values.length; i++) {\n                    var source = values[i];\n                    if (source.kind === sourceType) {\n                        source.id = source.deviceId; //backwards compatibility\n                        results.push(source);\n                    }\n                }\n                callback(results);\n             }\n          ).catch(\n            function(reason) {\n               logDebug(\"Unable to enumerate devices (\" + reason + \")\");\n            }\n        );\n    }\n\n    /**\n     * Sets the audio output device of a Video object. \n     * That is to say, this controls what speakers get the sound.\n     * In theory, this works on Chrome but probably doesn't work anywhere else yet.\n     * This code was cribbed from https://webrtc.github.io/samples/src/content/devices/multi/.\n     *  @param {Object} element an HTML5 video element\n     *  @param {String} sinkId a deviceid from getAudioSinkList\n     */\n    this.setAudioOutput = function(element, sinkId) {\n       if (typeof element.sinkId !== 'undefined') {\n          element.setSinkId(sinkId)\n          .then(function() {\n            logDebug('Success, audio output device attached: ' + sinkId + ' to ' +\n                'element with ' + element.title + ' as source.');\n          })\n          .catch(function(error) {\n            var errorMessage = error;\n            if (error.name === 'SecurityError') {\n              errorMessage = 'You need to use HTTPS for selecting audio output ' +\n                  'device: ' + error;\n            }\n            logDebug(errorMessage);\n          });\n       } else {\n          logDebug('Browser does not support output device selection.');\n       }\n    };\n\n    /**\n     * Gets a list of the available audio sinks (ie, speakers)\n     * @param {Function} callback receives list of {deviceId:String, groupId:String, label:String, kind:\"audio\"}\n     * @example  easyrtc.getAudioSinkList( function(list) {\n     *               var i;\n     *               for( i = 0; i < list.length; i++ ) {\n     *                   console.log(\"label=\" + list[i].label + \", id= \" + list[i].deviceId);\n     *               }\n     *          });\n     */\n    this.getAudioSinkList = function(callback){\n       getSourceList(callback, \"audiooutput\");\n    };\n    /**\n     * Gets a list of the available audio sources (ie, microphones)\n     * @param {Function} callback receives list of {deviceId:String, groupId:String, label:String, kind:\"audio\"}\n     * @example  easyrtc.getAudioSourceList( function(list) {\n     *               var i;\n     *               for( i = 0; i < list.length; i++ ) {\n     *                   console.log(\"label=\" + list[i].label + \", id= \" + list[i].deviceId);\n     *               }\n     *          });\n     */\n    this.getAudioSourceList = function(callback){\n       getSourceList(callback, \"audioinput\");\n    };\n\n    /**\n     * Gets a list of the available video sources (ie, cameras)\n     * @param {Function} callback receives list of {deviceId:String, groupId:String, label:String, kind:\"video\"}\n     * @example  easyrtc.getVideoSourceList( function(list) {\n     *               var i;\n     *               for( i = 0; i < list.length; i++ ) {\n     *                   console.log(\"label=\" + list[i].label + \", id= \" + list[i].deviceId);\n     *               }\n     *          });\n     */\n    this.getVideoSourceList = function(callback) {\n       getSourceList(callback, \"videoinput\");\n    };\n\n\n    /** @private */\n    var dataChannelName = \"dc\";\n    /** @private */\n    var oldConfig = {};\n    /** @private */\n    var offersPending = {};\n    /** @private */\n    var credential = null;\n\n    /** @private */\n    self.audioEnabled = true;\n    /** @private */\n    self.videoEnabled = true;\n    /** @private */\n    this.debugPrinter = null;\n    /** Your easyrtcid */\n    this.myEasyrtcid = \"\";\n\n    /** The height of the local media stream video in pixels. This field is set an indeterminate period\n     * of time after easyrtc.initMediaSource succeeds. Note: in actuality, the dimensions of a video stream\n     * change dynamically in response to external factors, you should check the videoWidth and videoHeight attributes\n     * of your video objects before you use them for pixel specific operations.\n     */\n    this.nativeVideoHeight = 0;\n\n    /** This constant determines how long (in bytes) a message can be before being split in chunks of that size.\n    * This is because there is a limitation of the length of the message you can send on the\n    * data channel between browsers.\n    */\n    this.maxP2PMessageLength = 1000;\n\n    /** The width of the local media stream video in pixels. This field is set an indeterminate period\n     * of time after easyrtc.initMediaSource succeeds.  Note: in actuality, the dimensions of a video stream\n     * change dynamically in response to external factors, you should check the videoWidth and videoHeight attributes\n     * of your video objects before you use them for pixel specific operations.\n     */\n    this.nativeVideoWidth = 0;\n\n    /** The rooms the user is in. This only applies to room oriented applications and is set at the same\n     * time a token is received.\n     */\n    this.roomJoin = {};\n\n    /** Checks if the supplied string is a valid user name (standard identifier rules)\n     * @param {String} name\n     * @return {Boolean} true for a valid user name\n     * @example\n     *    var name = document.getElementById('nameField').value;\n     *    if( !easyrtc.isNameValid(name)){\n     *        console.error(\"Bad user name\");\n     *    }\n     */\n    this.isNameValid = function(name) {\n        return self.usernameRegExp.test(name);\n    };\n\n    /**\n     * This function sets the name of the cookie that client side library will look for\n     * and transmit back to the server as it's easyrtcsid in the first message.\n     * @param {String} cookieId\n     */\n    this.setCookieId = function(cookieId) {\n        self.cookieId = cookieId;\n    };\n\n    /** @private */\n    this._desiredVideoProperties = {}; // default camera\n\n    /**\n     * Specify particular video source. Call this before you call easyrtc.initMediaSource().\n     * @param {String} videoSrcId is a id value from one of the entries fetched by getVideoSourceList. null for default.\n     * @example easyrtc.setVideoSource( videoSrcId);\n     */\n    this.setVideoSource = function(videoSrcId) {\n        self._desiredVideoProperties.videoSrcId = videoSrcId;\n        delete self._desiredVideoProperties.screenCapture;\n    };\n\n    /** @private */\n    this._desiredAudioProperties = {}; // default camera\n\n    /**\n     * Specify particular video source. Call this before you call easyrtc.initMediaSource().\n     * @param {String} audioSrcId is a id value from one of the entries fetched by getAudioSourceList. null for default.\n     * @example easyrtc.setAudioSource( audioSrcId);\n     */\n    this.setAudioSource = function(audioSrcId) {\n        self._desiredAudioProperties.audioSrcId = audioSrcId;\n    };\n\n    /** This function is used to set the dimensions of the local camera, usually to get HD.\n     *  If called, it must be called before calling easyrtc.initMediaSource (explicitly or implicitly).\n     *  assuming it is supported. If you don't pass any parameters, it will use default camera dimensions.\n     * @param {Number} width in pixels\n     * @param {Number} height in pixels\n     * @param {number} frameRate is optional\n     * @example\n     *    easyrtc.setVideoDims(1280,720);\n     * @example\n     *    easyrtc.setVideoDims();\n     */\n    this.setVideoDims = function(width, height, frameRate) {\n        self._desiredVideoProperties.width = width;\n        self._desiredVideoProperties.height = height;\n        if (frameRate !== undefined) {\n            self._desiredVideoProperties.frameRate = frameRate;\n        }\n    };\n\n    /** This function requests that screen capturing be used to provide the local media source\n     * rather than a webcam. If you have multiple screens, they are composited side by side.\n     * Note: this functionality is not supported by Firefox, has to be called before calling initMediaSource (or easyApp), we don't currently supply a way to\n     * turn it off (once it's on), only works if the website is hosted SSL (https), and the image quality is rather\n     * poor going across a network because it tries to transmit so much data. In short, screen sharing\n     * through WebRTC isn't worth using at this point, but it is provided here so people can try it out.\n     * @example\n     *    easyrtc.setScreenCapture();\n     * @deprecated: use easyrtc.initScreenCapture (same parameters as easyrtc.initMediaSource.\n     */\n    this.setScreenCapture = function(enableScreenCapture) {\n        self._desiredVideoProperties.screenCapture = (enableScreenCapture !== false);\n    };\n\n    /**\n     * Builds the constraint object passed to getUserMedia.\n     * @returns {Object} mediaConstraints\n     */\n    self.getUserMediaConstraints = function() {\n        var constraints = {};\n        //\n        // _presetMediaConstraints allow you to provide your own constraints to be used\n        // with initMediaSource.\n        //\n        if (self._presetMediaConstraints) {\n            constraints = self._presetMediaConstraints;\n            delete self._presetMediaConstraints;\n            return constraints;\n        }\n        else if (self._desiredVideoProperties.screenCapture) {\n            return {\n                video: {\n                    mandatory: {\n                        chromeMediaSource: 'screen',\n                        maxWidth: screen.width,\n                        maxHeight: screen.height,\n                        minWidth: screen.width,\n                        minHeight: screen.height,\n                        minFrameRate: 1,\n                        maxFrameRate: 5},\n                    optional: []\n                },\n                audio: false\n            };\n        }\n        else if (!self.videoEnabled) {\n            constraints.video = false;\n        }\n        else {\n\n            // Tested Firefox 49 and MS Edge require minFrameRate and maxFrameRate \n            // instead max,min,ideal that cause GetUserMedia failure.\n            // Until confirmed both browser support idea,max and min we need this.\n            if (\n                adapter && adapter.browserDetails &&\n                    (adapter.browserDetails.browser === \"firefox\" || adapter.browserDetails.browser === \"edge\")\n            ) {\n                constraints.video = {};\n                if (self._desiredVideoProperties.width) {\n                    constraints.video.width = self._desiredVideoProperties.width;\n                }\n                if (self._desiredVideoProperties.height) {\n                    constraints.video.height = self._desiredVideoProperties.height;\n                }\n                if (self._desiredVideoProperties.frameRate) {\n                    constraints.video.frameRate = { \n                        minFrameRate: self._desiredVideoProperties.frameRate,\n                        maxFrameRate: self._desiredVideoProperties.frameRate\n                    };\n                }\n                if (self._desiredVideoProperties.videoSrcId) {\n                    constraints.video.deviceId = self._desiredVideoProperties.videoSrcId;\n                }\n\n            // chrome and opera\n            } else { \n                constraints.video = {};\n                if (self._desiredVideoProperties.width) {\n                     constraints.video.width = { \n                        max: self._desiredVideoProperties.width,\n                        min : self._desiredVideoProperties.width,\n                        ideal : self._desiredVideoProperties.width \n                     };\n                }\n                if (self._desiredVideoProperties.height) {\n                    constraints.video.height = {\n                        max: self._desiredVideoProperties.height,\n                        min: self._desiredVideoProperties.height,\n                        ideal: self._desiredVideoProperties.height\n                    };\n                }\n                if (self._desiredVideoProperties.frameRate) {\n                    constraints.video.frameRate = {\n                        max: self._desiredVideoProperties.frameRate,\n                        ideal: self._desiredVideoProperties.frameRate\n                    };\n                }\n                if (self._desiredVideoProperties.videoSrcId) {\n                    constraints.video.deviceId = self._desiredVideoProperties.videoSrcId;\n                }\n                // hack for opera\n                if (Object.keys(constraints.video).length === 0 ) {\n                    constraints.video = true;\n                }\n            }\n        }\n\n        if (!self.audioEnabled) {\n            constraints.audio = false;\n        }\n        else {\n            if (adapter && adapter.browserDetails && adapter.browserDetails.browser === \"firefox\") {\n                constraints.audio = {};\n                if (self._desiredAudioProperties.audioSrcId) {\n                    constraints.audio.deviceId = self._desiredAudioProperties.audioSrcId;\n                }\n            }\n            else { // chrome and opera\n                constraints.audio = {mandatory: {}, optional: []};\n                if (self._desiredAudioProperties.audioSrcId) {\n                    constraints.audio.optional = constraints.audio.optional || [];\n                    constraints.audio.optional.push({deviceId: self._desiredAudioProperties.audioSrcId});\n                }\n            }\n        }\n        return constraints;\n    };\n\n    /** Set the application name. Applications can only communicate with other applications\n     * that share the same API Key and application name. There is no predefined set of application\n     * names. Maximum length is\n     * @param {String} name\n     * @example\n     *    easyrtc.setApplicationName('simpleAudioVideo');\n     */\n    this.setApplicationName = function(name) {\n        self.applicationName = name;\n    };\n\n    /** Enable or disable logging to the console.\n     * Note: if you want to control the printing of debug messages, override the\n     *    easyrtc.debugPrinter variable with a function that takes a message string as it's argument.\n     *    This is exactly what easyrtc.enableDebug does when it's enable argument is true.\n     * @param {Boolean} enable - true to turn on debugging, false to turn off debugging. Default is false.\n     * @example\n     *    easyrtc.enableDebug(true);\n     */\n    this.enableDebug = function(enable) {\n        if (enable) {\n            self.debugPrinter = function(message, obj) {\n                var now = new Date().toISOString();\n                var stackString = new Error().stack;\n                var srcLine = \"location unknown\";\n                if (stackString) {\n                    var stackFrameStrings = stackString.split('\\n');\n                    srcLine = \"\";\n                    if (stackFrameStrings.length >= 5) {\n                        srcLine = stackFrameStrings[4];\n                    }\n                }\n\n                console.log(\"debug \" + now + \" : \" + message + \" [\" + srcLine + \"]\");\n\n                if (typeof obj !== 'undefined') {\n                    console.log(\"debug \" + now + \" : \", obj);\n                }\n            };\n        }\n        else {\n            self.debugPrinter = null;\n        }\n    };\n\n    /**\n     * Determines if the local browser supports WebRTC GetUserMedia (access to camera and microphone).\n     * @returns {Boolean} True getUserMedia is supported.\n     */\n    this.supportsGetUserMedia = function() {\n        return typeof navigator.getUserMedia !== 'undefined';\n    };\n\n    /**\n     * Determines if the local browser supports WebRTC Peer connections to the extent of being able to do video chats.\n     * @returns {Boolean} True if Peer connections are supported.\n     */\n    this.supportsPeerConnections = function() {\n        return typeof RTCPeerConnection !== 'undefined';\n    };\n\n    /** Determines whether the current browser supports the new data channels.\n     * EasyRTC will not open up connections with the old data channels.\n     * @returns {Boolean}\n     */\n    this.supportsDataChannels = function() {\n\n        var hasCreateDataChannel = false;\n\n        if (self.supportsPeerConnections()) {\n            try {\n                var peer = new RTCPeerConnection({iceServers: []}, {});\n                hasCreateDataChannel = typeof peer.createDataChannel !== 'undefined';\n                peer.close();\n            }\n            catch (err) {\n                // Ignore possible RTCPeerConnection.close error\n                // hasCreateDataChannel should reflect the feature state still.\n            }\n        }\n\n        return hasCreateDataChannel;\n    };\n\n    /** @private */\n    //\n    // Experimental function to determine if statistics gathering is supported.\n    //\n    this.supportsStatistics = function() {\n\n        var hasGetStats = false;\n\n        if (self.supportsPeerConnections()) {\n            try {\n                var peer = new RTCPeerConnection({iceServers: []}, {});\n                hasGetStats = typeof peer.getStats !== 'undefined';\n                peer.close();\n            }\n            catch (err) {\n                // Ingore possible RTCPeerConnection.close error\n                // hasCreateDataChannel should reflect the feature state still.\n            }\n        }\n\n        return hasGetStats;\n    };\n\n    /** @private\n     * @param {Array} pc_config ice configuration array\n     * @param {Object} optionalStuff peer constraints.\n     */\n    this.createRTCPeerConnection = function(pc_config, optionalStuff) {\n        if (self.supportsPeerConnections()) {\n            return new RTCPeerConnection(pc_config, optionalStuff);\n        }\n        else {\n            throw \"Your browser doesn't support webRTC (RTCPeerConnection)\";\n        }\n    };\n\n    //\n    // this should really be part of adapter.js\n    // Versions of chrome < 31 don't support reliable data channels transport.\n    // Firefox does.\n    //\n    this.getDatachannelConstraints = function() {\n        return {\n            reliable: adapter && adapter.browserDetails &&\n                adapter.browserDetails.browser !== \"chrome\" &&\n                    adapter.browserDetails.version < 31\n        };\n    };\n\n    /** @private */\n    haveAudioVideo = {\n        audio: false,\n        video: false\n    };\n    /** @private */\n    var dataEnabled = false;\n    /** @private */\n    var serverPath = null; // this was null, but that was generating an error.\n    /** @private */\n    var roomOccupantListener = null;\n    /** @private */\n    var onDataChannelOpen = null;\n    /** @private */\n    var onDataChannelClose = null;\n    /** @private */\n    var lastLoggedInList = {};\n    /** @private */\n    var receivePeer = {msgTypes: {}};\n    /** @private */\n    var receiveServerCB = null;\n    /** @private */\n    // dummy placeholder for when we aren't connected\n    var updateConfigurationInfo = function() { };\n    /** @private */\n    //\n    //\n    //  peerConns is a map from caller names to the below object structure\n    //     {  startedAV: boolean,  -- true if we have traded audio/video streams\n    //        dataChannelS: RTPDataChannel for outgoing messages if present\n    //        dataChannelR: RTPDataChannel for incoming messages if present\n    //        dataChannelReady: true if the data channel can be used for sending yet\n    //        connectTime: timestamp when the connection was started\n    //        sharingAudio: true if audio is being shared\n    //        sharingVideo: true if video is being shared\n    //        cancelled: temporarily true if a connection was cancelled by the peer asking to initiate it\n    //        candidatesToSend: SDP candidates temporarily queued\n    //        streamsAddedAcks: ack callbacks waiting for stream received messages\n    //        pc: RTCPeerConnection\n    //        mediaStream: mediaStream\n    //     function callSuccessCB(string) - see the easyrtc.call documentation.\n    //        function callFailureCB(errorCode, string) - see the easyrtc.call documentation.\n    //        function wasAcceptedCB(boolean,string) - see the easyrtc.call documentation.\n    //     }\n    //\n    var peerConns = {};\n    /** @private */\n    //\n    // a map keeping track of whom we've requested a call with so we don't try to\n    // call them a second time before they've responded.\n    //\n    var acceptancePending = {};\n\n    /** @private\n     * @param {string} caller\n     * @param {Function} helper\n     */\n    this.acceptCheck = function(caller, helper) {\n        helper(true);\n    };\n\n    /** @private\n     * @param {string} easyrtcid\n     * @param {HTMLMediaStream} stream\n     */\n    this.streamAcceptor = function(easyrtcid, stream) {\n    };\n\n    /** @private\n     * @param {string} easyrtcid\n     */\n    this.onStreamClosed = function(easyrtcid) {\n    };\n\n    /** @private\n     * @param {string} easyrtcid\n     */\n    this.callCancelled = function(easyrtcid) {\n    };\n\n    /**\n     * This function gets the raw RTCPeerConnection for a given easyrtcid\n     * @param {String} easyrtcid\n     * @param {RTCPeerConnection} for that easyrtcid, or null if no connection exists\n     * Submitted by Fabian Bernhard.\n     */\n    this.getPeerConnectionByUserId = function(userId) {\n        if (peerConns && peerConns[userId]) {\n            return peerConns[userId].pc;\n        }\n        return null;\n    };\n\n\n    var chromeStatsFilter = [\n        {\n            \"googTransmitBitrate\": \"transmitBitRate\",\n            \"googActualEncBitrate\": \"encodeRate\",\n            \"googAvailableSendBandwidth\": \"availableSendRate\"\n        },\n        {\n            \"googCodecName\": \"audioCodec\",\n            \"googTypingNoiseState\": \"typingNoise\",\n            \"packetsSent\": \"audioPacketsSent\",\n            \"bytesSent\": \"audioBytesSent\"\n        },\n        {\n            \"googCodecName\": \"videoCodec\",\n            \"googFrameRateSent\": \"outFrameRate\",\n            \"packetsSent\": \"videoPacketsSent\",\n            \"bytesSent\": \"videoBytesSent\"\n        },\n        {\n            \"packetsLost\": \"videoPacketsLost\",\n            \"packetsReceived\": \"videoPacketsReceived\",\n            \"bytesReceived\": \"videoBytesReceived\",\n            \"googFrameRateOutput\": \"frameRateOut\"\n        },\n        {\n            \"packetsLost\": \"audioPacketsLost\",\n            \"packetsReceived\": \"audioPacketsReceived\",\n            \"bytesReceived\": \"audioBytesReceived\",\n            \"audioOutputLevel\": \"audioOutputLevel\"\n        },\n        {\n            \"googRemoteAddress\": \"remoteAddress\",\n            \"googActiveConnection\": \"activeConnection\"\n        },\n        {\n            \"audioInputLevel\": \"audioInputLevel\"\n        }\n    ];\n\n    var firefoxStatsFilter = {\n        \"outboundrtp_audio.bytesSent\": \"audioBytesSent\",\n        \"outboundrtp_video.bytesSent\": \"videoBytesSent\",\n        \"inboundrtp_video.bytesReceived\": \"videoBytesReceived\",\n        \"inboundrtp_audio.bytesReceived\": \"audioBytesReceived\",\n        \"outboundrtp_audio.packetsSent\": \"audioPacketsSent\",\n        \"outboundrtp_video.packetsSent\": \"videoPacketsSent\",\n        \"inboundrtp_video.packetsReceived\": \"videoPacketsReceived\",\n        \"inboundrtp_audio.packetsReceived\": \"audioPacketsReceived\",\n        \"inboundrtp_video.packetsLost\": \"videoPacketsLost\",\n        \"inboundrtp_audio.packetsLost\": \"audioPacketsLost\",\n        \"firefoxRemoteAddress\": \"remoteAddress\"\n    };\n\n    var standardStatsFilter = adapter && adapter.browserDetails &&\n                adapter.browserDetails.browser === \"firefox\" ? firefoxStatsFilter : chromeStatsFilter;\n\n    function getFirefoxPeerStatistics(peerId, callback, filter) {\n\n\n        if (!peerConns[peerId]) {\n            callback(peerId, {\"connected\": false});\n        }\n        else if (peerConns[peerId].pc.getStats) {\n            peerConns[peerId].pc.getStats(null, function(stats) {\n                var items = {};\n                var candidates = {};\n                var activeId = null;\n                var srcKey;\n                //\n                // the stats objects has a group of entries. Each entry is either an rtcp, rtp entry\n                // or a candidate entry.\n                //\n                if (stats) {\n                    stats.forEach(function(entry) {\n                        var majorKey;\n                        var subKey;\n                        if (entry.type.match(/boundrtp/)) {\n                            if (entry.id.match(/audio/)) {\n                                majorKey = entry.type + \"_audio\";\n                            }\n                            else if (entry.id.match(/video/)) {\n                                majorKey = entry.type + \"_video\";\n                            }\n                            else {\n                                return;\n                            }\n                            for (subKey in entry) {\n                                if (entry.hasOwnProperty(subKey)) {\n                                    items[majorKey + \".\" + subKey] = entry[subKey];\n                                }\n                            }\n                        }\n                        else {\n                            if( entry.hasOwnProperty(\"ipAddress\") && entry.id) {\n                                candidates[entry.id] = entry.ipAddress + \":\" +\n                                      entry.portNumber;\n                            }\n                            else if( entry.hasOwnProperty(\"selected\") &&\n                                     entry.hasOwnProperty(\"remoteCandidateId\") &&\n                                     entry.selected ) {\n                                activeId =  entry.remoteCandidateId;\n                            }\n                        }\n                    });\n                }\n\n                if( activeId ) {\n                    items[\"firefoxRemoteAddress\"] = candidates[activeId];\n                }\n                if (!filter) {\n                    callback(peerId, items);\n                }\n                else {\n                    var filteredItems = {};\n                    for (srcKey in filter) {\n                        if (filter.hasOwnProperty(srcKey) && items.hasOwnProperty(srcKey)) {\n                            filteredItems[ filter[srcKey]] = items[srcKey];\n                        }\n                    }\n                    callback(peerId, filteredItems);\n                }\n            },\n                    function(error) {\n                        logDebug(\"unable to get statistics\");\n                    });\n        }\n        else {\n            callback(peerId, {\"statistics\": self.getConstantString(\"statsNotSupported\")});\n        }\n    }\n\n    function getChromePeerStatistics(peerId, callback, filter) {\n\n        if (!peerConns[peerId]) {\n            callback(peerId, {\"connected\": false});\n        }\n        else if (peerConns[peerId].pc.getStats) {\n\n            peerConns[peerId].pc.getStats(function(stats) {\n\n                var localStats = {};\n                var part, parts = stats.result();\n                var i, j;\n                var itemKeys;\n                var itemKey;\n                var names;\n                var userKey;\n                var partNames = [];\n                var partList;\n                var bestBytes = 0;\n                var bestI;\n                var turnAddress = null;\n                var hasActive, curReceived;\n                var localAddress, remoteAddress;\n                if (!filter) {\n                    for (i = 0; i < parts.length; i++) {\n                        names = parts[i].names();\n                        for (j = 0; j < names.length; j++) {\n                            itemKey = names[j];\n                            localStats[parts[i].id + \".\" + itemKey] = parts[i].stat(itemKey);\n                        }\n                    }\n                }\n                else {\n                    for (i = 0; i < parts.length; i++) {\n                        partNames[i] = {};\n                        //\n                        // convert the names into a dictionary\n                        //\n                        names = parts[i].names();\n                        for (j = 0; j < names.length; j++) {\n                            partNames[i][names[j]] = true;\n                        }\n\n                        //\n                        // a chrome-firefox connection results in several activeConnections.\n                        // we only want one, so we look for the one with the most data being received on it.\n                        //\n                        if (partNames[i].googRemoteAddress && partNames[i].googActiveConnection) {\n                            hasActive = parts[i].stat(\"googActiveConnection\");\n                            if (hasActive === true || hasActive === \"true\") {\n                                curReceived = parseInt(parts[i].stat(\"bytesReceived\")) +\n                                        parseInt(parts[i].stat(\"bytesSent\"));\n                                if (curReceived > bestBytes) {\n                                    bestI = i;\n                                    bestBytes = curReceived;\n                                }\n                            }\n                        }\n                    }\n\n                    for (i = 0; i < parts.length; i++) {\n                        //\n                        // discard info from any inactive connection.\n                        //\n                        if (partNames[i].googActiveConnection) {\n                            if (i !== bestI) {\n                                partNames[i] = {};\n                            }\n                            else {\n                                localAddress = parts[i].stat(\"googLocalAddress\").split(\":\")[0];\n                                remoteAddress = parts[i].stat(\"googRemoteAddress\").split(\":\")[0];\n                                if (self.isTurnServer(localAddress)) {\n                                    turnAddress = localAddress;\n                                }\n                                else if (self.isTurnServer(remoteAddress)) {\n                                    turnAddress = remoteAddress;\n                                }\n                            }\n                        }\n                    }\n\n                    for (i = 0; i < filter.length; i++) {\n                        itemKeys = filter[i];\n                        partList = [];\n                        part = null;\n                        for (j = 0; j < parts.length; j++) {\n                            var fullMatch = true;\n                            for (itemKey in itemKeys) {\n                                if (itemKeys.hasOwnProperty(itemKey) && !partNames[j][itemKey]) {\n                                    fullMatch = false;\n                                    break;\n                                }\n                            }\n                            if (fullMatch && parts[j]) {\n                                partList.push(parts[j]);\n                            }\n                        }\n                        if (partList.length === 1) {\n                            for (j = 0; j < partList.length; j++) {\n                                part = partList[j];\n                                if (part) {\n                                    for (itemKey in itemKeys) {\n                                        if (itemKeys.hasOwnProperty(itemKey)) {\n                                            userKey = itemKeys[itemKey];\n                                            localStats[userKey] = part.stat(itemKey);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else if (partList.length > 1) {\n                            for (itemKey in itemKeys) {\n                                if (itemKeys.hasOwnProperty(itemKey)) {\n                                    localStats[itemKeys[itemKey]] = [];\n                                }\n                            }\n                            for (j = 0; j < partList.length; j++) {\n                                part = partList[j];\n                                    for (itemKey in itemKeys) {\n                                        if (itemKeys.hasOwnProperty(itemKey)) {\n                                            userKey = itemKeys[itemKey];\n                                            localStats[userKey].push(part.stat(itemKey));\n                                        }\n                                    }\n                            }\n                        }\n                    }\n                }\n\n                if (localStats.remoteAddress && turnAddress) {\n                    localStats.remoteAddress = turnAddress;\n                }\n                callback(peerId, localStats);\n            });\n        }\n        else {\n            callback(peerId, {\"statistics\": self.getConstantString(\"statsNotSupported\")});\n        }\n    }\n\n    /**\n     * This function gets the statistics for a particular peer connection.\n     * @param {String} easyrtcid\n     * @param {Function} callback gets the easyrtcid for the peer and a map of {userDefinedKey: value}. If there is no peer connection to easyrtcid, then the map will\n     *  have a value of {connected:false}.\n     * @param {Object} filter depends on whether Chrome or Firefox is used. See the default filters for guidance.\n     * It is still experimental.\n     */\n    this.getPeerStatistics = function(easyrtcid, callback, filter) {\n        if (\n            adapter && adapter.browserDetails &&\n                adapter.browserDetails.browser === \"firefox\"\n        ) {\n            getFirefoxPeerStatistics(easyrtcid, callback, filter);\n        }\n        else {\n            getChromePeerStatistics(easyrtcid, callback, filter);\n        }\n    };\n\n    /**\n     * @private\n     * @param roomName\n     * @param fields\n     */\n    function sendRoomApiFields(roomName, fields) {\n        var fieldAsString = JSON.stringify(fields);\n        JSON.parse(fieldAsString);\n        var dataToShip = {\n            msgType: \"setRoomApiField\",\n            msgData: {\n                setRoomApiField: {\n                    roomName: roomName,\n                    field: fields\n                }\n            }\n        };\n        self.webSocket.json.emit(\"easyrtcCmd\", dataToShip,\n                function(ackMsg) {\n                    if (ackMsg.msgType === \"error\") {\n                        self.showError(ackMsg.msgData.errorCode, ackMsg.msgData.errorText);\n                    }\n                }\n        );\n    }\n\n    /** @private */\n    var roomApiFieldTimer = null;\n\n    /**\n     * @private\n     * @param {String} roomName\n     */\n    function enqueueSendRoomApi(roomName) {\n        //\n        // Rather than issue the send request immediately, we set a timer so we can accumulate other\n        // calls\n        //\n        if (roomApiFieldTimer) {\n            clearTimeout(roomApiFieldTimer);\n        }\n        roomApiFieldTimer = setTimeout(function() {\n            sendRoomApiFields(roomName, self._roomApiFields[roomName]);\n            roomApiFieldTimer = null;\n        }, 10);\n    }\n\n    /** Provide a set of application defined fields that will be part of this instances\n     * configuration information. This data will get sent to other peers via the websocket\n     * path.\n     * @param {String} roomName - the room the field is attached to.\n     * @param {String} fieldName - the name of the field.\n     * @param {Object} fieldValue - the value of the field.\n     * @example\n     *   easyrtc.setRoomApiField(\"trekkieRoom\",  \"favorite_alien\", \"Mr Spock\");\n     *   easyrtc.setRoomOccupantListener( function(roomName, list){\n     *      for( var i in list ){\n     *         console.log(\"easyrtcid=\" + i + \" favorite alien is \" + list[i].apiFields.favorite_alien);\n     *      }\n     *   });\n     */\n    this.setRoomApiField = function(roomName, fieldName, fieldValue) {\n        //\n        // if we're not connected yet, we'll just cache the fields until we are.\n        //\n        if (!self._roomApiFields) {\n            self._roomApiFields = {};\n        }\n        if (!fieldName && !fieldValue) {\n            delete self._roomApiFields[roomName];\n            return;\n        }\n\n        if (!self._roomApiFields[roomName]) {\n            self._roomApiFields[roomName] = {};\n        }\n        if (fieldValue !== undefined && fieldValue !== null) {\n            if (typeof fieldValue === \"object\") {\n                try {\n                    JSON.stringify(fieldValue);\n                }\n                catch (jsonError) {\n                    self.showError(self.errCodes.DEVELOPER_ERR, \"easyrtc.setRoomApiField passed bad object \");\n                    return;\n                }\n            }\n            self._roomApiFields[roomName][fieldName] = {fieldName: fieldName, fieldValue: fieldValue};\n        }\n        else {\n            delete self._roomApiFields[roomName][fieldName];\n        }\n        if (self.webSocketConnected) {\n            enqueueSendRoomApi(roomName);\n        }\n    };\n\n    /**\n     * Default error reporting function. The default implementation displays error messages\n     * in a programmatically created div with the id easyrtcErrorDialog. The div has title\n     * component with a class name of easyrtcErrorDialog_title. The error messages get added to a\n     * container with the id easyrtcErrorDialog_body. Each error message is a text node inside a div\n     * with a class of easyrtcErrorDialog_element. There is an \"okay\" button with the className of easyrtcErrorDialog_okayButton.\n     * @param {String} messageCode An error message code\n     * @param {String} message the error message text without any markup.\n     * @example\n     *     easyrtc.showError(\"BAD_NAME\", \"Invalid username\");\n     */\n    this.showError = function(messageCode, message) {\n        self.onError({errorCode: messageCode, errorText: message});\n    };\n\n    /**\n     * @private\n     * @param errorObject\n     */\n    this.onError = function(errorObject) {\n        logDebug(\"saw error \" + errorObject.errorText);\n\n        var errorDiv = document.getElementById('easyrtcErrorDialog');\n        var errorBody;\n        if (!errorDiv) {\n            errorDiv = document.createElement(\"div\");\n            errorDiv.id = 'easyrtcErrorDialog';\n            var title = document.createElement(\"div\");\n            title.innerHTML = \"Error messages\";\n            title.className = \"easyrtcErrorDialog_title\";\n            errorDiv.appendChild(title);\n            errorBody = document.createElement(\"div\");\n            errorBody.id = \"easyrtcErrorDialog_body\";\n            errorDiv.appendChild(errorBody);\n            var clearButton = document.createElement(\"button\");\n            clearButton.appendChild(document.createTextNode(\"Okay\"));\n            clearButton.className = \"easyrtcErrorDialog_okayButton\";\n            clearButton.onclick = function() {\n                errorBody.innerHTML = \"\"; // remove all inner nodes\n                errorDiv.style.display = \"none\";\n            };\n            errorDiv.appendChild(clearButton);\n            document.body.appendChild(errorDiv);\n        }\n\n        errorBody = document.getElementById(\"easyrtcErrorDialog_body\");\n        var messageNode = document.createElement(\"div\");\n        messageNode.className = 'easyrtcErrorDialog_element';\n        messageNode.appendChild(document.createTextNode(errorObject.errorText));\n        errorBody.appendChild(messageNode);\n        errorDiv.style.display = \"block\";\n    };\n\n    /** @private\n     * @param mediaStream */\n    //\n    // easyrtc.createObjectURL builds a URL from a media stream.\n    // Arguments:\n    //     mediaStream - a media stream object.\n    // The video object in Chrome expects a URL.\n    //\n    this.createObjectURL = function(mediaStream) {\n        var errMessage;\n        if (window.URL && window.URL.createObjectURL) {\n            return window.URL.createObjectURL(mediaStream);\n        }\n        else if (window.webkitURL && window.webkitURL.createObjectURL) {\n            return window.webkit.createObjectURL(mediaStream);\n        }\n        else {\n            errMessage = \"Your browsers does not support URL.createObjectURL.\";\n            logDebug(\"saw exception \" + errMessage);\n            throw errMessage;\n        }\n    };\n\n    /**\n     * A convenience function to ensure that a string doesn't have symbols that will be interpreted by HTML.\n     * @param {String} idString\n     * @return {String} The cleaned string.\n     * @example\n     *   console.log( easyrtc.cleanId('&hello'));\n     */\n    this.cleanId = function(idString) {\n        var MAP = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n        return idString.replace(/[&<>]/g, function(c) {\n            return MAP[c];\n        });\n    };\n\n    /**\n     * Set a callback that will be invoked when the application enters or leaves a room.\n     * @param {Function} handler - the first parameter is true for entering a room, false for leaving a room. The second parameter is the room name.\n     * @example\n     *   easyrtc.setRoomEntryListener(function(entry, roomName){\n     *       if( entry ){\n     *           console.log(\"entering room \" + roomName);\n     *       }\n     *       else{\n     *           console.log(\"leaving room \" + roomName);\n     *       }\n     *   });\n     */\n    self.setRoomEntryListener = function(handler) {\n        self.roomEntryListener = handler;\n    };\n\n    /**\n     * Set the callback that will be invoked when the list of people logged in changes.\n     * The callback expects to receive a room name argument, and\n     * a map whose ideas are easyrtcids and whose values are in turn maps\n     * supplying user specific information. The inner maps have the following keys:\n     * username, applicationName, browserFamily, browserMajor, osFamily, osMajor, deviceFamily.\n     * The third argument is the listener is the innerMap for the connections own data (not needed by most applications).\n     * @param {Function} listener\n     * @example\n     *   easyrtc.setRoomOccupantListener( function(roomName, list, selfInfo){\n     *      for( var i in list ){\n     *         (\"easyrtcid=\" + i + \" belongs to user \" + list[i].username);\n     *      }\n     *   });\n     */\n    self.setRoomOccupantListener = function(listener) {\n        roomOccupantListener = listener;\n    };\n\n    /**\n     * Sets a callback that is called when a data channel is open and ready to send data.\n     * The callback will be called with an easyrtcid as it's sole argument.\n     * @param {Function} listener\n     * @example\n     *    easyrtc.setDataChannelOpenListener( function(easyrtcid){\n     *         easyrtc.sendDataP2P(easyrtcid, \"greeting\", \"hello\");\n     *    });\n     */\n    this.setDataChannelOpenListener = function(listener) {\n        onDataChannelOpen = listener;\n    };\n\n    /** Sets a callback that is called when a previously open data channel closes.\n     * The callback will be called with an easyrtcid as it's sole argument.\n     * @param {Function} listener\n     * @example\n     *    easyrtc.setDataChannelCloseListener( function(easyrtcid){\n     *            (\"No longer connected to \" + easyrtc.idToName(easyrtcid));\n     *    });\n     */\n    this.setDataChannelCloseListener = function(listener) {\n        onDataChannelClose = listener;\n    };\n\n    /** Returns the number of live peer connections the client has.\n     * @return {Number}\n     * @example\n     *    (\"You have \" + easyrtc.getConnectionCount() + \" peer connections\");\n     */\n    this.getConnectionCount = function() {\n        var count = 0;\n        var i;\n        for (i in peerConns) {\n            if (peerConns.hasOwnProperty(i)) {\n                if (self.getConnectStatus(i) === self.IS_CONNECTED) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    };\n\n    /** Sets the maximum length in bytes of P2P messages that can be sent.\n     * @param {Number} maxLength maximum length to set\n     * @example\n     *     easyrtc.setMaxP2PMessageLength(10000);\n     */\n    this.setMaxP2PMessageLength = function(maxLength) {\n        this.maxP2PMessageLength = maxLength;\n    };\n\n    /** Sets whether audio is transmitted by the local user in any subsequent calls.\n     * @param {Boolean} enabled true to include audio, false to exclude audio. The default is true.\n     * @example\n     *      easyrtc.enableAudio(false);\n     */\n    this.enableAudio = function(enabled) {\n        self.audioEnabled = enabled;\n    };\n\n    /**\n     *Sets whether video is transmitted by the local user in any subsequent calls.\n     * @param {Boolean} enabled - true to include video, false to exclude video. The default is true.\n     * @example\n     *      easyrtc.enableVideo(false);\n     */\n    this.enableVideo = function(enabled) {\n        self.videoEnabled = enabled;\n    };\n\n    /**\n     * Sets whether WebRTC data channels are used to send inter-client messages.\n     * This is only the messages that applications explicitly send to other applications, not the WebRTC signaling messages.\n     * @param {Boolean} enabled  true to use data channels, false otherwise. The default is false.\n     * @example\n     *     easyrtc.enableDataChannels(true);\n     */\n    this.enableDataChannels = function(enabled) {\n        dataEnabled = enabled;\n    };\n\n    /**\n     * @private\n     * @param {Boolean} enable\n     * @param {Array} tracks - an array of MediaStreamTrack\n     */\n    function enableMediaTracks(enable, tracks) {\n        var i;\n        if (tracks) {\n            for (i = 0; i < tracks.length; i++) {\n                var track = tracks[i];\n                track.enabled = enable;\n            }\n        }\n    }\n\n    /** @private */\n    //\n    // fetches a stream by name. Treat a null/undefined streamName as \"default\".\n    //\n    function getLocalMediaStreamByName(streamName) {\n        if (!streamName) {\n            streamName = \"default\";\n        }\n        if (namedLocalMediaStreams.hasOwnProperty(streamName)) {\n            return namedLocalMediaStreams[streamName];\n        }\n        else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the user assigned id's of currently active local media streams.\n     * @return {Array}\n     */\n    this.getLocalMediaIds = function() {\n        return Object.keys(namedLocalMediaStreams);\n    };\n\n    /** @private */\n    function buildMediaIds() {\n        var mediaMap = {};\n        var streamName;\n        for (streamName in namedLocalMediaStreams) {\n            if (namedLocalMediaStreams.hasOwnProperty(streamName)) {\n                mediaMap[streamName] = namedLocalMediaStreams[streamName].id || \"default\";\n            }\n        }\n        return mediaMap;\n    }\n\n    /** @private */\n    function registerLocalMediaStreamByName(stream, streamName) {\n        var roomName;\n        if (!streamName) {\n            streamName = \"default\";\n        }\n        stream.streamName = streamName;\n        namedLocalMediaStreams[streamName] = stream;\n        if (streamName !== \"default\") {\n            var mediaIds = buildMediaIds(),\n                roomData = self.roomData;\n            for (roomName in roomData) {\n                if (roomData.hasOwnProperty(roomName)) {\n                    self.setRoomApiField(roomName, \"mediaIds\", mediaIds);\n                }\n            }\n        }\n    }\n\n    /**\n     * Allow an externally created mediastream (ie, created by another\n     * library) to be used within easyrtc. Tracking when it closes\n     * must be done by the supplying party.\n     */\n    this.register3rdPartyLocalMediaStream = function(stream, streamName) {\n       return registerLocalMediaStreamByName(stream, streamName);\n    };\n\n    /** @private */\n    //\n    // look up a stream's name from the stream.id\n    //\n    function getNameOfRemoteStream(easyrtcId, webrtcStreamId) {\n        var roomName;\n        var mediaIds;\n        var streamName;\n        if (!webrtcStreamId) {\n            webrtcStreamId = \"default\";\n        }\n        if (peerConns[easyrtcId]) {\n            streamName = peerConns[easyrtcId].remoteStreamIdToName[webrtcStreamId];\n            if (streamName) {\n                return streamName;\n            }\n        }\n\n        for (roomName in self.roomData) {\n            if (self.roomData.hasOwnProperty(roomName)) {\n                mediaIds = self.getRoomApiField(roomName, easyrtcId, \"mediaIds\");\n                if (!mediaIds) {\n                    continue;\n                }\n                for (streamName in mediaIds) {\n                    if (mediaIds.hasOwnProperty(streamName) &&\n                            mediaIds[streamName] === webrtcStreamId) {\n                        return streamName;\n                    }\n                }\n                //\n                // a stream from chrome to firefox will be missing it's id/label.\n                // there is no correct solution.\n                //\n                if (\n                    adapter && adapter.browserDetails &&\n                        adapter.browserDetails.browser === \"firefox\"\n                ) {\n\n                   // if there is a stream called default, return it in preference\n                   if (mediaIds[\"default\"]) {\n                       return \"default\";\n                   }\n\n                   //\n                   // otherwise return the first name we find. If there is more than\n                   // one, complain to Mozilla.\n                   //\n                   for(var anyName in mediaIds) {\n                        if (mediaIds.hasOwnProperty(anyName)) {\n                            return anyName;\n                        }\n                   }\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    this.getNameOfRemoteStream = function(easyrtcId, webrtcStream){\n        if(typeof webrtcStream === \"string\") {\n            return getNameOfRemoteStream(easyrtcId, webrtcStream);\n        }\n        else if( webrtcStream.id) {\n            return getNameOfRemoteStream(easyrtcId, webrtcStream.id);\n        }\n    };\n\n    /** @private */\n    function closeLocalMediaStreamByName(streamName) {\n        if (!streamName) {\n            streamName = \"default\";\n        }\n        var stream = self.getLocalStream(streamName);\n        if (!stream) {\n            return;\n        }\n        var streamId = stream.id || \"default\";\n        var id;\n        var roomName;\n        if (namedLocalMediaStreams[streamName]) {\n\n            for (id in peerConns) {\n                if (peerConns.hasOwnProperty(id)) {\n                    try {\n                        peerConns[id].pc.removeStream(stream);\n                    } catch (err) {\n                    }\n                    self.sendPeerMessage(id, \"__closingMediaStream\", {streamId: streamId, streamName: streamName});\n                }\n            }\n\n            stopStream(namedLocalMediaStreams[streamName]);\n            delete namedLocalMediaStreams[streamName];\n\n            if (streamName !== \"default\") {\n                var mediaIds = buildMediaIds();\n                for (roomName in self.roomData) {\n                    if (self.roomData.hasOwnProperty(roomName)) {\n                        self.setRoomApiField(roomName, \"mediaIds\", mediaIds);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Close the local media stream. You usually need to close the existing media stream\n     * of a camera before reacquiring it at a different resolution.\n     * @param {String} streamName - an option stream name.\n     */\n    this.closeLocalMediaStream = function(streamName) {\n        return closeLocalMediaStreamByName(streamName);\n    };\n\n    /**\n     * Alias for closeLocalMediaStream\n     */\n    this.closeLocalStream = this.closeLocalMediaStream;\n\n    /**\n     * This function is used to enable and disable the local camera. If you disable the\n     * camera, video objects display it will \"freeze\" until the camera is re-enabled. *\n     * By default, a camera is enabled.\n     * @param {Boolean} enable - true to enable the camera, false to disable it.\n     * @param {String} streamName - the name of the stream, optional.\n     */\n    this.enableCamera = function(enable, streamName) {\n        var stream = getLocalMediaStreamByName(streamName);\n        if (stream && stream.getVideoTracks) {\n            enableMediaTracks(enable, stream.getVideoTracks());\n        }\n    };\n\n    /**\n     * This function is used to enable and disable the local microphone. If you disable\n     * the microphone, sounds stops being transmitted to your peers. By default, the microphone\n     * is enabled.\n     * @param {Boolean} enable - true to enable the microphone, false to disable it.\n     * @param {String} streamName - an optional streamName\n     */\n    this.enableMicrophone = function(enable, streamName) {\n        var stream = getLocalMediaStreamByName(streamName);\n        if (stream && stream.getAudioTracks) {\n            enableMediaTracks(enable, stream.getAudioTracks());\n        }\n    };\n\n    /**\n     * Mute a video object.\n     * @param {String} videoObjectName - A DOMObject or the id of the DOMObject.\n     * @param {Boolean} mute - true to mute the video object, false to unmute it.\n     */\n    this.muteVideoObject = function(videoObjectName, mute) {\n        var videoObject;\n        if (typeof (videoObjectName) === 'string') {\n            videoObject = document.getElementById(videoObjectName);\n            if (!videoObject) {\n                throw \"Unknown video object \" + videoObjectName;\n            }\n        }\n        else if (!videoObjectName) {\n            throw \"muteVideoObject passed a null\";\n        }\n        else {\n            videoObject = videoObjectName;\n        }\n        videoObject.muted = !!mute;\n    };\n\n    /**\n     * Returns a URL for your local camera and microphone.\n     *  It can be called only after easyrtc.initMediaSource has succeeded.\n     *  It returns a url that can be used as a source by the Chrome video element or the &lt;canvas&gt; element.\n     *  @param {String} streamName - an option stream name.\n     *  @return {URL}\n     *  @example\n     *      document.getElementById(\"myVideo\").src = easyrtc.getLocalStreamAsUrl();\n     */\n    self.getLocalStreamAsUrl = function(streamName) {\n        var stream = getLocalMediaStreamByName(streamName);\n        if (stream === null) {\n            throw \"Developer error: attempt to get a MediaStream without invoking easyrtc.initMediaSource successfully\";\n        }\n        return self.createObjectURL(stream);\n    };\n\n    /**\n     * Returns a media stream for your local camera and microphone.\n     *  It can be called only after easyrtc.initMediaSource has succeeded.\n     *  It returns a stream that can be used as an argument to easyrtc.setVideoObjectSrc.\n     *  Returns null if there is no local media stream acquired yet.\n     * @return {?MediaStream}\n     * @example\n     *    easyrtc.setVideoObjectSrc( document.getElementById(\"myVideo\"), easyrtc.getLocalStream());\n     */\n    this.getLocalStream = function(streamName) {\n        return getLocalMediaStreamByName(streamName) || null;\n    };\n\n    /** Clears the media stream on a video object.\n     *\n     * @param {Object} element the video object.\n     * @example\n     *    easyrtc.clearMediaStream( document.getElementById('selfVideo'));\n     *\n     */\n    this.clearMediaStream = function(element) {\n        if (typeof element.src !== 'undefined') {\n            //noinspection JSUndefinedPropertyAssignment\n            element.src = \"\";\n        } else if (typeof element.srcObject !== 'undefined') {\n            element.srcObject = \"\";\n        } else if (typeof element.mozSrcObject !== 'undefined') {\n            element.mozSrcObject = null;\n        }\n    };\n\n    /**\n     *  Sets a video or audio object from a media stream.\n     *  Chrome uses the src attribute and expects a URL, while firefox\n     *  uses the mozSrcObject and expects a stream. This procedure hides\n     *  that from you.\n     *  If the media stream is from a local webcam, you may want to add the\n     *  easyrtcMirror class to the video object so it looks like a proper mirror.\n     *  The easyrtcMirror class is defined in this.css.\n     *  Which is could be added using the same path of easyrtc.js file to an HTML file\n     *  @param {Object} element an HTML5 video element\n     *  @param {MediaStream|String} stream a media stream as returned by easyrtc.getLocalStream or your stream acceptor.\n     * @example\n     *    easyrtc.setVideoObjectSrc( document.getElementById(\"myVideo\"), easyrtc.getLocalStream());\n     *\n     */\n    this.setVideoObjectSrc = function(element, stream) {\n        if (stream && stream !== \"\") {\n            element.autoplay = true;\n\n            if (typeof element.src !== 'undefined') {\n                element.src = self.createObjectURL(stream);\n            } else if (typeof element.srcObject !== 'undefined') {\n                element.srcObject = stream;\n            } else if (typeof element.mozSrcObject !== 'undefined') {\n                element.mozSrcObject = self.createObjectURL(stream);\n            }\n            element.play();\n        }\n        else {\n            self.clearMediaStream(element);\n        }\n    };\n\n    /**\n     * This function builds a new named local media stream from a set of existing audio and video tracks from other media streams.\n     * @param {String} streamName is the name of the new media stream.\n     * @param {Array} audioTracks is an array of MediaStreamTracks\n     * @param {Array} videoTracks is an array of MediaStreamTracks\n     * @returns {?MediaStream} the track created.\n     * @example\n     *    easyrtc.buildLocalMediaStream(\"myComposedStream\",\n     *             easyrtc.getLocalStream(\"camera1\").getVideoTracks(),\n     *             easyrtc.getLocalStream(\"camera2\").getAudioTracks());\n     */\n    this.buildLocalMediaStream = function(streamName, audioTracks, videoTracks) {\n        var i;\n        if (typeof streamName !== 'string') {\n            self.showError(self.errCodes.DEVELOPER_ERR,\n               \"easyrtc.buildLocalMediaStream not supplied a stream name\");\n            return null;\n        }\n\n         var streamToClone = null;\n         for(var key in namedLocalMediaStreams ) {\n            if( namedLocalMediaStreams.hasOwnProperty(key)) {\n              streamToClone = namedLocalMediaStreams[key];\n              if(streamToClone) {\n                break;\n              }\n            }\n         }\n         if( !streamToClone ) {\n            for(key in peerConns) {\n                if (peerConns.hasOwnProperty(key)) {\n                    var remoteStreams = peerConns[key].pc.getRemoteStreams();\n                    if( remoteStreams && remoteStreams.length > 0 ) {\n                        streamToClone = remoteStreams[0];\n                    }\n                }\n            }\n         }\n         if( !streamToClone ){\n            self.showError(self.errCodes.DEVELOPER_ERR,\n             \"Attempt to create a mediastream without one to clone from\");\n            return null;\n         }\n\n         //\n         // clone whatever mediastream we found, and remove any of it's\n         // tracks.\n         //\n         var mediaClone = streamToClone.clone();\n         var oldTracks = mediaClone.getTracks();\n\n        if (audioTracks) {\n            for (i = 0; i < audioTracks.length; i++) {\n                mediaClone.addTrack(audioTracks[i].clone());\n            }\n        }\n\n        if (videoTracks) {\n            for (i = 0; i < videoTracks.length; i++) {\n                mediaClone.addTrack(videoTracks[i].clone());\n            }\n        }\n\n        for( i = 0; i < oldTracks.length; i++ ) {\n            mediaClone.removeTrack(oldTracks[i]);\n        }\n\n        registerLocalMediaStreamByName(mediaClone, streamName);\n        return mediaClone;\n    };\n\n    /* @private*/\n    /** Load Easyrtc Stylesheet.\n     *   Easyrtc Stylesheet define easyrtcMirror class and some basic css class for using easyrtc.js.\n     *   That way, developers can override it or use it's own css file minified css or package.\n     * @example\n     *       easyrtc.loadStylesheet();\n     *\n     */\n    this.loadStylesheet = function() {\n\n        //\n        // check to see if we already have an easyrtc.css file loaded\n        // if we do, we can exit immediately.\n        //\n        var links = document.getElementsByTagName(\"link\");\n        var cssIndex, css;\n        for (cssIndex in links) {\n            if (links.hasOwnProperty(cssIndex)) {\n                css = links[cssIndex];\n                if (css.href && (css.href.match(/\\/easyrtc.css/))) {\n                    return;\n                }\n            }\n        }\n        //\n        // add the easyrtc.css file since it isn't present\n        //\n        var easySheet = document.createElement(\"link\");\n        easySheet.setAttribute(\"rel\", \"stylesheet\");\n        easySheet.setAttribute(\"type\", \"text/css\");\n        easySheet.setAttribute(\"href\", \"/easyrtc/easyrtc.css\");\n        var headSection = document.getElementsByTagName(\"head\")[0];\n        var firstHead = headSection.childNodes[0];\n        headSection.insertBefore(easySheet, firstHead);\n    };\n\n    /**\n     * @private\n     * @param {String} x\n     */\n    this.formatError = function(x) {\n        var name, result;\n        if (x === null || typeof x === 'undefined') {\n            return \"null\";\n        }\n        if (typeof x === 'string') {\n            return x;\n        }\n        else if (x.type && x.description) {\n            return x.type + \" : \" + x.description;\n        }\n        else if (typeof x === 'object') {\n            try {\n                return JSON.stringify(x);\n            }\n            catch (oops) {\n                result = \"{\";\n                for (name in x) {\n                    if (x.hasOwnProperty(name)) {\n                        if (typeof x[name] === 'string') {\n                            result = result + name + \"='\" + x[name] + \"' \";\n                        }\n                    }\n                }\n                result = result + \"}\";\n                return result;\n            }\n        }\n        else {\n            return \"Strange case\";\n        }\n    };\n\n    /**\n     * Initializes your access to a local camera and microphone.\n     * Failure could be caused a browser that didn't support WebRTC, or by the user not granting permission.\n     * If you are going to call easyrtc.enableAudio or easyrtc.enableVideo, you need to do it before\n     * calling easyrtc.initMediaSource.\n     * @param {function(Object)} successCallback - will be called with localmedia stream on success.\n     * @param {function(String,String)} errorCallback - is called with an error code and error description.\n     * @param {String} streamName - an optional name for the media source so you can use multiple cameras and\n     * screen share simultaneously.\n     * @example\n     *       easyrtc.initMediaSource(\n     *          function(mediastream){\n     *              easyrtc.setVideoObjectSrc( document.getElementById(\"mirrorVideo\"), mediastream);\n     *          },\n     *          function(errorCode, errorText){\n     *               easyrtc.showError(errorCode, errorText);\n     *          });\n     */\n    this.initMediaSource = function(successCallback, errorCallback, streamName) {\n\n        logDebug(\"about to request local media\");\n\n        if (!streamName) {\n            streamName = \"default\";\n        }\n\n        haveAudioVideo = {\n            audio: self.audioEnabled,\n            video: self.videoEnabled\n        };\n\n        if (!errorCallback) {\n            errorCallback = function(errorCode, errorText) {\n                var message = \"easyrtc.initMediaSource: \" + self.formatError(errorText);\n                logDebug(message);\n                self.showError(self.errCodes.MEDIA_ERR, message);\n            };\n        }\n\n        if (!self.supportsGetUserMedia()) {\n            errorCallback(self.errCodes.MEDIA_ERR, self.getConstantString(\"noWebrtcSupport\"));\n            return;\n        }\n\n        if (!successCallback) {\n            self.showError(self.errCodes.DEVELOPER_ERR,\n                    \"easyrtc.initMediaSource not supplied a successCallback\");\n            return;\n        }\n\n        var mode = self.getUserMediaConstraints();\n        /** @private\n         * @param {Object} stream - A mediaStream object.\n         *  */\n        var onUserMediaSuccess = function(stream) {\n            logDebug(\"getUserMedia success callback entered\");\n            logDebug(\"successfully got local media\");\n\n            stream.streamName = streamName;\n            registerLocalMediaStreamByName(stream, streamName);\n            var videoObj, triesLeft, tryToGetSize, ele;\n            if (haveAudioVideo.video) {\n                videoObj = document.createElement('video');\n                videoObj.muted = true;\n                triesLeft = 30;\n                tryToGetSize = function() {\n                    if (videoObj.videoWidth > 0 || triesLeft < 0) {\n                        self.nativeVideoWidth = videoObj.videoWidth;\n                        self.nativeVideoHeight = videoObj.videoHeight;\n                        if (self._desiredVideoProperties.height &&\n                                (self.nativeVideoHeight !== self._desiredVideoProperties.height ||\n                                        self.nativeVideoWidth !== self._desiredVideoProperties.width)) {\n                            self.showError(self.errCodes.MEDIA_WARNING,\n                                    self.format(self.getConstantString(\"resolutionWarning\"),\n                                    self._desiredVideoProperties.width, self._desiredVideoProperties.height,\n                                    self.nativeVideoWidth, self.nativeVideoHeight));\n                        }\n                        self.setVideoObjectSrc(videoObj, null);\n                        if (videoObj.removeNode) {\n                            videoObj.removeNode(true);\n                        }\n                        else {\n                            ele = document.createElement('div');\n                            ele.appendChild(videoObj);\n                            ele.removeChild(videoObj);\n                        }\n\n                        updateConfigurationInfo();\n                        if (successCallback) {\n                            successCallback(stream);\n                        }\n                    }\n                    else {\n                        triesLeft -= 1;\n                        setTimeout(tryToGetSize, 300);\n                    }\n                };\n                self.setVideoObjectSrc(videoObj, stream);\n                tryToGetSize();\n            }\n            else {\n                updateConfigurationInfo();\n                if (successCallback) {\n                    successCallback(stream);\n                }\n            }\n        };\n\n        /**\n         * @private\n         * @param {String} error\n         */\n        var onUserMediaError = function(error) {\n            logDebug(\"getusermedia failed\");\n            logDebug(\"failed to get local media\");\n            var errText;\n            if (typeof error === 'string') {\n                errText = error;\n            }\n            else if (error.name) {\n                errText = error.name;\n            }\n            else {\n                errText = \"Unknown\";\n            }\n            if (errorCallback) {\n                logDebug(\"invoking error callback\", errText);\n                errorCallback(self.errCodes.MEDIA_ERR, self.format(self.getConstantString(\"gumFailed\"), errText));\n            }\n            closeLocalMediaStreamByName(streamName);\n            haveAudioVideo = {\n                audio: false,\n                video: false\n            };\n            updateConfigurationInfo();\n        };\n\n        if (!self.audioEnabled && !self.videoEnabled) {\n            onUserMediaError(self.getConstantString(\"requireAudioOrVideo\"));\n            return;\n        }\n\n        function getCurrentTime() {\n            return (new Date()).getTime();\n        }\n\n        var firstCallTime;\n        function tryAgain(err) {\n            var currentTime = getCurrentTime();\n            if (currentTime < firstCallTime + 1000) {\n                logDebug(\"Trying getUserMedia a second time\");\n                try {\n                    navigator.getUserMedia(mode, onUserMediaSuccess, onUserMediaError);\n                } catch (e) {\n                    onUserMediaError(err);\n                }\n            }\n            else {\n                onUserMediaError(err);\n            }\n        }\n\n        //\n        // getUserMedia sometimes fails the first time I call it. I suspect it's a page loading\n        // issue. So I'm going to try adding a 1 second delay to allow things to settle down first.\n        // In addition, I'm going to try again after 3 seconds.\n        //\n        try {\n            firstCallTime = getCurrentTime();\n            navigator.getUserMedia(mode, onUserMediaSuccess, tryAgain);\n        } catch (err) {\n            tryAgain(err);\n        }\n    };\n\n    /**\n     * Sets the callback used to decide whether to accept or reject an incoming call.\n     * @param {Function} acceptCheck takes the arguments (callerEasyrtcid, acceptor).\n     * The acceptCheck callback is passed an easyrtcid and an acceptor function. The acceptor function should be called with either\n     * a true value (accept the call) or false value( reject the call) as it's first argument, and optionally,\n     * an array of local media streamNames as a second argument.\n     * @example\n     *      easyrtc.setAcceptChecker( function(easyrtcid, acceptor){\n     *           if( easyrtc.idToName(easyrtcid) === 'Fred' ){\n     *              acceptor(true);\n     *           }\n     *           else if( easyrtc.idToName(easyrtcid) === 'Barney' ){\n     *              setTimeout( function(){\n     acceptor(true, ['myOtherCam']); // myOtherCam presumed to a streamName\n     }, 10000);\n     *           }\n     *           else{\n     *              acceptor(false);\n     *           }\n     *      });\n     */\n    this.setAcceptChecker = function(acceptCheck) {\n        self.acceptCheck = acceptCheck;\n    };\n\n    /**\n     * easyrtc.setStreamAcceptor sets a callback to receive media streams from other peers, independent\n     * of where the call was initiated (caller or callee).\n     * @param {Function} acceptor takes arguments (caller, mediaStream, mediaStreamName)\n     * @example\n     *  easyrtc.setStreamAcceptor(function(easyrtcid, stream, streamName){\n     *     document.getElementById('callerName').innerHTML = easyrtc.idToName(easyrtcid);\n     *     easyrtc.setVideoObjectSrc( document.getElementById(\"callerVideo\"), stream);\n     *  });\n     */\n    this.setStreamAcceptor = function(acceptor) {\n        self.streamAcceptor = acceptor;\n    };\n\n    /** Sets the easyrtc.onError field to a user specified function.\n     * @param {Function} errListener takes an object of the form {errorCode: String, errorText: String}\n     * @example\n     *    easyrtc.setOnError( function(errorObject){\n     *        document.getElementById(\"errMessageDiv\").innerHTML += errorObject.errorText;\n     *    });\n     */\n    self.setOnError = function(errListener) {\n        self.onError = errListener;\n    };\n\n    /**\n     * Sets the callCancelled callback. This will be called when a remote user\n     * initiates a call to you, but does a \"hangup\" before you have a chance to get his video stream.\n     * @param {Function} callCancelled takes an easyrtcid as an argument and a boolean that indicates whether\n     *  the call was explicitly cancelled remotely (true), or actually accepted by the user attempting a call to\n     *  the same party.\n     * @example\n     *     easyrtc.setCallCancelled( function(easyrtcid, explicitlyCancelled){\n     *        if( explicitlyCancelled ){\n     *            console.log(easyrtc.idToName(easyrtcid) + \" stopped trying to reach you\");\n     *         }\n     *         else{\n     *            console.log(\"Implicitly called \"  + easyrtc.idToName(easyrtcid));\n     *         }\n     *     });\n     */\n    this.setCallCancelled = function(callCancelled) {\n        self.callCancelled = callCancelled;\n    };\n\n    /**  Sets a callback to receive notification of a media stream closing. The usual\n     *  use of this is to clear the source of your video object so you aren't left with\n     *  the last frame of the video displayed on it.\n     *  @param {Function} onStreamClosed takes an easyrtcid as it's first parameter, the stream as it's second argument, and name of the video stream as it's third.\n     *  @example\n     *     easyrtc.setOnStreamClosed( function(easyrtcid, stream, streamName){\n     *         easyrtc.setVideoObjectSrc( document.getElementById(\"callerVideo\"), \"\");\n     *         ( easyrtc.idToName(easyrtcid) + \" closed stream \" + stream.id + \" \" + streamName);\n     *     });\n     */\n    this.setOnStreamClosed = function(onStreamClosed) {\n        self.onStreamClosed = onStreamClosed;\n    };\n\n    /**\n     * Sets a listener for data sent from another client (either peer to peer or via websockets).\n     * If no msgType or source is provided, the listener applies to all events that aren't otherwise handled.\n     * If a msgType but no source is provided, the listener applies to all messages of that msgType that aren't otherwise handled.\n     * If a msgType and a source is provided, the listener applies to only message of the specified type coming from the specified peer.\n     * The most specific case takes priority over the more general.\n     * @param {Function} listener has the signature (easyrtcid, msgType, msgData, targeting).\n     *   msgType is a string. targeting is null if the message was received using WebRTC data channels, otherwise it\n     *   is an object that contains one or more of the following string valued elements {targetEasyrtcid, targetGroup, targetRoom}.\n     * @param {String} msgType - a string, optional.\n     * @param {String} source - the sender's easyrtcid, optional.\n     * @example\n     *     easyrtc.setPeerListener( function(easyrtcid, msgType, msgData, targeting){\n     *         console.log(\"From \" + easyrtc.idToName(easyrtcid) +\n     *             \" sent the following data \" + JSON.stringify(msgData));\n     *     });\n     *     easyrtc.setPeerListener( function(easyrtcid, msgType, msgData, targeting){\n     *         console.log(\"From \" + easyrtc.idToName(easyrtcid) +\n     *             \" sent the following data \" + JSON.stringify(msgData));\n     *     }, 'food', 'dkdjdekj44--');\n     *     easyrtc.setPeerListener( function(easyrtcid, msgType, msgData, targeting){\n     *         console.log(\"From \" + easyrtcid +\n     *             \" sent the following data \" + JSON.stringify(msgData));\n     *     }, 'drink');\n     *\n     *\n     */\n    this.setPeerListener = function(listener, msgType, source) {\n        if (!msgType) {\n            receivePeer.cb = listener;\n        }\n        else {\n            if (!receivePeer.msgTypes[msgType]) {\n                receivePeer.msgTypes[msgType] = {sources: {}};\n            }\n            if (!source) {\n                receivePeer.msgTypes[msgType].cb = listener;\n            }\n            else {\n                receivePeer.msgTypes[msgType].sources[source] = {cb: listener};\n            }\n        }\n    };\n    /* This function serves to distribute peer messages to the various peer listeners */\n    /** @private\n     * @param {String} easyrtcid\n     * @param {Object} msg - needs to contain a msgType and a msgData field.\n     * @param {Object} targeting\n     */\n    this.receivePeerDistribute = function(easyrtcid, msg, targeting) {\n        var msgType = msg.msgType;\n        var msgData = msg.msgData;\n        if (!msgType) {\n            logDebug(\"received peer message without msgType\", msg);\n            return;\n        }\n\n        if (receivePeer.msgTypes[msgType]) {\n            if (receivePeer.msgTypes[msgType].sources[easyrtcid] &&\n                    receivePeer.msgTypes[msgType].sources[easyrtcid].cb) {\n                receivePeer.msgTypes[msgType].sources[easyrtcid].cb(easyrtcid, msgType, msgData, targeting);\n                return;\n            }\n            if (receivePeer.msgTypes[msgType].cb) {\n                receivePeer.msgTypes[msgType].cb(easyrtcid, msgType, msgData, targeting);\n                return;\n            }\n        }\n        if (receivePeer.cb) {\n            receivePeer.cb(easyrtcid, msgType, msgData, targeting);\n        }\n    };\n\n    /**\n     * Sets a listener for messages from the server.\n     * @param {Function} listener has the signature (msgType, msgData, targeting)\n     * @example\n     *     easyrtc.setServerListener( function(msgType, msgData, targeting){\n     *         (\"The Server sent the following message \" + JSON.stringify(msgData));\n     *     });\n     */\n    this.setServerListener = function(listener) {\n        receiveServerCB = listener;\n    };\n\n    /**\n     * Sets the url of the Socket server.\n     * The node.js server is great as a socket server, but it doesn't have\n     * all the hooks you'd like in a general web server, like PHP or Python\n     * plug-ins. By setting the serverPath your application can get it's regular\n     * pages from a regular web server, but the EasyRTC library can still reach the\n     * socket server.\n     * @param {String} socketUrl\n     * @param {Object} options an optional dictionary of options for socket.io's connect method.\n     * The default is {'connect timeout': 10000,'force new connection': true }\n     * @example\n     *     easyrtc.setSocketUrl(\":8080\", options);\n     */\n    this.setSocketUrl = function(socketUrl, options) {\n        logDebug(\"WebRTC signaling server URL set to \" + socketUrl);\n        serverPath = socketUrl;\n        if( options ) {\n            connectionOptions = options;\n        }\n    };\n\n    /**\n     * Sets the user name associated with the connection.\n     * @param {String} username must obey standard identifier conventions.\n     * @returns {Boolean} true if the call succeeded, false if the username was invalid.\n     * @example\n     *    if( !easyrtc.setUsername(\"JohnSmith\") ){\n     *        console.error(\"bad user name);\n     *    }\n     *\n     */\n    this.setUsername = function(username) {\n        if( self.myEasyrtcid ) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"easyrtc.setUsername called after authentication\");\n            return false;\n        }\n        else if (self.isNameValid(username)) {\n            self.username = username;\n            return true;\n        }\n        else {\n            self.showError(self.errCodes.BAD_NAME, self.format(self.getConstantString(\"badUserName\"), username));\n            return false;\n        }\n    };\n\n    /**\n     * Get an array of easyrtcids that are using a particular username\n     * @param {String} username - the username of interest.\n     * @param {String} room - an optional room name argument limiting results to a particular room.\n     * @returns {Array} an array of {easyrtcid:id, roomName: roomName}.\n     */\n    this.usernameToIds = function(username, room) {\n        var results = [];\n        var id, roomName;\n        for (roomName in lastLoggedInList) {\n            if (!lastLoggedInList.hasOwnProperty(roomName)) {\n                continue;\n            }\n            if (room && roomName !== room) {\n                continue;\n            }\n            for (id in lastLoggedInList[roomName]) {\n                if (!lastLoggedInList[roomName].hasOwnProperty(id)) {\n                    continue;\n                }\n                if (lastLoggedInList[roomName][id].username === username) {\n                    results.push({\n                        easyrtcid: id,\n                        roomName: roomName\n                    });\n                }\n            }\n        }\n        return results;\n    };\n\n    /**\n     * Returns another peers API field, if it exists.\n     * @param {type} roomName\n     * @param {type} easyrtcid\n     * @param {type} fieldName\n     * @returns {Object}  Undefined if the attribute does not exist, its value otherwise.\n     */\n    this.getRoomApiField = function(roomName, easyrtcid, fieldName) {\n        if (lastLoggedInList[roomName] &&\n                lastLoggedInList[roomName][easyrtcid] &&\n                lastLoggedInList[roomName][easyrtcid].apiField &&\n                lastLoggedInList[roomName][easyrtcid].apiField[fieldName]) {\n            return lastLoggedInList[roomName][easyrtcid].apiField[fieldName].fieldValue;\n        }\n        else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Set the authentication credential if needed.\n     * @param {Object} credentialParm - a JSONable object.\n     */\n    this.setCredential = function(credentialParm) {\n        try {\n            JSON.stringify(credentialParm);\n            credential = credentialParm;\n            return true;\n        }\n        catch (oops) {\n            self.showError(self.errCodes.BAD_CREDENTIAL, \"easyrtc.setCredential passed a non-JSON-able object\");\n            throw \"easyrtc.setCredential passed a non-JSON-able object\";\n        }\n    };\n\n    /**\n     * Sets the listener for socket disconnection by external (to the API) reasons.\n     * @param {Function} disconnectListener takes no arguments and is not called as a result of calling easyrtc.disconnect.\n     * @example\n     *    easyrtc.setDisconnectListener(function(){\n     *        easyrtc.showError(\"SYSTEM-ERROR\", \"Lost our connection to the socket server\");\n     *    });\n     */\n    this.setDisconnectListener = function(disconnectListener) {\n        self.disconnectListener = disconnectListener;\n    };\n\n    /**\n     * Convert an easyrtcid to a user name. This is useful for labeling buttons and messages\n     * regarding peers.\n     * @param {String} easyrtcid\n     * @return {String} the username associated with the easyrtcid, or the easyrtcid if there is\n     * no associated username.\n     * @example\n     *    console.log(easyrtcid + \" is actually \" + easyrtc.idToName(easyrtcid));\n     */\n    this.idToName = function(easyrtcid) {\n        var roomName;\n        for (roomName in lastLoggedInList) {\n            if (!lastLoggedInList.hasOwnProperty(roomName)) {\n                continue;\n            }\n            if (lastLoggedInList[roomName][easyrtcid]) {\n                if (lastLoggedInList[roomName][easyrtcid].username) {\n                    return lastLoggedInList[roomName][easyrtcid].username;\n                }\n            }\n        }\n        return easyrtcid;\n    };\n\n    /* used in easyrtc.connect */\n    /** @private */\n    this.webSocket = null;\n    /** @private */\n    var pc_config = {};\n    /** @private */\n    var pc_config_to_use = null;\n    /** @private */\n    var use_fresh_ice_each_peer = false;\n\n    /**\n     * Determines whether fresh ice server configuration should be requested from the server for each peer connection.\n     * @param {Boolean} value the default is false.\n     */\n    this.setUseFreshIceEachPeerConnection = function(value) {\n        use_fresh_ice_each_peer = value;\n    };\n\n    /**\n     * Returns the last ice config supplied by the EasyRTC server. This function is not normally used, it is provided\n     * for people who want to try filtering ice server configuration on the client.\n     * @return {Object} which has the form {iceServers:[ice_server_entry, ice_server_entry, ...]}\n     */\n    this.getServerIce = function() {\n        return pc_config;\n    };\n\n    /**\n     * Sets the ice server configuration that will be used in subsequent calls. You only need this function if you are filtering\n     * the ice server configuration on the client or if you are using TURN certificates that have a very short lifespan.\n     * @param {Object} ice An object with iceServers element containing an array of ice server entries.\n     * @example\n     *     easyrtc.setIceUsedInCalls( {\"iceServers\": [\n     *      {\n     *         \"url\": \"stun:stun.sipgate.net\"\n     *      },\n     *      {\n     *         \"url\": \"stun:217.10.68.152\"\n     *      },\n     *      {\n     *         \"url\": \"stun:stun.sipgate.net:10000\"\n     *      }\n     *      ]});\n     *      easyrtc.call(...);\n     */\n    this.setIceUsedInCalls = function(ice) {\n        if (!ice.iceServers) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Bad ice configuration passed to easyrtc.setIceUsedInCalls\");\n        }\n        else {\n            pc_config_to_use = ice;\n        }\n    };\n\n    /** @private */\n    function getRemoteStreamByName(peerConn, otherUser, streamName) {\n                    \n        var keyToMatch = null;\n        var remoteStreams = peerConn.pc.getRemoteStreams();\n\n        // No streamName lead to default \n        if (!streamName) {\n            streamName = \"default\";\n        }\n\n        // default lead to first if available\n        if (streamName === \"default\") {\n            if (remoteStreams.length > 0) {\n                return remoteStreams[0];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Get mediaIds from user roomData\n        for (var roomName in self.roomData) {\n            if (self.roomData.hasOwnProperty(roomName)) {\n                var mediaIds = self.getRoomApiField(roomName, otherUser, \"mediaIds\");\n                keyToMatch = mediaIds ? mediaIds[streamName] : null;\n                if (keyToMatch) {\n                    break;\n                }\n            }\n        }\n\n        // \n        if (!keyToMatch) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"remote peer does not have media stream called \" + streamName);\n        }\n\n        // \n        for (var i = 0; i < remoteStreams.length; i++) {\n            var remoteId;\n            if (remoteStreams[i].id) {\n                remoteId = remoteStreams[i].id;\n            }  else {\n                remoteId = \"default\";\n            }\n\n            if (\n                !keyToMatch || // No match\n                    remoteId === keyToMatch || // Full match\n                        remoteId.indexOf(keyToMatch) === 0 // Partial match\n            ) {\n                return remoteStreams[i];\n            }\n\n        }\n\n        return null;\n    }\n\n    /**\n     * @private\n     * @param {string} easyrtcid\n     * @param {boolean} checkAudio\n     * @param {string} streamName\n     */\n    function _haveTracks(easyrtcid, checkAudio, streamName) {\n        var stream, peerConnObj;\n        if (!easyrtcid) {\n            stream = getLocalMediaStreamByName(streamName);\n        }\n        else {\n            peerConnObj = peerConns[easyrtcid];\n            if (!peerConnObj) {\n                self.showError(self.errCodes.DEVELOPER_ERR, \"haveTracks called about a peer you don't have a connection to\");\n                return false;\n            }\n            stream = getRemoteStreamByName(peerConns[easyrtcid], easyrtcid, streamName);\n        }\n        if (!stream) {\n            return false;\n        }\n\n        var tracks;\n        try {\n\n            if (checkAudio) {\n                tracks = stream.getAudioTracks();\n            }\n            else {\n                tracks = stream.getVideoTracks();\n            }\n\n        } catch (oops) {\n            // TODO why do we return true here ?\n            return true;\n        }\n\n        if (!tracks) {\n            return false;\n        }\n\n        return tracks.length > 0;\n    }\n\n    /** Determines if a particular peer2peer connection has an audio track.\n     * @param {String} easyrtcid - the id of the other caller in the connection. If easyrtcid is not supplied, checks the local media.\n     * @param {String} streamName - an optional stream id.\n     * @return {Boolean} true if there is an audio track or the browser can't tell us.\n     */\n    this.haveAudioTrack = function(easyrtcid, streamName) {\n        return _haveTracks(easyrtcid, true, streamName);\n    };\n\n    /** Determines if a particular peer2peer connection has a video track.\n     * @param {String} easyrtcid - the id of the other caller in the connection. If easyrtcid is not supplied, checks the local media.\n     * @param {String} streamName - an optional stream id.     *\n     * @return {Boolean} true if there is an video track or the browser can't tell us.\n     */\n    this.haveVideoTrack = function(easyrtcid, streamName) {\n        return _haveTracks(easyrtcid, false, streamName);\n    };\n\n    /**\n     * Gets a data field associated with a room.\n     * @param {String} roomName - the name of the room.\n     * @param {String} fieldName - the name of the field.\n     * @return {Object} dataValue - the value of the field if present, undefined if not present.\n     */\n    this.getRoomField = function(roomName, fieldName) {\n        var fields = self.getRoomFields(roomName);\n        return (!fields || !fields[fieldName]) ? undefined : fields[fieldName].fieldValue;\n    };\n\n    /** @private */\n    var fields = null;\n\n    /** @private */\n    var preallocatedSocketIo = null;\n\n    /** @private */\n    var closedChannel = null;\n\n    //\n    // easyrtc.disconnect performs a clean disconnection of the client from the server.\n    //\n    function disconnectBody() {\n        var key;\n        self.loggingOut = true;\n        offersPending = {};\n        acceptancePending = {};\n        self.disconnecting = true;\n        closedChannel = self.webSocket;\n        if (self.webSocketConnected) {\n            if (!preallocatedSocketIo) {\n                self.webSocket.close();\n            }\n            self.webSocketConnected = false;\n        }\n        self.hangupAll();\n        if (roomOccupantListener) {\n            for (key in lastLoggedInList) {\n                if (lastLoggedInList.hasOwnProperty(key)) {\n                    roomOccupantListener(key, {}, false);\n                }\n            }\n        }\n        lastLoggedInList = {};\n        self.emitEvent(\"roomOccupant\", {});\n        self.roomData = {};\n        self.roomJoin = {};\n        self.loggingOut = false;\n        self.myEasyrtcid = null;\n        self.disconnecting = false;\n        oldConfig = {};\n    }\n\n    /**\n     * Disconnect from the EasyRTC server.\n     * @example\n     *    easyrtc.disconnect();\n     */\n    this.disconnect = function() {\n\n        logDebug(\"attempt to disconnect from WebRTC signalling server\");\n\n        self.disconnecting = true;\n        self.hangupAll();\n        self.loggingOut = true;\n        //\n        // The hangupAll may try to send configuration information back to the server.\n        // Collecting that information is asynchronous, we don't actually close the\n        // connection until it's had a chance to be sent. We allocate 100ms for collecting\n        // the info, so 250ms should be sufficient for the disconnecting.\n        //\n        setTimeout(function() {\n            if (self.webSocket) {\n                try {\n                    self.webSocket.disconnect();\n                } catch (e) {\n                    // we don't really care if this fails.\n                }\n\n                closedChannel = self.webSocket;\n                self.webSocket = 0;\n            }\n            self.loggingOut = false;\n            self.disconnecting = false;\n            if (roomOccupantListener) {\n                roomOccupantListener(null, {}, false);\n            }\n            self.emitEvent(\"roomOccupant\", {});\n            oldConfig = {};\n        }, 250);\n    };\n\n    /** @private */\n    //\n    // This function is used to send WebRTC signaling messages to another client. These messages all the form:\n    //   destUser: some id or null\n    //   msgType: one of [\"offer\"/\"answer\"/\"candidate\",\"reject\",\"hangup\", \"getRoomList\"]\n    //   msgData: either null or an SDP record\n    //   successCallback: a function with the signature  function(msgType, wholeMsg);\n    //   errorCallback: a function with signature function(errorCode, errorText)\n    //\n    function sendSignalling(destUser, msgType, msgData, successCallback, errorCallback) {\n        if (!self.webSocket) {\n            throw \"Attempt to send message without a valid connection to the server.\";\n        }\n        else {\n            var dataToShip = {\n                msgType: msgType\n            };\n            if (destUser) {\n                dataToShip.targetEasyrtcid = destUser;\n            }\n            if (msgData) {\n                dataToShip.msgData = msgData;\n            }\n\n            logDebug(\"sending socket message \" + JSON.stringify(dataToShip));\n\n            self.webSocket.json.emit(\"easyrtcCmd\", dataToShip,\n                    function(ackMsg) {\n                        if (ackMsg.msgType !== \"error\") {\n                            if (!ackMsg.hasOwnProperty(\"msgData\")) {\n                                ackMsg.msgData = null;\n                            }\n                            if (successCallback) {\n                                successCallback(ackMsg.msgType, ackMsg.msgData);\n                            }\n                        }\n                        else {\n                            if (errorCallback) {\n                                errorCallback(ackMsg.msgData.errorCode, ackMsg.msgData.errorText);\n                            }\n                            else {\n                                self.showError(ackMsg.msgData.errorCode, ackMsg.msgData.errorText);\n                            }\n                        }\n                    }\n            );\n        }\n    }\n\n    /** @private */\n    //\n    // This function is used to send large messages. it sends messages that have a transfer field\n    // so that the receiver knows it's a transfer message. To differentiate the transfers, a\n    // transferId is generated and passed for each message.\n    //\n    var sendByChunkUidCounter = 0;\n    /** @private */\n    function sendByChunkHelper(destUser, msgData) {\n        var transferId = destUser + '-' + sendByChunkUidCounter++;\n\n        var pos, len, startMessage, message, endMessage;\n        var numberOfChunks = Math.ceil(msgData.length / self.maxP2PMessageLength);\n        startMessage = {\n            transfer: 'start',\n            transferId: transferId,\n            parts: numberOfChunks\n        };\n\n        endMessage = {\n            transfer: 'end',\n            transferId: transferId\n        };\n\n        peerConns[destUser].dataChannelS.send(JSON.stringify(startMessage));\n\n        for (pos = 0, len = msgData.length; pos < len; pos += self.maxP2PMessageLength) {\n            message = {\n                transferId: transferId,\n                data: msgData.substr(pos, self.maxP2PMessageLength),\n                transfer: 'chunk'\n            };\n            peerConns[destUser].dataChannelS.send(JSON.stringify(message));\n        }\n\n        peerConns[destUser].dataChannelS.send(JSON.stringify(endMessage));\n    }\n\n    /**\n     *Sends data to another user using previously established data channel. This method will\n     * fail if no data channel has been established yet. Unlike the easyrtc.sendWS method,\n     * you can't send a dictionary, convert dictionaries to strings using JSON.stringify first.\n     * What data types you can send, and how large a data type depends on your browser.\n     * @param {String} destUser (an easyrtcid)\n     * @param {String} msgType - the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object.\n     * @example\n     *     easyrtc.sendDataP2P(someEasyrtcid, \"roomData\", {room:499, bldgNum:'asd'});\n     */\n    this.sendDataP2P = function(destUser, msgType, msgData) {\n\n        var flattenedData = JSON.stringify({msgType: msgType, msgData: msgData});\n        logDebug(\"sending p2p message to \" + destUser + \" with data=\" + JSON.stringify(flattenedData));\n\n        if (!peerConns[destUser]) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to send data peer to peer without a connection to \" + destUser + ' first.');\n        }\n        else if (!peerConns[destUser].dataChannelS) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to send data peer to peer without establishing a data channel to \" + destUser + ' first.');\n        }\n        else if (!peerConns[destUser].dataChannelReady) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to use data channel to \" + destUser + \" before it's ready to send.\");\n        }\n        else {\n            try {\n                if (flattenedData.length > self.maxP2PMessageLength) {\n                    sendByChunkHelper(destUser, flattenedData);\n                } else {\n                    peerConns[destUser].dataChannelS.send(flattenedData);\n                }\n            } catch (sendDataErr) {\n                logDebug(\"sendDataP2P error: \", sendDataErr);\n                throw sendDataErr;\n            }\n        }\n    };\n\n    /** Sends data to another user using websockets. The easyrtc.sendServerMessage or easyrtc.sendPeerMessage methods\n     * are wrappers for this method; application code should use them instead.\n     * @param {String} destination - either a string containing the easyrtcId of the other user, or an object containing some subset of the following fields: targetEasyrtcid, targetGroup, targetRoom.\n     * Specifying multiple fields restricts the scope of the destination (operates as a logical AND, not a logical OR).\n     * @param {String} msgType -the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object.\n     * @param {Function} ackhandler - by default, the ackhandler handles acknowledgments from the server that your message was delivered to it's destination.\n     * However, application logic in the server can over-ride this. If you leave this null, a stub ackHandler will be used. The ackHandler\n     * gets passed a message with the same msgType as your outgoing message, or a message type of \"error\" in which case\n     * msgData will contain a errorCode and errorText fields.\n     * @example\n     *    easyrtc.sendDataWS(someEasyrtcid, \"setPostalAddress\", {room:499, bldgNum:'asd'},\n     *      function(ackMsg){\n     *          console.log(\"saw the following acknowledgment \" + JSON.stringify(ackMsg));\n     *      }\n     *    );\n     */\n    this.sendDataWS = function(destination, msgType, msgData, ackhandler) {\n        logDebug(\"sending client message via websockets to \" + destination + \" with data=\" + JSON.stringify(msgData));\n\n        if (!ackhandler) {\n            ackhandler = function(msg) {\n                if (msg.msgType === \"error\") {\n                    self.showError(msg.msgData.errorCode, msg.msgData.errorText);\n                }\n            };\n        }\n\n        var outgoingMessage = {\n            msgType: msgType,\n            msgData: msgData\n        };\n\n        if (destination) {\n            if (typeof destination === 'string') {\n                outgoingMessage.targetEasyrtcid = destination;\n            }\n            else if (typeof destination === 'object') {\n                if (destination.targetEasyrtcid) {\n                    outgoingMessage.targetEasyrtcid = destination.targetEasyrtcid;\n                }\n                if (destination.targetRoom) {\n                    outgoingMessage.targetRoom = destination.targetRoom;\n                }\n                if (destination.targetGroup) {\n                    outgoingMessage.targetGroup = destination.targetGroup;\n                }\n            }\n        }\n\n        if (self.webSocket) {\n            self.webSocket.json.emit(\"easyrtcMsg\", outgoingMessage, ackhandler);\n        }\n        else {\n            logDebug(\"websocket failed because no connection to server\");\n\n            throw \"Attempt to send message without a valid connection to the server.\";\n        }\n    };\n\n    /** Sends data to another user. This method uses data channels if one has been set up, or websockets otherwise.\n     * @param {String} destUser - a string containing the easyrtcId of the other user.\n     * Specifying multiple fields restricts the scope of the destination (operates as a logical AND, not a logical OR).\n     * @param {String} msgType -the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object.\n     * @param {Function} ackHandler - a function which receives acknowledgments. May only be invoked in\n     *  the websocket case.\n     * @example\n     *    easyrtc.sendData(someEasyrtcid, \"roomData\",  {room:499, bldgNum:'asd'},\n     *       function ackHandler(msgType, msgData);\n     *    );\n     */\n    this.sendData = function(destUser, msgType, msgData, ackHandler) {\n        if (peerConns[destUser] && peerConns[destUser].dataChannelReady) {\n            self.sendDataP2P(destUser, msgType, msgData);\n        }\n        else {\n            self.sendDataWS(destUser, msgType, msgData, ackHandler);\n        }\n    };\n\n    /**\n     * Sends a message to another peer on the easyrtcMsg channel.\n     * @param {String} destination - either a string containing the easyrtcId of the other user, or an object containing some subset of the following fields: targetEasyrtcid, targetGroup, targetRoom.\n     * Specifying multiple fields restricts the scope of the destination (operates as a logical AND, not a logical OR).\n     * @param {String} msgType - the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object with the message contents.\n     * @param {function(String, Object)} successCB - a callback function with results from the server.\n     * @param {function(String, String)} failureCB - a callback function to handle errors.\n     * @example\n     *     easyrtc.sendPeerMessage(otherUser, 'offer_candy', {candy_name:'mars'},\n     *             function(msgType, msgBody ){\n     *                console.log(\"message was sent\");\n     *             },\n     *             function(errorCode, errorText){\n     *                console.log(\"error was \" + errorText);\n     *             });\n     */\n    this.sendPeerMessage = function(destination, msgType, msgData, successCB, failureCB) {\n        if (!destination) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"destination was null in sendPeerMessage\");\n        }\n\n        logDebug(\"sending peer message \" + JSON.stringify(msgData));\n\n        function ackHandler(response) {\n            if (response.msgType === \"error\") {\n                if (failureCB) {\n                    failureCB(response.msgData.errorCode, response.msgData.errorText);\n                }\n            }\n            else {\n                if (successCB) {\n                    // firefox complains if you pass an undefined as an parameter.\n                    successCB(response.msgType, response.msgData ? response.msgData : null);\n                }\n            }\n        }\n\n        self.sendDataWS(destination, msgType, msgData, ackHandler);\n    };\n\n    /**\n     * Sends a message to the application code in the server (ie, on the easyrtcMsg channel).\n     * @param {String} msgType - the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object with the message contents.\n     * @param {function(String, Object)} successCB - a callback function with results from the server.\n     * @param {function(String, String)} failureCB - a callback function to handle errors.\n     * @example\n     *     easyrtc.sendServerMessage('get_candy', {candy_name:'mars'},\n     *             function(msgType, msgData ){\n     *                console.log(\"got candy count of \" + msgData.barCount);\n     *             },\n     *             function(errorCode, errorText){\n     *                console.log(\"error was \" + errorText);\n     *             });\n     */\n    this.sendServerMessage = function(msgType, msgData, successCB, failureCB) {\n\n        var dataToShip = {msgType: msgType, msgData: msgData};\n        logDebug(\"sending server message \" + JSON.stringify(dataToShip));\n\n        function ackhandler(response) {\n            if (response.msgType === \"error\") {\n                if (failureCB) {\n                    failureCB(response.msgData.errorCode, response.msgData.errorText);\n                }\n            }\n            else {\n                if (successCB) {\n                    successCB(response.msgType, response.msgData ? response.msgData : null);\n                }\n            }\n        }\n\n        self.sendDataWS(null, msgType, msgData, ackhandler);\n    };\n\n    /** Sends the server a request for the list of rooms the user can see.\n     * You must have already be connected to use this function.\n     * @param {function(Object)} callback - on success, this function is called with a map of the form  { roomName:{\"roomName\":String, \"numberClients\": Number}}.\n     * The roomName appears as both the key to the map, and as the value of the \"roomName\" field.\n     * @param {function(String, String)} errorCallback   is called on failure. It gets an errorCode and errorText as it's too arguments.\n     * @example\n     *    easyrtc.getRoomList(\n     *        function(roomList){\n     *           for(roomName in roomList){\n     *              console.log(\"saw room \" + roomName);\n     *           }\n     *         },\n     *         function(errorCode, errorText){\n     *            easyrtc.showError(errorCode, errorText);\n     *         }\n     *    );\n     */\n    this.getRoomList = function(callback, errorCallback) {\n        sendSignalling(null, \"getRoomList\", null,\n                function(msgType, msgData) {\n                    callback(msgData.roomList);\n                },\n                function(errorCode, errorText) {\n                    if (errorCallback) {\n                        errorCallback(errorCode, errorText);\n                    }\n                    else {\n                        self.showError(errorCode, errorText);\n                    }\n                }\n        );\n    };\n\n    /** Value returned by easyrtc.getConnectStatus if the other user isn't connected to us. */\n    this.NOT_CONNECTED = \"not connected\";\n\n    /** Value returned by easyrtc.getConnectStatus if the other user is in the process of getting connected */\n    this.BECOMING_CONNECTED = \"connection in progress to us.\";\n\n    /** Value returned by easyrtc.getConnectStatus if the other user is connected to us. */\n    this.IS_CONNECTED = \"is connected\";\n\n    /**\n     * Check if the client has a peer-2-peer connection to another user.\n     * The return values are text strings so you can use them in debugging output.\n     *  @param {String} otherUser - the easyrtcid of the other user.\n     *  @return {String} one of the following values: easyrtc.NOT_CONNECTED, easyrtc.BECOMING_CONNECTED, easyrtc.IS_CONNECTED\n     *  @example\n     *     if( easyrtc.getConnectStatus(otherEasyrtcid) == easyrtc.NOT_CONNECTED ){\n     *         easyrtc.call(otherEasyrtcid,\n     *                  function(){ console.log(\"success\"); },\n     *                  function(){ console.log(\"failure\"); });\n     *     }\n     */\n    this.getConnectStatus = function(otherUser) {\n        if (!peerConns.hasOwnProperty(otherUser)) {\n            return self.NOT_CONNECTED;\n        }\n        var peer = peerConns[otherUser];\n        if ((peer.sharingAudio || peer.sharingVideo) && !peer.startedAV) {\n            return self.BECOMING_CONNECTED;\n        }\n        else if (peer.sharingData && !peer.dataChannelReady) {\n            return self.BECOMING_CONNECTED;\n        }\n        else {\n            return self.IS_CONNECTED;\n        }\n    };\n\n    /**\n     * @private\n     */\n    function buildPeerConstraints() {\n        var options = [];\n        options.push({'DtlsSrtpKeyAgreement': 'true'}); // for interoperability\n        return {optional: options};\n    }\n\n    /** @private */\n    function sendQueuedCandidates(peer, onSignalSuccess, onSignalFailure) {\n        var i;\n        for (i = 0; i < peerConns[peer].candidatesToSend.length; i++) {\n            sendSignalling(\n                    peer,\n                    \"candidate\",\n                    peerConns[peer].candidatesToSend[i],\n                    onSignalSuccess,\n                    onSignalFailure\n                    );\n        }\n    }\n\n    /** @private */\n    //\n    // This function calls the users onStreamClosed handler, passing it the easyrtcid of the peer, the stream itself,\n    // and the name of the stream.\n    //\n    function emitOnStreamClosed(easyrtcid, stream) {\n        if (!peerConns[easyrtcid]) {\n            return;\n        }\n        var streamName;\n        var id;\n        if (stream.id) {\n            id = stream.id;\n        }\n        else {\n            id = \"default\";\n        }\n        streamName = peerConns[easyrtcid].remoteStreamIdToName[id] || \"default\";\n        if (peerConns[easyrtcid].liveRemoteStreams[streamName] &&\n            self.onStreamClosed) {\n            delete peerConns[easyrtcid].liveRemoteStreams[streamName];\n            self.onStreamClosed(easyrtcid, stream, streamName);\n        }\n        delete peerConns[easyrtcid].remoteStreamIdToName[id];\n    }\n\n    /** @private */\n    function onRemoveStreamHelper(easyrtcid, stream) {\n        if (peerConns[easyrtcid]) {\n            emitOnStreamClosed(easyrtcid, stream);\n            updateConfigurationInfo();\n            if (peerConns[easyrtcid].pc) {\n                 try {\n                    peerConns[easyrtcid].pc.removeStream(stream);\n                 } catch( err) {}\n            }\n        }\n    }\n\n    /** @private */\n    function buildDeltaRecord(added, deleted) {\n        function objectNotEmpty(obj) {\n            var i;\n            for (i in obj) {\n                if (obj.hasOwnProperty(i)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        var result = {};\n        if (objectNotEmpty(added)) {\n            result.added = added;\n        }\n\n        if (objectNotEmpty(deleted)) {\n            result.deleted = deleted;\n        }\n\n        if (objectNotEmpty(result)) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    }\n\n    /** @private */\n    function findDeltas(oldVersion, newVersion) {\n        var i;\n        var added = {}, deleted = {};\n        var subPart;\n        for (i in newVersion) {\n            if (newVersion.hasOwnProperty(i)) {\n                if (oldVersion === null || typeof oldVersion[i] === 'undefined') {\n                    added[i] = newVersion[i];\n                }\n                else if (typeof newVersion[i] === 'object') {\n                    subPart = findDeltas(oldVersion[i], newVersion[i]);\n                    if (subPart !== null) {\n                        added[i] = newVersion[i];\n                    }\n                }\n                else if (newVersion[i] !== oldVersion[i]) {\n                    added[i] = newVersion[i];\n                }\n            }\n        }\n        for (i in oldVersion) {\n            if (newVersion.hasOwnProperty(i)) {\n                if (typeof newVersion[i] === 'undefined') {\n                    deleted[i] = oldVersion[i];\n                }\n            }\n        }\n\n        return buildDeltaRecord(added, deleted);\n    }\n\n    /** @private */\n    //\n    // this function collects configuration info that will be sent to the server.\n    // It returns that information, leaving it the responsibility of the caller to\n    // do the actual sending.\n    //\n    function collectConfigurationInfo(/* forAuthentication */) {\n        var p2pList = {};\n        var i;\n        for (i in peerConns) {\n            if (!peerConns.hasOwnProperty(i)) {\n                continue;\n            }\n            p2pList[i] = {\n                connectTime: peerConns[i].connectTime,\n                isInitiator: !!peerConns[i].isInitiator\n            };\n        }\n\n        var newConfig = {\n            userSettings: {\n                sharingAudio: !!haveAudioVideo.audio,\n                sharingVideo: !!haveAudioVideo.video,\n                sharingData: !!dataEnabled,\n                nativeVideoWidth: self.nativeVideoWidth,\n                nativeVideoHeight: self.nativeVideoHeight,\n                windowWidth: window.innerWidth,\n                windowHeight: window.innerHeight,\n                screenWidth: window.screen.width,\n                screenHeight: window.screen.height,\n                cookieEnabled: navigator.cookieEnabled,\n                os: navigator.oscpu,\n                language: navigator.language\n            }\n        };\n\n        if (!isEmptyObj(p2pList)) {\n            newConfig.p2pList = p2pList;\n        }\n\n        return newConfig;\n    }\n\n    /** @private */\n    function updateConfiguration() {\n\n        var newConfig = collectConfigurationInfo(false);\n        //\n        // we need to give the getStats calls a chance to fish out the data.\n        // The longest I've seen it take is 5 milliseconds so 100 should be overkill.\n        //\n        var sendDeltas = function() {\n            var alteredData = findDeltas(oldConfig, newConfig);\n            //\n            // send all the configuration information that changes during the session\n            //\n            if (alteredData) {\n                logDebug(\"cfg=\" + JSON.stringify(alteredData.added));\n\n                if (self.webSocket) {\n                    sendSignalling(null, \"setUserCfg\", {setUserCfg: alteredData.added}, null, null);\n                }\n            }\n            oldConfig = newConfig;\n        };\n        if (oldConfig === {}) {\n            sendDeltas();\n        }\n        else {\n            setTimeout(sendDeltas, 100);\n        }\n    }\n\n    // Parse the uint32 PRIORITY field into its constituent parts from RFC 5245,\n    // type preference, local preference, and (256 - component ID).\n    // ex: 126 | 32252 | 255 (126 is host preference, 255 is component ID 1)\n    function formatPriority(priority) {\n        var s = '';\n        s += (priority >> 24);\n        s += ' | ';\n        s += (priority >> 8) & 0xFFFF;\n        s += ' | ';\n        s += priority & 0xFF;\n        return s;\n    }\n\n    // Parse a candidate:foo string into an object, for easier use by other methods.\n    /** @private */\n    function parseCandidate(text) {\n        var candidateStr = 'candidate:';\n        var pos = text.indexOf(candidateStr) + candidateStr.length;\n        var fields = text.substr(pos).split(' ');\n        return {\n            'component': fields[1],\n            'type': fields[7],\n            'foundation': fields[0],\n            'protocol': fields[2],\n            'address': fields[4],\n            'port': fields[5],\n            'priority': formatPriority(fields[3])\n        };\n    }\n\n    /** @private */\n    function processCandicate(candicate) {\n        self._candicates = self._candicates || [];\n        self._candicates.push(parseCandidate(candicate));\n    }\n\n    function processAddedStream(otherUser, theStream) {\n        if (!peerConns[otherUser] ||  peerConns[otherUser].cancelled) {\n            return;\n        }\n\n        var peerConn = peerConns[otherUser];\n\n        if (!peerConn.startedAV) {\n            peerConn.startedAV = true;\n            peerConn.sharingAudio = haveAudioVideo.audio;\n            peerConn.sharingVideo = haveAudioVideo.video;\n            peerConn.connectTime = new Date().getTime();\n            if (peerConn.callSuccessCB) {\n                if (peerConn.sharingAudio || peerConn.sharingVideo) {\n                    peerConn.callSuccessCB(otherUser, \"audiovideo\");\n                }\n            }\n            if (self.audioEnabled || self.videoEnabled) {\n                updateConfiguration();\n            }\n        }\n\n        var remoteName = getNameOfRemoteStream(otherUser, theStream.id || \"default\");\n        if (!remoteName) {\n            remoteName = \"default\";\n        }\n        peerConn.remoteStreamIdToName[theStream.id || \"default\"] = remoteName;\n        peerConn.liveRemoteStreams[remoteName] = true;\n        theStream.streamName = remoteName;\n        if (self.streamAcceptor) {\n            self.streamAcceptor(otherUser, theStream, remoteName);\n            //\n            // Inform the other user that the stream they provided has been received.\n            // This should be moved into signalling at some point\n            //\n            self.sendDataWS(otherUser, \"easyrtc_streamReceived\", {streamName:remoteName},function(){});\n        }\n    }\n\n    function processAddedTrack(otherUser, peerStreams) {\n\n        if (!peerConns[otherUser] ||  peerConns[otherUser].cancelled) {\n            return;\n        }\n\n        var peerConn = peerConns[otherUser];\n        peerConn.trackTimers = peerConn.trackTimers || {};\n\n        // easyrtc thinks in terms of streams, not tracks.\n        // so we'll add a timeout when the first track event\n        // fires. Firefox produces two events (one of type \"video\",\n        // and one of type \"audio\".\n\n        for (var i = 0, l = peerStreams.length; i < l; i++) {\n            var peerStream = peerStreams[i],\n                streamId = peerStream.id || \"default\";\n            clearTimeout(peerConn.trackTimers[streamId]);\n            peerConn.trackTimers[streamId] = setTimeout(function(peerStream) {\n               processAddedStream(peerConn, otherUser, peerStream);\n            }.bind(peerStream), 100); // Bind peerStream\n        }\n    }\n\n    /** @private */\n    // TODO split buildPeerConnection it more thant 500 lines\n    function buildPeerConnection(otherUser, isInitiator, failureCB, streamNames) {\n        var pc;\n        var message;\n        var newPeerConn;\n        var iceConfig = pc_config_to_use ? pc_config_to_use : pc_config;\n\n        logDebug(\"building peer connection to \" + otherUser);\n\n        //\n        // we don't support data channels on chrome versions < 31\n        //\n\n        try {\n\n            pc = self.createRTCPeerConnection(iceConfig, buildPeerConstraints());\n\n            if (!pc) {\n                message = \"Unable to create PeerConnection object, check your ice configuration(\" + JSON.stringify(iceConfig) + \")\";\n                logDebug(message);\n                throw Error(message);\n            }\n\n            //\n            // turn off data channel support if the browser doesn't support it.\n            //\n\n            if (dataEnabled && typeof pc.createDataChannel === 'undefined') {\n                dataEnabled = false;\n            }\n\n            pc.onnegotiationneeded = function(event) {\n                if (\n                    peerConns[otherUser] &&\n                        (peerConns[otherUser].enableNegotiateListener)\n                ) {\n                    pc.createOffer(function(sdp) {\n                        if (sdpLocalFilter) {\n                            sdp.sdp = sdpLocalFilter(sdp.sdp);\n                        }\n                        pc.setLocalDescription(sdp, function() {\n                            self.sendPeerMessage(otherUser, \"__addedMediaStream\", {\n                                sdp: sdp\n                            });\n\n                        }, function() {\n                        });\n                    }, function(error) {\n                        logDebug(\"unexpected error in creating offer\");\n                    });\n                }\n            };\n\n            pc.onsignalingstatechange = function () {\n                \n                var eventTarget = event.currentTarget || event.target || pc,\n                    signalingState = eventTarget.signalingState || 'unknown';\n\n                if (signalingStateChangeListener) {\n                   signalingStateChangeListener(otherUser, eventTarget, signalingState);\n                }\n            };\n\n            pc.oniceconnectionstatechange = function(event) {\n\n                var eventTarget = event.currentTarget || event.target || pc,\n                    connState = eventTarget.iceConnectionState || 'unknown';\n\n                if (iceConnectionStateChangeListener) {\n                   iceConnectionStateChangeListener(otherUser, eventTarget, connState);\n                }\n\n                switch (connState) {\n                    case \"connected\":\n                        if (self.onPeerOpen ) {\n                            self.onPeerOpen(otherUser);\n                        }\n                        if (peerConns[otherUser] && peerConns[otherUser].callSuccessCB) {\n                            peerConns[otherUser].callSuccessCB(otherUser, \"connection\");\n                        }\n                        break;\n                    case \"failed\":\n                        if (failureCB) {\n                            failureCB(self.errCodes.NOVIABLEICE, \"No usable STUN/TURN path\");\n                        }\n                        delete peerConns[otherUser];\n                        break;\n                    case \"disconnected\":\n                        if (self.onPeerFailing) {\n                            self.onPeerFailing(otherUser);\n                        }\n                        if (peerConns[otherUser]) {\n                            peerConns[otherUser].failing = Date.now();\n                        }\n                        break;\n\n                    case \"closed\":\n                        if (self.onPeerClosed) {\n                            self.onPeerClosed(otherUser);\n                        }\n                        break;\n                    case \"completed\":\n                        if (peerConns[otherUser]) {\n                            if (peerConns[otherUser].failing && self.onPeerRecovered) {\n                                self.onPeerRecovered(otherUser, peerConns[otherUser].failing, Date.now());\n                            }\n                            delete peerConns[otherUser].failing;\n                         }\n                        break;\n                }\n            };\n\n            pc.onconnection = function() {\n                logDebug(\"onconnection called prematurely\");\n            };\n\n            newPeerConn = {\n                pc: pc,\n                candidatesToSend: [],\n                startedAV: false,\n                connectionAccepted: false,\n                isInitiator: isInitiator,\n                remoteStreamIdToName: {},\n                streamsAddedAcks: {},\n                liveRemoteStreams: {}\n            };\n\n            pc.onicecandidate = function(event) {\n                if (peerConns[otherUser] && peerConns[otherUser].cancelled) {\n                    return;\n                }\n                var candidateData;\n                if (event.candidate && peerConns[otherUser]) {\n                    candidateData = {\n                        type: 'candidate',\n                        label: event.candidate.sdpMLineIndex,\n                        id: event.candidate.sdpMid,\n                        candidate: event.candidate.candidate\n                    };\n\n                    if (iceCandidateFilter ) {\n                       candidateData = iceCandidateFilter(candidateData, false);\n                       if( !candidateData ) {\n                          return;\n                       }\n                    }\n                    //\n                    // some candidates include ip addresses of turn servers. we'll want those\n                    // later so we can see if our actual connection uses a turn server.\n                    // The keyword \"relay\" in the candidate identifies it as referencing a\n                    // turn server. The \\d symbol in the regular expression matches a number.\n                    //\n                    processCandicate(event.candidate.candidate);\n\n                    if (peerConns[otherUser].connectionAccepted) {\n                        sendSignalling(otherUser, \"candidate\", candidateData, null, function() {\n                            failureCB(self.errCodes.PEER_GONE, \"Candidate disappeared\");\n                        });\n                    }\n                    else {\n                        peerConns[otherUser].candidatesToSend.push(candidateData);\n                    }\n                }\n            };\n\n            pc.ontrack = function(event) {\n                logDebug(\"empty ontrack method invoked, which is expected\");\n                processAddedTrack(otherUser, event.streams);\n            };\n\n            pc.onaddstream = function(event) {\n                logDebug(\"empty onaddstream method invoked, which is expected\");\n                processAddedStream(otherUser, event.stream);\n            };\n\n            pc.onremovestream = function(event) {\n                logDebug(\"saw remove on remote media stream\");\n                onRemoveStreamHelper(otherUser, event.stream);\n            };\n\n            // Register PeerConn\n            peerConns[otherUser] = newPeerConn;\n\n        } catch (error) {\n            logDebug('buildPeerConnection error', error);\n            failureCB(self.errCodes.SYSTEM_ERR, error.message);\n            return null;\n        }\n\n        var i, stream;\n        if (streamNames) {\n            for (i = 0; i < streamNames.length; i++) {\n                stream = getLocalMediaStreamByName(streamNames[i]);\n                if (stream) {\n                    pc.addStream(stream);\n                }\n                else {\n                    logDebug(\"Developer error, attempt to access unknown local media stream \" + streamNames[i]);\n                }\n            }\n        }\n        else if (autoInitUserMedia && (self.videoEnabled || self.audioEnabled)) {\n            stream = self.getLocalStream();\n            pc.addStream(stream);\n        }\n\n        //\n        // This function handles data channel message events.\n        //\n        var pendingTransfer = {};\n        function dataChannelMessageHandler(event) {\n            logDebug(\"saw dataChannel.onmessage event: \", event.data);\n\n            if (event.data === \"dataChannelPrimed\") {\n                self.sendDataWS(otherUser, \"dataChannelPrimed\", \"\");\n            }\n            else {\n                //\n                // Chrome and Firefox Interop is passing a event with a strange data=\"\", perhaps\n                // as it's own form of priming message. Comparing the data against \"\" doesn't\n                // work, so I'm going with parsing and trapping the parse error.\n                //\n                var msg;\n\n                try {\n                    msg = JSON.parse(event.data);\n                } catch (err) {\n                    logDebug('Developer error, unable to parse event data');\n                }\n\n                if (msg) {\n                    if (msg.transfer && msg.transferId) {\n                        if (msg.transfer === 'start') {\n                            logDebug('start transfer #' + msg.transferId);\n\n                            var parts = parseInt(msg.parts);\n                            pendingTransfer = {\n                                chunks: [],\n                                parts: parts,\n                                transferId: msg.transferId\n                            };\n\n                        } else if (msg.transfer === 'chunk') {\n                            logDebug('got chunk for transfer #' + msg.transferId);\n\n                            // check data is valid\n                            if (!(typeof msg.data === 'string' && msg.data.length <= self.maxP2PMessageLength)) {\n                                logDebug('Developer error, invalid data');\n\n                                // check there's a pending transfer\n                            } else if (!pendingTransfer) {\n                                logDebug('Developer error, unexpected chunk');\n\n                            // check that transferId is valid\n                            } else if (msg.transferId !== pendingTransfer.transferId) {\n                                logDebug('Developer error, invalid transfer id');\n\n                            // check that the max length of transfer is not reached\n                            } else if (pendingTransfer.chunks.length + 1 > pendingTransfer.parts) {\n                                logDebug('Developer error, received too many chunks');\n\n                            } else {\n                                pendingTransfer.chunks.push(msg.data);\n                            }\n\n                        } else if (msg.transfer === 'end') {\n                            logDebug('end of transfer #' + msg.transferId);\n\n                            // check there's a pending transfer\n                            if (!pendingTransfer) {\n                                logDebug('Developer error, unexpected end of transfer');\n\n                            // check that transferId is valid\n                            } else if (msg.transferId !== pendingTransfer.transferId) {\n                                logDebug('Developer error, invalid transfer id');\n\n                            // check that all the chunks were received\n                            } else if (pendingTransfer.chunks.length !== pendingTransfer.parts) {\n                                logDebug('Developer error, received wrong number of chunks');\n\n                            } else {\n                                var chunkedMsg;\n                                try {\n                                    chunkedMsg = JSON.parse(pendingTransfer.chunks.join(''));\n                                } catch (err) {\n                                    logDebug('Developer error, unable to parse message');\n                                }\n\n                                if (chunkedMsg) {\n                                    self.receivePeerDistribute(otherUser, chunkedMsg, null);\n                                }\n                            }\n                            pendingTransfer = {  };\n\n                        } else {\n                            logDebug('Developer error, got an unknown transfer message' + msg.transfer);\n                        }\n                    } else {\n                        self.receivePeerDistribute(otherUser, msg, null);\n                    }\n                }\n            }\n        }\n\n        function initOutGoingChannel(otherUser) {\n            logDebug(\"saw initOutgoingChannel call\");\n\n            var dataChannel = pc.createDataChannel(dataChannelName, self.getDatachannelConstraints());\n            peerConns[otherUser].dataChannelS = dataChannel;\n            peerConns[otherUser].dataChannelR = dataChannel;\n            dataChannel.onmessage = dataChannelMessageHandler;\n            dataChannel.onopen = function(event) {\n                logDebug(\"saw dataChannel.onopen event\");\n\n                if (peerConns[otherUser]) {\n                    dataChannel.send(\"dataChannelPrimed\");\n                }\n            };\n            dataChannel.onclose = function(event) {\n                logDebug(\"saw dataChannelS.onclose event\");\n\n                if (peerConns[otherUser]) {\n                    peerConns[otherUser].dataChannelReady = false;\n                    delete peerConns[otherUser].dataChannelS;\n                }\n                if (onDataChannelClose) {\n                    onDataChannelClose(otherUser);\n                }\n\n                updateConfigurationInfo();\n            };\n        }\n\n        function initIncomingChannel(otherUser) {\n            logDebug(\"initializing incoming channel handler for \" + otherUser);\n\n            peerConns[otherUser].pc.ondatachannel = function(event) {\n\n                logDebug(\"saw incoming data channel\");\n\n                var dataChannel = event.channel;\n                peerConns[otherUser].dataChannelR = dataChannel;\n                peerConns[otherUser].dataChannelS = dataChannel;\n                peerConns[otherUser].dataChannelReady = true;\n                dataChannel.onmessage = dataChannelMessageHandler;\n                dataChannel.onclose = function(event) {\n                    logDebug(\"saw dataChannelR.onclose event\");\n\n                    if (peerConns[otherUser]) {\n                        peerConns[otherUser].dataChannelReady = false;\n                        delete peerConns[otherUser].dataChannelR;\n                    }\n                    if (onDataChannelClose) {\n                        onDataChannelClose(otherUser);\n                    }\n\n                    updateConfigurationInfo();\n                };\n                dataChannel.onopen = function(event) {\n                    logDebug(\"saw dataChannel.onopen event\");\n\n                    if (peerConns[otherUser]) {\n                        dataChannel.send(\"dataChannelPrimed\");\n                    }\n                };\n            };\n        }\n\n        //\n        //  added for interoperability\n        //\n        // TODO check if both sides have the same browser and versions\n        if (dataEnabled) {\n            self.setPeerListener(function() {\n                if (peerConns[otherUser]) {\n                    peerConns[otherUser].dataChannelReady = true;\n                    if (peerConns[otherUser].callSuccessCB) {\n                        peerConns[otherUser].callSuccessCB(otherUser, \"datachannel\");\n                    }\n                    if (onDataChannelOpen) {\n                        onDataChannelOpen(otherUser, true);\n                    }\n                    updateConfigurationInfo();\n                } else {\n                    logDebug(\"failed to setup outgoing channel listener\");\n                }\n            }, \"dataChannelPrimed\", otherUser);\n\n            if (isInitiator) {\n                try {\n\n                    initOutGoingChannel(otherUser);\n                } catch (channelErrorEvent) {\n                    logDebug(\"failed to init outgoing channel\");\n                    failureCB(self.errCodes.SYSTEM_ERR,\n                            self.formatError(channelErrorEvent));\n                }\n            }\n            if (!isInitiator) {\n                initIncomingChannel(otherUser);\n            }\n        }\n\n        pc.onconnection = function() {\n            logDebug(\"setup pc.onconnection \");\n        };\n\n        //\n        // Temporary support for responding to acknowledgements of about streams being added.\n        //\n        self.setPeerListener(function(easyrtcid, msgType, msgData, targeting){\n             if( newPeerConn.streamsAddedAcks[msgData.streamName]) {\n                 (newPeerConn.streamsAddedAcks[msgData.streamName])(easyrtcid, msgData.streamName);\n                 delete newPeerConn.streamsAddedAcks[msgData.streamName];\n             }\n        }, \"easyrtc_streamReceived\", otherUser);\n        return pc;\n    }\n\n    /** @private */\n    function doAnswerBody(caller, msgData, streamNames) {\n        var pc = buildPeerConnection(caller, false, function(message) {\n            self.showError(self.errCodes.SYSTEM_ERR, message);\n        }, streamNames);\n        var newPeerConn = peerConns[caller];\n        if (!pc) {\n            logDebug(\"buildPeerConnection failed. Call not answered\");\n            return;\n        }\n        var setLocalAndSendMessage1 = function(sessionDescription) {\n\n            if (newPeerConn.cancelled) {\n                return;\n            }\n\n            var sendAnswer = function() {\n                logDebug(\"sending answer\");\n\n                function onSignalSuccess() {\n                    logDebug(\"sending success\");\n                }\n\n                function onSignalFailure(errorCode, errorText) {\n                    logDebug(\"sending error\");\n                    delete peerConns[caller];\n                    self.showError(errorCode, errorText);\n                }\n\n                sendSignalling(caller, \"answer\", sessionDescription, onSignalSuccess, onSignalFailure);\n                peerConns[caller].connectionAccepted = true;\n                sendQueuedCandidates(caller, onSignalSuccess, onSignalFailure);\n\n                if (pc.connectDataConnection) {\n                    logDebug(\"calling connectDataConnection(5002,5001)\");\n                    pc.connectDataConnection(5002, 5001);\n                }\n            };\n            if (sdpLocalFilter) {\n                sessionDescription.sdp = sdpLocalFilter(sessionDescription.sdp);\n            }\n            pc.setLocalDescription(sessionDescription, sendAnswer, function(message) {\n                self.showError(self.errCodes.INTERNAL_ERR, \"setLocalDescription: \" + message);\n            });\n        };\n        var sd = new RTCSessionDescription(msgData);\n\n        if (!sd) {\n            throw \"Could not create the RTCSessionDescription\";\n        }\n\n        logDebug(\"sdp ||  \" + JSON.stringify(sd));\n\n        var invokeCreateAnswer = function() {\n            if (newPeerConn.cancelled) {\n                return;\n            }\n            pc.createAnswer(setLocalAndSendMessage1,\n                function(message) {\n                    self.showError(self.errCodes.INTERNAL_ERR, \"create-answer: \" + message);\n                },\n                receivedMediaConstraints);\n        };\n\n        logDebug(\"about to call setRemoteDescription in doAnswer\");\n\n        try {\n\n            if (sdpRemoteFilter) {\n                sd.sdp = sdpRemoteFilter(sd.sdp);\n            }\n            pc.setRemoteDescription(sd, invokeCreateAnswer, function(message) {\n                self.showError(self.errCodes.INTERNAL_ERR, \"set-remote-description: \" + message);\n            });\n        } catch (srdError) {\n            logDebug(\"set remote description failed\");\n            self.showError(self.errCodes.INTERNAL_ERR, \"setRemoteDescription failed: \" + srdError.message);\n        }\n    }\n\n    /** @private */\n    function doAnswer(caller, msgData, streamNames) {\n        if (!streamNames && autoInitUserMedia) {\n            var localStream = self.getLocalStream();\n            if (!localStream && (self.videoEnabled || self.audioEnabled)) {\n                self.initMediaSource(\n                        function() {\n                            doAnswer(caller, msgData);\n                        },\n                        function(errorCode, error) {\n                            self.showError(self.errCodes.MEDIA_ERR, self.format(self.getConstantString(\"localMediaError\")));\n                        });\n                return;\n            }\n        }\n        if (use_fresh_ice_each_peer) {\n            self.getFreshIceConfig(function(succeeded) {\n                if (succeeded) {\n                    doAnswerBody(caller, msgData, streamNames);\n                }\n                else {\n                    self.showError(self.errCodes.CALL_ERR, \"Failed to get fresh ice config\");\n                }\n            });\n        }\n        else {\n            doAnswerBody(caller, msgData, streamNames);\n        }\n    }\n\n\n    /** @private */\n    function callBody(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB, streamNames) {\n        acceptancePending[otherUser] = true;\n        var pc = buildPeerConnection(otherUser, true, callFailureCB, streamNames);\n        var message;\n        if (!pc) {\n            message = \"buildPeerConnection failed, call not completed\";\n            logDebug(message);\n            throw message;\n        }\n\n        peerConns[otherUser].callSuccessCB = callSuccessCB;\n        peerConns[otherUser].callFailureCB = callFailureCB;\n        peerConns[otherUser].wasAcceptedCB = wasAcceptedCB;\n        var peerConnObj = peerConns[otherUser];\n        var setLocalAndSendMessage0 = function(sessionDescription) {\n            if (peerConnObj.cancelled) {\n                return;\n            }\n            var sendOffer = function() {\n\n                sendSignalling(otherUser, \"offer\", sessionDescription, null, callFailureCB);\n            };\n            if (sdpLocalFilter) {\n                sessionDescription.sdp = sdpLocalFilter(sessionDescription.sdp);\n            }\n            pc.setLocalDescription(sessionDescription, sendOffer,\n                    function(errorText) {\n                        callFailureCB(self.errCodes.CALL_ERR, errorText);\n                    });\n        };\n        setTimeout(function() {\n            //\n            // if the call was cancelled, we don't want to continue getting the offer.\n            // we can tell the call was cancelled because there won't be a peerConn object\n            // for it.\n            //\n            if( !peerConns[otherUser]) {\n                return;\n            }\n            pc.createOffer(setLocalAndSendMessage0, function(errorObj) {\n                callFailureCB(self.errCodes.CALL_ERR, JSON.stringify(errorObj));\n            },\n                    receivedMediaConstraints);\n        }, 100);\n    }\n\n    /**\n     * Initiates a call to another user. If it succeeds, the streamAcceptor callback will be called.\n     * @param {String} otherUser - the easyrtcid of the peer being called.\n     * @param {Function} callSuccessCB (otherCaller, mediaType) - is called when the datachannel is established or the MediaStream is established. mediaType will have a value of \"audiovideo\" or \"datachannel\"\n     * @param {Function} callFailureCB (errorCode, errMessage) - is called if there was a system error interfering with the call.\n     * @param {Function} wasAcceptedCB (wasAccepted:boolean,otherUser:string) - is called when a call is accepted or rejected by another party. It can be left null.\n     * @param {Array} streamNames - optional array of streamNames.\n     * @example\n     *    easyrtc.call( otherEasyrtcid,\n     *        function(easyrtcid, mediaType){\n     *           console.log(\"Got mediaType \" + mediaType + \" from \" + easyrtc.idToName(easyrtcid));\n     *        },\n     *        function(errorCode, errMessage){\n     *           console.log(\"call to  \" + easyrtc.idToName(otherEasyrtcid) + \" failed:\" + errMessage);\n     *        },\n     *        function(wasAccepted, easyrtcid){\n     *            if( wasAccepted ){\n     *               console.log(\"call accepted by \" + easyrtc.idToName(easyrtcid));\n     *            }\n     *            else{\n     *                console.log(\"call rejected\" + easyrtc.idToName(easyrtcid));\n     *            }\n     *        });\n     */\n    this.call = function(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB, streamNames) {\n\n        if (streamNames) {\n            if (typeof streamNames === \"string\") { // accept a string argument if passed.\n                streamNames = [streamNames];\n            }\n            else if (typeof streamNames.length === \"undefined\") {\n                self.showError(self.errCodes.DEVELOPER_ERR, \"easyrtc.call passed bad streamNames\");\n                return;\n            }\n        }\n\n        logDebug(\"initiating peer to peer call to \" + otherUser +\n                    \" audio=\" + self.audioEnabled +\n                    \" video=\" + self.videoEnabled +\n                    \" data=\" + dataEnabled);\n\n\n        if (!self.supportsPeerConnections()) {\n            callFailureCB(self.errCodes.CALL_ERR, self.getConstantString(\"noWebrtcSupport\"));\n            return;\n        }\n\n        var message;\n        //\n        // If we are sharing audio/video and we haven't allocated the local media stream yet,\n        // we'll do so, recalling our self on success.\n        //\n        if (!streamNames && autoInitUserMedia) {\n            var stream = self.getLocalStream();\n            if (!stream && (self.audioEnabled || self.videoEnabled)) {\n                self.initMediaSource(function() {\n                    self.call(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB);\n                }, callFailureCB);\n                return;\n            }\n        }\n\n        if (!self.webSocket) {\n            message = \"Attempt to make a call prior to connecting to service\";\n            logDebug(message);\n            throw message;\n        }\n\n        //\n        // If B calls A, and then A calls B before accepting, then A should treat the attempt to\n        // call B as a positive offer to B's offer.\n        //\n        if (offersPending[otherUser]) {\n            wasAcceptedCB(true, otherUser);\n            doAnswer(otherUser, offersPending[otherUser], streamNames);\n            delete offersPending[otherUser];\n            self.callCancelled(otherUser, false);\n            return;\n        }\n\n        // do we already have a pending call?\n        if (typeof acceptancePending[otherUser] !== 'undefined') {\n            message = \"Call already pending acceptance\";\n            logDebug(message);\n            callFailureCB(self.errCodes.ALREADY_CONNECTED, message);\n            return;\n        }\n\n        if (use_fresh_ice_each_peer) {\n            self.getFreshIceConfig(function(succeeded) {\n                if (succeeded) {\n                    callBody(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB, streamNames);\n                }\n                else {\n                    callFailureCB(self.errCodes.CALL_ERR, \"Attempt to get fresh ice configuration failed\");\n                }\n            });\n        }\n        else {\n            callBody(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB, streamNames);\n        }\n    };\n\n    /** @private */\n    //\n    // this function check the deprecated MediaStream.ended attribute\n    // and new .active. Also fallback .enable on track for Firefox.\n    //\n    function isStreamActive(stream) {\n\n        var isActive;\n\n        if (stream.active === true || stream.ended === false)  {\n            isActive = true;\n        } else {\n            isActive = stream.getTracks().reduce(function (track) {\n                return track.enabled;\n            });\n        }\n\n        return isActive;\n    }\n\n    /** @private */\n    var queuedMessages = {};\n\n    /** @private */\n    function clearQueuedMessages(caller) {\n        queuedMessages[caller] = {\n            candidates: []\n        };\n    }\n\n    /** @private */\n    function closePeer(otherUser) {\n\n        if (acceptancePending[otherUser]) {\n            delete acceptancePending[otherUser];\n        }\n        if (offersPending[otherUser]) {\n            delete offersPending[otherUser];\n        }\n\n        if (\n          !peerConns[otherUser].cancelled &&\n              peerConns[otherUser].pc\n        ) {\n            try {\n                var remoteStreams = peerConns[otherUser].pc.getRemoteStreams();\n                for (var i = 0; i < remoteStreams.length; i++) {\n                    if (isStreamActive(remoteStreams[i])) {\n                        emitOnStreamClosed(otherUser, remoteStreams[i]);\n                        stopStream(remoteStreams[i]);\n                    }\n                }\n\n                peerConns[otherUser].pc.close();\n                peerConns[otherUser].cancelled = true;\n                logDebug(\"peer closed\");\n            } catch (err) {\n                logDebug(\"peer \" + otherUser + \" close failed:\" + err);\n            } finally {\n                if (self.onPeerClosed) {\n                    self.onPeerClosed(otherUser);\n                }\n            }\n        }\n    }\n\n    /** @private */\n    function hangupBody(otherUser) {\n        \n        logDebug(\"Hanging up on \" + otherUser);\n        clearQueuedMessages(otherUser);\n\n        if (peerConns[otherUser]) {\n\n            if (peerConns[otherUser].pc) {\n                closePeer(otherUser);\n            } \n\n            if (peerConns[otherUser]) {\n                delete peerConns[otherUser];\n            }\n\n            updateConfigurationInfo();\n            \n            if (self.webSocket) {\n                sendSignalling(otherUser, \"hangup\", null, function() {\n                    logDebug(\"hangup succeeds\");\n                }, function(errorCode, errorText) {\n                    logDebug(\"hangup failed:\" + errorText);\n                    self.showError(errorCode, errorText);\n                });\n            }\n        }\n    }\n\n    \n\n    /**\n     * Hang up on a particular user or all users.\n     *  @param {String} otherUser - the easyrtcid of the person to hang up on.\n     *  @example\n     *     easyrtc.hangup(someEasyrtcid);\n     */\n    this.hangup = function(otherUser) {\n        hangupBody(otherUser);\n        updateConfigurationInfo();\n    };\n\n    /**\n     * Hangs up on all current connections.\n     * @example\n     *    easyrtc.hangupAll();\n     */\n    this.hangupAll = function() {\n\n        var sawAConnection = false;\n        for (var otherUser in peerConns) {\n            if (!peerConns.hasOwnProperty(otherUser)) {\n                continue;\n            }\n            sawAConnection = true;\n            hangupBody(otherUser);\n        }\n\n        if (sawAConnection) {\n            updateConfigurationInfo();\n        }\n    };\n\n    /**\n     * Checks to see if data channels work between two peers.\n     * @param {String} otherUser - the other peer.\n     * @returns {Boolean} true if data channels work and are ready to be used\n     *   between the two peers.\n     */\n    this.doesDataChannelWork = function(otherUser) {\n        if (!peerConns[otherUser]) {\n            return false;\n        }\n        return !!peerConns[otherUser].dataChannelReady;\n    };\n\n    /**\n     * Return the media stream shared by a particular peer. This is needed when you\n     * add a stream in the middle of a call.\n     * @param {String} easyrtcid the peer.\n     * @param {String} remoteStreamName an optional argument supplying the streamName.\n     * @returns {Object} A mediaStream.\n     */\n    this.getRemoteStream = function(easyrtcid, remoteStreamName) {\n        if (!peerConns[easyrtcid]) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"attempt to get stream of uncalled party\");\n            throw \"Developer err: no such stream\";\n        }\n        else {\n            return getRemoteStreamByName(peerConns[easyrtcid], easyrtcid, remoteStreamName);\n        }\n    };\n\n    /**\n     * Assign a local streamName to a remote stream so that it can be forwarded to other callers.\n     * @param {String} easyrtcid the peer supplying the remote stream\n     * @param {String} remoteStreamName the streamName supplied by the peer.\n     * @param {String} localStreamName streamName used when passing the stream to other peers.\n     * @example\n     *    easyrtc.makeLocalStreamFromRemoteStream(sourcePeer, \"default\", \"forwardedStream\");\n     *    easyrtc.call(nextPeer, callSuccessCB, callFailureCB, wasAcceptedCB, [\"forwardedStream\"]);\n     */\n    this.makeLocalStreamFromRemoteStream = function(easyrtcid, remoteStreamName, localStreamName) {\n        var remoteStream;\n        if (peerConns[easyrtcid].pc) {\n            remoteStream = getRemoteStreamByName(peerConns[easyrtcid], easyrtcid, remoteStreamName);\n            if (remoteStream) {\n                registerLocalMediaStreamByName(remoteStream, localStreamName);\n            }\n            else {\n                throw \"Developer err: no such stream\";\n            }\n        }\n        else {\n            throw \"Developer err: no such peer \";\n        }\n    };\n\n    /**\n     * Add a named local stream to a call.\n     * @param {String} easyrtcId The id of client receiving the stream.\n     * @param {String} streamName The name of the stream.\n     * @param {Function} receiptHandler is a function that gets called when the other side sends a message\n     *   that the stream has been received. The receiptHandler gets called with an easyrtcid and a stream name. This\n     *   argument is optional.\n     */\n    this.addStreamToCall = function(easyrtcId, streamName, receiptHandler) {\n        if( !streamName) {\n            streamName = \"default\";\n        }\n        var stream = getLocalMediaStreamByName(streamName);\n        if (!stream) {\n            logDebug(\"attempt to add nonexistent stream \" + streamName);\n        }\n        else if (!peerConns[easyrtcId] || !peerConns[easyrtcId].pc) {\n            logDebug(\"Can't add stream before a call has started.\");\n        }\n        else {\n            var pc = peerConns[easyrtcId].pc;\n            peerConns[easyrtcId].enableNegotiateListener = true;\n            pc.addStream(stream);\n            if (receiptHandler) {\n                peerConns[easyrtcId].streamsAddedAcks[streamName] = receiptHandler;\n            }\n        }\n    };\n\n    //\n    // these three listeners support the ability to add/remove additional media streams on the fly.\n    //\n    this.setPeerListener(function(easyrtcid, msgType, msgData) {\n        if (!peerConns[easyrtcid] || !peerConns[easyrtcid].pc) {\n            self.showError(self.errCodes.DEVELOPER_ERR,\n                  \"Attempt to add additional stream before establishing the base call.\");\n        }\n        else {\n            var sdp = msgData.sdp;\n            var pc = peerConns[easyrtcid].pc;\n\n            var setLocalAndSendMessage1 = function(sessionDescription) {\n                var sendAnswer = function() {\n                   logDebug(\"sending answer\");\n\n                   function onSignalSuccess() {\n                        logDebug(\"sending answer succeeded\");\n\n                   }\n\n                   function onSignalFailure(errorCode, errorText) {\n                        logDebug(\"sending answer failed\");\n\n                       delete peerConns[easyrtcid];\n                       self.showError(errorCode, errorText);\n                   }\n\n                   sendSignalling(easyrtcid, \"answer\", sessionDescription,\n                           onSignalSuccess, onSignalFailure);\n                   peerConns[easyrtcid].connectionAccepted = true;\n                   sendQueuedCandidates(easyrtcid, onSignalSuccess, onSignalFailure);\n               };\n\n               if (sdpLocalFilter) {\n                   sessionDescription.sdp = sdpLocalFilter(sessionDescription.sdp);\n               }\n               pc.setLocalDescription(sessionDescription, sendAnswer, function(message) {\n                   self.showError(self.errCodes.INTERNAL_ERR, \"setLocalDescription: \" + msgData);\n               });\n            };\n\n            var invokeCreateAnswer = function() {\n               pc.createAnswer(setLocalAndSendMessage1,\n                    function(message) {\n                        self.showError(self.errCodes.INTERNAL_ERR, \"create-answer: \" + message);\n                    },\n                    receivedMediaConstraints);\n               self.sendPeerMessage(easyrtcid, \"__gotAddedMediaStream\", {sdp: sdp});\n            };\n\n            logDebug(\"about to call setRemoteDescription in doAnswer\");\n\n            try {\n\n                if (sdpRemoteFilter) {\n                    sdp.sdp = sdpRemoteFilter(sdp.sdp);\n                }\n                pc.setRemoteDescription(new RTCSessionDescription(sdp),\n                   invokeCreateAnswer, function(message) {\n                    self.showError(self.errCodes.INTERNAL_ERR, \"set-remote-description: \" + message);\n                });\n            } catch (srdError) {\n                logDebug(\"saw exception in setRemoteDescription\", srdError);\n                self.showError(self.errCodes.INTERNAL_ERR, \"setRemoteDescription failed: \" + srdError.message);\n            }\n        }\n    }, \"__addedMediaStream\");\n\n    this.setPeerListener(function(easyrtcid, msgType, msgData) {\n        if (!peerConns[easyrtcid] || !peerConns[easyrtcid].pc) {\n            logDebug(\"setPeerListener failed: __gotAddedMediaStream Unknow easyrtcid \" + easyrtcid);\n        }\n        else {\n            var sdp = msgData.sdp;\n            if (sdpRemoteFilter) {\n                sdp.sdp = sdpRemoteFilter(sdp.sdp);\n            }\n            var pc = peerConns[easyrtcid].pc;\n            pc.setRemoteDescription(new RTCSessionDescription(sdp), function(){},\n                    function(message) {\n                       self.showError(self.errCodes.INTERNAL_ERR, \"set-remote-description: \" + message);\n                    });\n        }\n\n    }, \"__gotAddedMediaStream\");\n\n    this.setPeerListener(function(easyrtcid, msgType, msgData) {\n        if (!peerConns[easyrtcid] || !peerConns[easyrtcid].pc) {\n            logDebug(\"setPeerListener failed: __closingMediaStream Unknow easyrtcid \" + easyrtcid);\n        }\n        else {\n            var stream = getRemoteStreamByName(peerConns[easyrtcid], easyrtcid, msgData.streamName);\n            if (stream) {\n                onRemoveStreamHelper(easyrtcid, stream);\n                stopStream(stream);\n            }\n        }\n\n    }, \"__closingMediaStream\");\n\n    /** @private */\n    this.dumpPeerConnectionInfo = function() {\n        var i;\n        for (var peer in peerConns) {\n            if (peerConns.hasOwnProperty(peer)) {\n                var pc = peerConns[peer].pc;\n                var remotes = pc.getRemoteStreams();\n                var remoteIds = [];\n                for (i = 0; i < remotes.length; i++) {\n                    remoteIds.push(remotes[i].id);\n                }\n                var locals = pc.getLocalStreams();\n                var localIds = [];\n                for (i = 0; i < locals.length; i++) {\n                    localIds.push(locals[i].id);\n                }\n\n                logDebug(\"For peer \" + peer);\n                logDebug(\"    \" + JSON.stringify({local: localIds, remote: remoteIds}));\n            }\n        }\n    };\n\n    /** @private */\n    function onRemoteHangup(otherUser) {\n\n        logDebug(\"Saw onRemote hangup event\");\n        clearQueuedMessages(otherUser);\n\n        if (peerConns[otherUser]) {\n\n            if (peerConns[otherUser].pc) {\n                closePeer(otherUser);\n            }\n            else {\n                if (self.callCancelled) {\n                    self.callCancelled(otherUser, true);\n                }\n            }\n\n            if (peerConns[otherUser]) {\n                delete peerConns[otherUser];\n            }\n        }\n        else {\n            if (self.callCancelled) {\n                self.callCancelled(otherUser, true);\n            }\n        }\n    }\n\n    /** @private */\n    //\n    // checks to see if a particular peer is in any room at all.\n    //\n    function isPeerInAnyRoom(id) {\n        var roomName;\n        for (roomName in lastLoggedInList) {\n            if (!lastLoggedInList.hasOwnProperty(roomName)) {\n                continue;\n            }\n            if (lastLoggedInList[roomName][id]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks to see if a particular peer is present in any room.\n     * If it isn't, we assume it's logged out.\n     * @param {string} easyrtcid the easyrtcId of the peer.\n     */\n    this.isPeerInAnyRoom = function(easyrtcid) {\n         return isPeerInAnyRoom(easyrtcid);\n    };\n\n    /** @private */\n    function processLostPeers(peersInRoom) {\n        var id;\n        //\n        // check to see the person is still in at least one room. If not, we'll hangup\n        // on them. This isn't the correct behavior, but it's the best we can do without\n        // changes to the server.\n        //\n        for (id in peerConns) {\n            if (peerConns.hasOwnProperty(id) &&\n                    typeof peersInRoom[id] === 'undefined') {\n                if (!isPeerInAnyRoom(id)) {\n                    if (peerConns[id].pc || peerConns[id].isInitiator) {\n                        onRemoteHangup(id);\n                    }\n                    delete offersPending[id];\n                    delete acceptancePending[id];\n                    clearQueuedMessages(id);\n                }\n            }\n        }\n\n        for (id in offersPending) {\n            if (offersPending.hasOwnProperty(id) && !isPeerInAnyRoom(id)) {\n                onRemoteHangup(id);\n                clearQueuedMessages(id);\n                delete offersPending[id];\n                delete acceptancePending[id];\n            }\n        }\n\n        for (id in acceptancePending) {\n            if (acceptancePending.hasOwnProperty(id) && !isPeerInAnyRoom(id)) {\n                onRemoteHangup(id);\n                clearQueuedMessages(id);\n                delete acceptancePending[id];\n            }\n        }\n    }\n\n    /**\n     * The idea of aggregating timers is that there are events that convey state and these can fire more frequently\n     * than desired. Aggregating timers allow a bunch of events to be collapsed into one by only firing the last\n     * event.\n     * @private\n     */\n    var aggregatingTimers = {};\n\n    /**\n     * This function sets a timeout for a function to be called with the feature that if another\n     * invocation comes along within a particular interval (with the same key), the second invocation\n     * replaces the first. To prevent a continuous stream of events from preventing a callback from ever\n     * firing, we'll collapse no more than 20 events.\n     * @param {String} key A key used to identify callbacks that should be aggregated.\n     * @param {Function} callback The callback to invoke.\n     * @param {Number} period The aggregating period in milliseconds.\n     * @private\n     */\n    function addAggregatingTimer(key, callback, period) {\n        if( !period) {\n            period = 100; // 0.1 second\n        }\n        var counter = 0;\n        if( aggregatingTimers[key]) {\n            clearTimeout(aggregatingTimers[key].timer);\n            counter = aggregatingTimers[key].counter;\n        }\n        if( counter > 20) {\n            delete aggregatingTimers[key];\n            callback();\n        }\n        else {\n            aggregatingTimers[key] = {counter: counter +1};\n            aggregatingTimers[key].timer = setTimeout(function () {\n                delete aggregatingTimers[key];\n                callback();\n            }, period);\n        }\n    }\n\n    /** @private */\n    //\n    // this function gets called for each room when there is a room update.\n    //\n    function processOccupantList(roomName, occupantList) {\n        var myInfo = null;\n        var reducedList = {};\n\n        var id;\n        for (id in occupantList) {\n            if (occupantList.hasOwnProperty(id)) {\n                if (id === self.myEasyrtcid) {\n                    myInfo = occupantList[id];\n                }\n                else {\n                    reducedList[id] = occupantList[id];\n                }\n            }\n        }\n        //\n        // processLostPeers detects peers that have gone away and performs\n        // house keeping accordingly.\n        //\n        processLostPeers(reducedList);\n        //\n        //\n        //\n        addAggregatingTimer(\"roomOccupants&\" + roomName, function(){\n            if (roomOccupantListener) {\n                roomOccupantListener(roomName, reducedList, myInfo);\n            }\n            self.emitEvent(\"roomOccupants\", {roomName:roomName, occupants:lastLoggedInList});\n        }, 100);\n    }\n\n    /** @private */\n    function onChannelMsg(msg, ackAcceptorFunc) {\n\n        var targeting = {};\n        if (ackAcceptorFunc) {\n            ackAcceptorFunc(self.ackMessage);\n        }\n        if (msg.targetEasyrtcid) {\n            targeting.targetEasyrtcid = msg.targetEasyrtcid;\n        }\n        if (msg.targetRoom) {\n            targeting.targetRoom = msg.targetRoom;\n        }\n        if (msg.targetGroup) {\n            targeting.targetGroup = msg.targetGroup;\n        }\n        if (msg.senderEasyrtcid) {\n            self.receivePeerDistribute(msg.senderEasyrtcid, msg, targeting);\n        }\n        else {\n            if (receiveServerCB) {\n                receiveServerCB(msg.msgType, msg.msgData, targeting);\n            }\n            else {\n                logDebug(\"Unhandled server message \" + JSON.stringify(msg));\n            }\n        }\n    }\n\n    /** @private */\n    function processUrl(url) {\n        var ipAddress;\n        if (url.indexOf('turn:') === 0 || url.indexOf('turns:') === 0) {\n            ipAddress = url.split(/[@:&]/g)[1];\n            self._turnServers[ipAddress] = true;\n        } else if (url.indexOf('stun:') === 0 || url.indexOf('stuns:') === 0) {\n            ipAddress = url.split(/[@:&]/g)[1];\n            self._stunServers[ipAddress] = true;\n        }\n    }\n\n    /** @private */\n    function processIceConfig(iceConfig) {\n\n        var i, j, item;\n\n        pc_config = {\n            iceServers: []\n        };\n\n        self._turnServers = {};\n        self._stunServers = {};\n\n        if (\n            !iceConfig ||\n                !iceConfig.iceServers ||\n                    typeof iceConfig.iceServers.length === \"undefined\"\n        ) {\n            self.showError(\n                self.errCodes.DEVELOPER_ERR,\n                \"iceConfig received from server didn't have an array called iceServers, ignoring it\"\n            );\n        } else {\n            pc_config = {\n                iceServers: iceConfig.iceServers\n            };\n        }\n\n        for (i = 0; i < iceConfig.iceServers.length; i++) {\n            item = iceConfig.iceServers[i];\n            if( item.urls && item.urls.length ) {\n               for( j = 0; j < item.urls.length; j++ ) {\n                  processUrl(item.urls[j]);\n               }\n            }\n            else if( item.url ) {\n               processUrl(item.url);\n            }\n         }\n    }\n\n    /** @private */\n    function processSessionData(sessionData) {\n        if (sessionData) {\n            if (sessionData.easyrtcsid) {\n                self.easyrtcsid = sessionData.easyrtcsid;\n            }\n            if (sessionData.field) {\n                sessionFields = sessionData.field;\n            }\n        }\n    }\n\n    /** @private */\n    function processRoomData(roomData) {\n        self.roomData = roomData;\n\n        var k, roomName,\n            stuffToRemove, stuffToAdd,\n            id, removeId;\n\n        for (roomName in self.roomData) {\n            if (!self.roomData.hasOwnProperty(roomName)) {\n                continue;\n            }\n            if (roomData[roomName].roomStatus === \"join\") {\n                if (!(self.roomJoin[roomName])) {\n                    self.roomJoin[roomName] = roomData[roomName];\n                }\n                var mediaIds = buildMediaIds();\n                if (mediaIds !== {}) {\n                    self.setRoomApiField(roomName, \"mediaIds\", mediaIds);\n                }\n            }\n            else if (roomData[roomName].roomStatus === \"leave\") {\n                if (self.roomEntryListener) {\n                    self.roomEntryListener(false, roomName);\n                }\n                delete self.roomJoin[roomName];\n                delete lastLoggedInList[roomName];\n                continue;\n            }\n\n            if (roomData[roomName].clientList) {\n                lastLoggedInList[roomName] = roomData[roomName].clientList;\n            }\n            else if (roomData[roomName].clientListDelta) {\n                stuffToAdd = roomData[roomName].clientListDelta.updateClient;\n                if (stuffToAdd) {\n                    for (id in stuffToAdd) {\n                        if (!stuffToAdd.hasOwnProperty(id)) {\n                            continue;\n                        }\n                        if (!lastLoggedInList[roomName]) {\n                            lastLoggedInList[roomName] = [];\n                        }\n                        if( !lastLoggedInList[roomName][id] ) {\n                           lastLoggedInList[roomName][id] = stuffToAdd[id];\n                        }\n                        for( k in stuffToAdd[id] ) {\n                           if( k === \"apiField\" || k === \"presence\") {\n                              lastLoggedInList[roomName][id][k] = stuffToAdd[id][k];\n                           }\n                        }\n                    }\n                }\n                stuffToRemove = roomData[roomName].clientListDelta.removeClient;\n                if (stuffToRemove && lastLoggedInList[roomName]) {\n                    for (removeId in stuffToRemove) {\n                        if (stuffToRemove.hasOwnProperty(removeId)) {\n                            delete lastLoggedInList[roomName][removeId];\n                        }\n                    }\n                }\n            }\n            if (self.roomJoin[roomName] && roomData[roomName].field) {\n                fields.rooms[roomName] = roomData[roomName].field;\n            }\n            if (roomData[roomName].roomStatus === \"join\") {\n                if (self.roomEntryListener) {\n                    self.roomEntryListener(true, roomName);\n                }\n            }\n            processOccupantList(roomName, lastLoggedInList[roomName]);\n        }\n        self.emitEvent(\"roomOccupant\", lastLoggedInList);\n    }\n\n    /** @private */\n    function onChannelCmd(msg, ackAcceptorFn) {\n\n        var caller = msg.senderEasyrtcid;\n        var msgType = msg.msgType;\n        var msgData = msg.msgData;\n        var pc;\n\n        logDebug('received message of type ' + msgType);\n\n\n        if (typeof queuedMessages[caller] === \"undefined\") {\n            clearQueuedMessages(caller);\n        }\n\n        var processCandidateBody = function(caller, msgData) {\n            var candidate = null;\n\n            if( iceCandidateFilter ) {\n               msgData = iceCandidateFilter(msgData, true);\n               if( !msgData ) {\n                  return;\n               }\n            }\n\n            candidate = new RTCIceCandidate({\n                sdpMLineIndex: msgData.label,\n                candidate: msgData.candidate\n            });\n            pc = peerConns[caller].pc;\n\n            function iceAddSuccess() {\n                logDebug(\"iceAddSuccess: \" +\n                    JSON.stringify(candidate));\n                processCandicate(msgData.candidate);\n            }\n\n            function iceAddFailure(domError) {\n                self.showError(self.errCodes.ICECANDIDATE_ERR, \"bad ice candidate (\" + domError.name + \"): \" +\n                    JSON.stringify(candidate));\n            }\n\n            pc.addIceCandidate(candidate, iceAddSuccess, iceAddFailure);\n        };\n\n        var flushCachedCandidates = function(caller) {\n            var i;\n            if (queuedMessages[caller]) {\n                for (i = 0; i < queuedMessages[caller].candidates.length; i++) {\n                    processCandidateBody(caller, queuedMessages[caller].candidates[i]);\n                }\n                delete queuedMessages[caller];\n            }\n        };\n\n        var processOffer = function(caller, msgData) {\n\n            var helper = function(wasAccepted, streamNames) {\n\n                if (streamNames) {\n                    if (typeof streamNames === \"string\") {\n                        streamNames = [streamNames];\n                    }\n                    else if (streamNames.length === undefined) {\n                        self.showError(self.errCodes.DEVELOPER_ERR, \"accept callback passed invalid streamNames\");\n                        return;\n                    }\n                }\n\n                logDebug(\"offer accept=\" + wasAccepted);\n\n                delete offersPending[caller];\n\n                if (wasAccepted) {\n                    if (!self.supportsPeerConnections()) {\n                        self.showError(self.errCodes.CALL_ERR, self.getConstantString(\"noWebrtcSupport\"));\n                        return;\n                    }\n                    doAnswer(caller, msgData, streamNames);\n                    flushCachedCandidates(caller);\n                }\n                else {\n                    sendSignalling(caller, \"reject\", null, null, null);\n                    clearQueuedMessages(caller);\n                }\n            };\n            //\n            // There is a very rare case of two callers sending each other offers\n            // before receiving the others offer. In such a case, the caller with the\n            // greater valued easyrtcid will delete its pending call information and do a\n            // simple answer to the other caller's offer.\n            //\n            if (acceptancePending[caller] && caller < self.myEasyrtcid) {\n                delete acceptancePending[caller];\n                if (queuedMessages[caller]) {\n                    delete queuedMessages[caller];\n                }\n                if (peerConns[caller]) {\n                    if (peerConns[caller].wasAcceptedCB) {\n                        peerConns[caller].wasAcceptedCB(true, caller);\n                    }\n                    delete peerConns[caller];\n                }\n                helper(true);\n                return;\n            }\n\n            offersPending[caller] = msgData;\n            if (!self.acceptCheck) {\n                helper(true);\n            }\n            else {\n                self.acceptCheck(caller, helper);\n            }\n        };\n\n        function processReject(caller) {\n            delete acceptancePending[caller];\n            if (queuedMessages[caller]) {\n                delete queuedMessages[caller];\n            }\n            if (peerConns[caller]) {\n                if (peerConns[caller].wasAcceptedCB) {\n                    peerConns[caller].wasAcceptedCB(false, caller);\n                }\n                delete peerConns[caller];\n            }\n        }\n\n        function processAnswer(caller, msgData) {\n\n            delete acceptancePending[caller];\n\n            //\n            // if we've discarded the peer connection, ignore the answer.\n            //\n            if (!peerConns[caller]) {\n                return;\n            }\n            peerConns[caller].connectionAccepted = true;\n\n\n\n            if (peerConns[caller].wasAcceptedCB) {\n                peerConns[caller].wasAcceptedCB(true, caller);\n            }\n\n            var onSignalSuccess = function() {\n\n            };\n            var onSignalFailure = function(errorCode, errorText) {\n                if (peerConns[caller]) {\n                    delete peerConns[caller];\n                }\n                self.showError(errorCode, errorText);\n            };\n            // peerConns[caller].startedAV = true;\n            sendQueuedCandidates(caller, onSignalSuccess, onSignalFailure);\n            pc = peerConns[caller].pc;\n            var sd = new RTCSessionDescription(msgData);\n            if (!sd) {\n                throw \"Could not create the RTCSessionDescription\";\n            }\n\n            logDebug(\"about to call initiating setRemoteDescription\");\n\n            try {\n                if (sdpRemoteFilter) {\n                    sd.sdp = sdpRemoteFilter(sd.sdp);\n                }\n                pc.setRemoteDescription(sd, function() {\n                    if (pc.connectDataConnection) {\n                        logDebug(\"calling connectDataConnection(5001,5002)\");\n\n                        pc.connectDataConnection(5001, 5002); // these are like ids for data channels\n                    }\n                }, function(message){\n                     logDebug(\"setRemoteDescription failed \", message);\n                 });\n            } catch (smdException) {\n                logDebug(\"setRemoteDescription failed \", smdException);\n            }\n            flushCachedCandidates(caller);\n        }\n\n        function processCandidateQueue(caller, msgData) {\n\n            if (peerConns[caller] && peerConns[caller].pc) {\n                processCandidateBody(caller, msgData);\n            }\n            else {\n                if (!peerConns[caller]) {\n                    queuedMessages[caller] = {\n                        candidates: []\n                    };\n                }\n                queuedMessages[caller].candidates.push(msgData);\n            }\n        }\n\n        switch (msgType) {\n            case \"sessionData\":\n                processSessionData(msgData.sessionData);\n                break;\n            case \"roomData\":\n                processRoomData(msgData.roomData);\n                break;\n            case \"iceConfig\":\n                processIceConfig(msgData.iceConfig);\n                break;\n            case \"forwardToUrl\":\n                if (msgData.newWindow) {\n                    window.open(msgData.forwardToUrl.url);\n                }\n                else {\n                    window.location.href = msgData.forwardToUrl.url;\n                }\n                break;\n            case \"offer\":\n                processOffer(caller, msgData);\n                break;\n            case \"reject\":\n                processReject(caller);\n                break;\n            case \"answer\":\n                processAnswer(caller, msgData);\n                break;\n            case \"candidate\":\n                processCandidateQueue(caller, msgData);\n                break;\n            case \"hangup\":\n                onRemoteHangup(caller);\n                clearQueuedMessages(caller);\n                break;\n            case \"error\":\n                self.showError(msgData.errorCode, msgData.errorText);\n                break;\n            default:\n                self.showError(self.errCodes.DEVELOPER_ERR, \"received unknown message type from server, msgType is \" + msgType);\n                return;\n        }\n\n        if (ackAcceptorFn) {\n            ackAcceptorFn(self.ackMessage);\n        }\n    }\n\n    /**\n     * Sets the presence state on the server.\n     * @param {String} state - one of 'away','chat','dnd','xa'\n     * @param {String} statusText - User configurable status string. May be length limited.\n     * @example   easyrtc.updatePresence('dnd', 'sleeping');\n     */\n    this.updatePresence = function(state, statusText) {\n\n        self.presenceShow = state;\n        self.presenceStatus = statusText;\n\n        if (self.webSocketConnected) {\n            sendSignalling(null, 'setPresence', {\n                setPresence: {\n                    'show': self.presenceShow,\n                    'status': self.presenceStatus\n                }\n            }, null);\n        }\n    };\n\n    /**\n     * Fetch the collection of session fields as a map. The map has the structure:\n     *  {key1: {\"fieldName\": key1, \"fieldValue\": value1}, ...,\n     *   key2: {\"fieldName\": key2, \"fieldValue\": value2}\n     *  }\n     * @returns {Object}\n     */\n    this.getSessionFields = function() {\n        return sessionFields;\n    };\n\n    /**\n     * Fetch the value of a session field by name.\n     * @param {String} name - name of the session field to be fetched.\n     * @returns the field value (which can be anything). Returns undefined if the field does not exist.\n     */\n    this.getSessionField = function(name) {\n        if (sessionFields[name]) {\n            return sessionFields[name].fieldValue;\n        }\n        else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Returns an array of easyrtcid's of peers in a particular room.\n     * @param roomName\n     * @returns {Array} of easyrtcids or null if the client is not in the room.\n     * @example\n     *     var occupants = easyrtc.getRoomOccupants(\"default\");\n     *     var i;\n     *     for( i = 0; i < occupants.length; i++ ) {\n     *         console.log( occupants[i] + \" is in the room\");\n     *     }\n     */\n    this.getRoomOccupantsAsArray = function(roomName) {\n        if (!lastLoggedInList[roomName]) {\n            return null;\n        }\n        else {\n            return Object.keys(lastLoggedInList[roomName]);\n        }\n    };\n\n    /**\n     * Returns a map of easyrtcid's of peers in a particular room. You should only test elements in the map to see if they are\n     * null; their actual values are not guaranteed to be the same in different releases.\n     * @param roomName\n     * @returns {Object} of easyrtcids or null if the client is not in the room.\n     * @example\n     *      if( easyrtc.getRoomOccupantsAsMap(\"default\")[some_easyrtcid]) {\n     *          console.log(\"yep, \" + some_easyrtcid + \" is in the room\");\n     *      }\n     */\n    this.getRoomOccupantsAsMap = function(roomName) {\n        return lastLoggedInList[roomName];\n    };\n\n    /**\n     * Returns true if the ipAddress parameter was the address of a turn server. This is done by checking against information\n     * collected during peer to peer calls. Don't expect it to work before the first call, or to identify turn servers that aren't\n     * in the ice config.\n     * @param ipAddress\n     * @returns {boolean} true if ip address is known to be that of a turn server, false otherwise.\n     */\n    this.isTurnServer = function(ipAddress) {\n        return !!self._turnServers[ipAddress];\n    };\n\n    /**\n     * Returns true if the ipAddress parameter was the address of a stun server. This is done by checking against information\n     * collected during peer to peer calls. Don't expect it to work before the first call, or to identify turn servers that aren't\n     * in the ice config.\n     * @param {string} ipAddress\n     * @returns {boolean} true if ip address is known to be that of a stun server, false otherwise.\n     */\n    this.isStunServer = function(ipAddress) {\n        return !!self._stunServers[ipAddress];\n    };\n\n    /**\n     * Request fresh ice config information from the server.\n     * This should be done periodically by long running applications.\n     * @param {Function} callback is called with a value of true on success, false on failure.\n     */\n    this.getFreshIceConfig = function(callback) {\n        var dataToShip = {\n            msgType: \"getIceConfig\",\n            msgData: {}\n        };\n        if (!callback) {\n            callback = function() {\n            };\n        }\n        self.webSocket.json.emit(\"easyrtcCmd\", dataToShip,\n                function(ackMsg) {\n                    if (ackMsg.msgType === \"iceConfig\") {\n                        processIceConfig(ackMsg.msgData.iceConfig);\n                        callback(true);\n                    }\n                    else {\n                        self.showError(ackMsg.msgData.errorCode, ackMsg.msgData.errorText);\n                        callback(false);\n                    }\n                }\n        );\n    };\n\n    /**\n     * This method allows you to join a single room. It may be called multiple times to be in\n     * multiple rooms simultaneously. It may be called before or after connecting to the server.\n     * Note: the successCB and failureDB will only be called if you are already connected to the server.\n     * @param {String} roomName the room to be joined.\n     * @param {Object} roomParameters application specific parameters, can be null.\n     * @param {Function} successCB called once, with a roomName as it's argument, once the room is joined.\n     * @param {Function} failureCB called if the room can not be joined. The arguments of failureCB are errorCode, errorText, roomName.\n     */\n    this.joinRoom = function(roomName, roomParameters, successCB, failureCB) {\n        if (self.roomJoin[roomName]) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to join room \" + roomName + \" which you are already in.\");\n            return;\n        }\n\n        var newRoomData = {roomName: roomName};\n        if (roomParameters) {\n            try {\n                JSON.stringify(roomParameters);\n            } catch (error) {\n                self.showError(self.errCodes.DEVELOPER_ERR, \"non-jsonable parameter to easyrtc.joinRoom\");\n                throw \"Developer error, see application error messages\";\n            }\n            var parameters = {};\n            for (var key in roomParameters) {\n                if (roomParameters.hasOwnProperty(key)) {\n                    parameters[key] = roomParameters[key];\n                }\n            }\n            newRoomData.roomParameter = parameters;\n        }\n        var msgData = {\n            roomJoin: {}\n        };\n        var roomData;\n        var signallingSuccess, signallingFailure;\n        if (self.webSocket) {\n\n            msgData.roomJoin[roomName] = newRoomData;\n            signallingSuccess = function(msgType, msgData) {\n\n                roomData = msgData.roomData;\n                self.roomJoin[roomName] = newRoomData;\n                if (successCB) {\n                    successCB(roomName);\n                }\n\n                processRoomData(roomData);\n            };\n            signallingFailure = function(errorCode, errorText) {\n                if (failureCB) {\n                    failureCB(errorCode, errorText, roomName);\n                }\n                else {\n                    self.showError(errorCode, self.format(self.getConstantString(\"unableToEnterRoom\"), roomName, errorText));\n                }\n            };\n            sendSignalling(null, \"roomJoin\", msgData, signallingSuccess, signallingFailure);\n        }\n        else {\n            self.roomJoin[roomName] = newRoomData;\n        }\n\n    };\n\n    /**\n     * This function allows you to leave a single room. Note: the successCB and failureDB\n     *  arguments are optional and will only be called if you are already connected to the server.\n     * @param {String} roomName\n     * @param {Function} successCallback - A function which expects a roomName.\n     * @param {Function} failureCallback - A function which expects the following arguments: errorCode, errorText, roomName.\n     * @example\n     *    easyrtc.leaveRoom(\"freds_room\");\n     *    easyrtc.leaveRoom(\"freds_room\", function(roomName){ console.log(\"left the room\")},\n     *                       function(errorCode, errorText, roomName){ console.log(\"left the room\")});\n     */\n    this.leaveRoom = function(roomName, successCallback, failureCallback) {\n        var roomItem;\n        if (self.roomJoin[roomName]) {\n            if (!self.webSocket) {\n                delete self.roomJoin[roomName];\n            }\n            else {\n                roomItem = {};\n                roomItem[roomName] = {roomName: roomName};\n                sendSignalling(null, \"roomLeave\", {roomLeave: roomItem},\n                function(msgType, msgData) {\n                    var roomData = msgData.roomData;\n                    processRoomData(roomData);\n                    if (successCallback) {\n                        successCallback(roomName);\n                    }\n                },\n                        function(errorCode, errorText) {\n                            if (failureCallback) {\n                                failureCallback(errorCode, errorText, roomName);\n                            }\n                        });\n            }\n        }\n    };\n\n    /** Get a list of the rooms you are in. You must be connected to call this function.\n     * @returns {Object} A map whose keys are the room names\n     */\n    this.getRoomsJoined = function() {\n        var roomsIn = {};\n        var key;\n        for (key in self.roomJoin) {\n            if (self.roomJoin.hasOwnProperty(key)) {\n                roomsIn[key] = true;\n            }\n        }\n        return roomsIn;\n    };\n\n    /** Get server defined fields associated with a particular room. Only valid\n     * after a connection has been made.\n     * @param {String} roomName - the name of the room you want the fields for.\n     * @returns {Object} A dictionary containing entries of the form {key:{'fieldName':key, 'fieldValue':value1}} or undefined\n     * if you are not connected to the room.\n     */\n    this.getRoomFields = function(roomName) {\n        return (!fields || !fields.rooms || !fields.rooms[roomName]) ?\n                    undefined : fields.rooms[roomName];\n    };\n\n    /** Get server defined fields associated with the current application. Only valid\n     * after a connection has been made.\n     * @returns {Object} A dictionary containing entries of the form {key:{'fieldName':key, 'fieldValue':value1}}\n     */\n    this.getApplicationFields = function() {\n        return fields.application;\n    };\n\n    /** Get server defined fields associated with the connection. Only valid\n     * after a connection has been made.\n     * @returns {Object} A dictionary containing entries of the form {key:{'fieldName':key, 'fieldValue':value1}}\n     */\n    this.getConnectionFields = function() {\n        return fields.connection;\n    };\n\n    /**\n     * Supply a socket.io connection that will be used instead of allocating a new socket.\n     * The expected usage is that you allocate a websocket, assign options to it, call\n     * easyrtc.useThisSocketConnection, followed by easyrtc.connect or easyrtc.easyApp. Easyrtc will not attempt to\n     * close sockets that were supplied with easyrtc.useThisSocketConnection.\n     * @param {Object} alreadyAllocatedSocketIo A value allocated with the connect method of socket.io.\n     */\n    this.useThisSocketConnection = function(alreadyAllocatedSocketIo) {\n        preallocatedSocketIo = alreadyAllocatedSocketIo;\n    };\n\n    /** @private */\n    function processToken(msg) {\n        var msgData = msg.msgData;\n        logDebug(\"entered process token\");\n\n        if (msgData.easyrtcid) {\n            self.myEasyrtcid = msgData.easyrtcid;\n        }\n        if (msgData.field) {\n            fields.connection = msgData.field;\n        }\n        if (msgData.iceConfig) {\n            processIceConfig(msgData.iceConfig);\n        }\n\n        if (msgData.sessionData) {\n            processSessionData(msgData.sessionData);\n        }\n        if (msgData.roomData) {\n            processRoomData(msgData.roomData);\n        }\n        if (msgData.application.field) {\n            fields.application = msgData.application.field;\n        }\n    }\n\n    /** @private */\n    function sendAuthenticate(successCallback, errorCallback) {\n        //\n        // find our easyrtcsid\n        //\n        var cookies, target, i;\n        var easyrtcsid = null;\n\n        if (self.cookieId && document.cookie) {\n            cookies = document.cookie.split(/[; ]/g);\n            target = self.cookieId + \"=\";\n            for (i = 0; i < cookies.length; i++) {\n                if (cookies[i].indexOf(target) === 0) {\n                    easyrtcsid = cookies[i].substring(target.length);\n                }\n            }\n        }\n\n        var msgData = {\n            apiVersion: self.apiVersion,\n            applicationName: self.applicationName,\n            setUserCfg: collectConfigurationInfo(true)\n        };\n\n        if (!self.roomJoin) {\n            self.roomJoin = {};\n        }\n        if (self.presenceShow) {\n            msgData.setPresence = {\n                show: self.presenceShow,\n                status: self.presenceStatus\n            };\n        }\n        if (self.username) {\n            msgData.username = self.username;\n        }\n        if (self.roomJoin && !isEmptyObj(self.roomJoin)) {\n            msgData.roomJoin = self.roomJoin;\n        }\n        if (easyrtcsid) {\n            msgData.easyrtcsid = easyrtcsid;\n        }\n        if (credential) {\n            msgData.credential = credential;\n        }\n\n        self.webSocket.json.emit(\n            \"easyrtcAuth\",\n            {\n                msgType: \"authenticate\",\n                msgData: msgData\n            },\n            function(msg) {\n                var room;\n                if (msg.msgType === \"error\") {\n                    errorCallback(msg.msgData.errorCode, msg.msgData.errorText);\n                    self.roomJoin = {};\n                }\n                else {\n                    processToken(msg);\n                    if (self._roomApiFields) {\n                        for (room in self._roomApiFields) {\n                            if (self._roomApiFields.hasOwnProperty(room)) {\n                                enqueueSendRoomApi(room);\n                            }\n                        }\n                    }\n\n                    if (successCallback) {\n                        successCallback(self.myEasyrtcid);\n                    }\n                }\n            }\n        );\n    }\n\n    /** @private */\n    function connectToWSServer(successCallback, errorCallback) {\n        var i;\n        if (preallocatedSocketIo) {\n            self.webSocket = preallocatedSocketIo;\n        }\n        else if (!self.webSocket) {\n            try {\n               self.webSocket = io.connect(serverPath, connectionOptions);\n\n                if (!self.webSocket) {\n                    throw \"io.connect failed\";\n                }\n\n            } catch(socketErr) {\n                self.webSocket = 0;\n                errorCallback( self.errCodes.SYSTEM_ERROR, socketErr.toString());\n\n               return;\n            }\n        }\n        else {\n            for (i in self.websocketListeners) {\n                if (!self.websocketListeners.hasOwnProperty(i)) {\n                    continue;\n                }\n                self.webSocket.removeEventListener(self.websocketListeners[i].event,\n                        self.websocketListeners[i].handler);\n            }\n        }\n\n        self.websocketListeners = [];\n\n        function addSocketListener(event, handler) {\n            self.webSocket.on(event, handler);\n            self.websocketListeners.push({event: event, handler: handler});\n        }\n\n        addSocketListener(\"close\", function(event) {\n            logDebug(\"the web socket closed\");\n        });\n\n        addSocketListener('error', function(event) {\n            function handleErrorEvent() {\n                if (self.myEasyrtcid) {\n                    //\n                    // socket.io version 1 got rid of the socket member, moving everything up one level.\n                    //\n                    if (isSocketConnected(self.webSocket)) {\n                        self.showError(self.errCodes.SIGNAL_ERR, self.getConstantString(\"miscSignalError\"));\n                    }\n                    else {\n                        /* socket server went down. this will generate a 'disconnect' event as well, so skip this event */\n                        errorCallback(self.errCodes.CONNECT_ERR, self.getConstantString(\"noServer\"));\n                    }\n                }\n                else {\n                    errorCallback(self.errCodes.CONNECT_ERR, self.getConstantString(\"noServer\"));\n                }\n            }\n            handleErrorEvent();\n        });\n\n        function connectHandler(event) {\n            self.webSocketConnected = true;\n            if (!self.webSocket) {\n                self.showError(self.errCodes.CONNECT_ERR, self.getConstantString(\"badsocket\"));\n            }\n\n            logDebug(\"saw socket-server onconnect event\");\n\n            if (self.webSocketConnected) {\n                sendAuthenticate(successCallback, errorCallback);\n            }\n            else {\n                errorCallback(self.errCodes.SIGNAL_ERR, self.getConstantString(\"icf\"));\n            }\n        }\n\n        if (isSocketConnected(preallocatedSocketIo)) {\n            connectHandler(null);\n        }\n        else {\n            addSocketListener(\"connect\", connectHandler);\n        }\n\n        addSocketListener(\"easyrtcMsg\", onChannelMsg);\n        addSocketListener(\"easyrtcCmd\", onChannelCmd);\n        addSocketListener(\"disconnect\", function(/* code, reason, wasClean */) {\n\n            self.webSocketConnected = false;\n            updateConfigurationInfo = function() {}; // dummy update function\n            oldConfig = {};\n            disconnectBody();\n\n            if (self.disconnectListener) {\n                self.disconnectListener();\n            }\n        });\n    }\n\n    /**\n     * Connects to the EasyRTC signaling server. You must connect before trying to\n     * call other users.\n     * @param {String} applicationName is a string that identifies the application so that different applications can have different\n     *        lists of users. Note that the server configuration specifies a regular expression that is used to check application names\n     *        for validity. The default pattern is that of an identifier, spaces are not allowed.\n     * @param {Function} successCallback (easyrtcId, roomOwner) - is called on successful connect. easyrtcId is the\n     *   unique name that the client is known to the server by. A client usually only needs it's own easyrtcId for debugging purposes.\n     *       roomOwner is true if the user is the owner of a room. It's value is random if the user is in multiple rooms.\n     * @param {Function} errorCallback (errorCode, errorText) - is called on unsuccessful connect. if null, an alert is called instead.\n     *  The errorCode takes it's value from easyrtc.errCodes.\n     * @example\n     *   easyrtc.connect(\"my_chat_app\",\n     *                   function(easyrtcid, roomOwner){\n     *                       if( roomOwner){ console.log(\"I'm the room owner\"); }\n     *                       console.log(\"my id is \" + easyrtcid);\n     *                   },\n     *                   function(errorText){\n     *                       console.log(\"failed to connect \", erFrText);\n     *                   });\n     */\n    this.connect = function(applicationName, successCallback, errorCallback) {\n\n        // Detect invalid or missing socket.io\n        if (!io) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Your HTML has not included the socket.io.js library\");\n        }\n\n        if (!preallocatedSocketIo && self.webSocket) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to connect when already connected to socket server\");\n            return;\n        }\n        pc_config = {};\n        closedChannel = null;\n        oldConfig = {}; // used internally by updateConfiguration\n        queuedMessages = {};\n        self.applicationName = applicationName;\n        fields = {\n            rooms: {},\n            application: {},\n            connection: {}\n        };\n\n        logDebug(\"attempt to connect to WebRTC signalling server with application name=\" + applicationName);\n\n        if (errorCallback === null) {\n            errorCallback = function(errorCode, errorText) {\n                self.showError(errorCode, errorText);\n            };\n        }\n\n        connectToWSServer(successCallback, errorCallback);\n    };\n};\n\nreturn new Easyrtc();\n\n})); \n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/easyrtc.js":"/* global define, module, require */\n/*!\n  Script: easyrtc_lang.js\n\n    Provides lang file.\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define('easyrtc_lang',factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory();\n    } else {\n        root.easyrtc_lang = factory();\n  }\n}(this, function (undefined) {\n\n  \"use strict\";\n\nreturn {\n  \"unableToEnterRoom\":\"Unable to enter room {0} because {1}\" ,\n  \"resolutionWarning\": \"Requested video size of {0}x{1} but got size of {2}x{3}\",\n  \"badUserName\": \"Illegal username {0}\",\n  \"localMediaError\": \"Error getting local media stream: {0}\",\n  \"miscSignalError\": \"Miscellaneous error from signalling server. It may be ignorable.\",\n  \"noServer\": \"Unable to reach the EasyRTC signalling server.\",\n  \"badsocket\": \"Socket.io connect event fired with bad websocket.\",\n  \"icf\": \"Internal communications failure\",\n  \"statsNotSupported\":\"call statistics not supported by this browser, try Chrome.\",\n   \"noWebrtcSupport\":\"Your browser doesn't appear to support WebRTC.\",\n   \"gumFailed\":\"Failed to get access to local media. Error code was {0}.\",\n   \"requireAudioOrVideo\":\"At least one of audio and video must be provided\"   \n};\n\n}));\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define('webrtc-adapter',[],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.adapter = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n /* eslint-env node */\n\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      default: // Unknown extensions are silently ignored.\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress); // was: relAddr\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort); // was: relPort\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  // was: channels\n  parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n       ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      params.push(param + '=' + codec.parameters[param]);\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  // Search in session part, too.\n  lines = lines.concat(SDPUtils.splitLines(sessionpart));\n  var fpLine = lines.filter(function(line) {\n    return line.indexOf('a=fingerprint:') === 0;\n  })[0].substr(14);\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  var dtlsParameters = {\n    role: 'auto',\n    fingerprints: [{\n      algorithm: fpLine.split(' ')[0],\n      value: fpLine.split(' ')[1]\n    }]\n  };\n  return dtlsParameters;\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  // Search in session part, too.\n  lines = lines.concat(SDPUtils.splitLines(sessionpart));\n  var iceParameters = {\n    usernameFragment: lines.filter(function(line) {\n      return line.indexOf('a=ice-ufrag:') === 0;\n    })[0].substr(12),\n    password: lines.filter(function(line) {\n      return line.indexOf('a=ice-pwd:') === 0;\n    })[0].substr(10)\n  };\n  return iceParameters;\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n          mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n          mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  // FIXME: add headerExtensions, fecMechanismş and rtcp.\n  sdp += 'a=rtcp-mux\\r\\n';\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n  .map(function(line) {\n    var parts = line.split(' ');\n    parts.shift();\n    return parts.map(function(part) {\n      return parseInt(part, 10);\n    });\n  });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n        rtx: {\n          payloadType: codec.payloadType,\n          ssrc: secondarySsrc\n        }\n      };\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: secondarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(5), 10);\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\nSDPUtils.writeSessionBoilerplate = function() {\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  // FIXME: for RTX there might be multiple SSRCs. Not implemented in Edge yet.\n  if (transceiver.rtpSender) {\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\n// Expose public methods.\nmodule.exports = SDPUtils;\n\n},{}],2:[function(require,module,exports){\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n\n\n// Shimming starts here.\n(function() {\n  // Utils.\n  var logging = require('./utils').log;\n  var browserDetails = require('./utils').browserDetails;\n  // Export to the adapter global object visible in the browser.\n  module.exports.browserDetails = browserDetails;\n  module.exports.extractVersion = require('./utils').extractVersion;\n  module.exports.disableLog = require('./utils').disableLog;\n\n  // Uncomment the line below if you want logging to occur, including logging\n  // for the switch statement below. Can also be turned on in the browser via\n  // adapter.disableLog(false), but then logging from the switch statement below\n  // will not appear.\n  // require('./utils').disableLog(false);\n\n  // Browser shims.\n  var chromeShim = require('./chrome/chrome_shim') || null;\n  var edgeShim = require('./edge/edge_shim') || null;\n  var firefoxShim = require('./firefox/firefox_shim') || null;\n  var safariShim = require('./safari/safari_shim') || null;\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'opera': // fallthrough as it uses chrome shims\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection) {\n        logging('Chrome shim is not included in this adapter release.');\n        return;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      module.exports.browserShim = chromeShim;\n\n      chromeShim.shimGetUserMedia();\n      chromeShim.shimMediaStream();\n      chromeShim.shimSourceObject();\n      chromeShim.shimPeerConnection();\n      chromeShim.shimOnTrack();\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection) {\n        logging('Firefox shim is not included in this adapter release.');\n        return;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      module.exports.browserShim = firefoxShim;\n\n      firefoxShim.shimGetUserMedia();\n      firefoxShim.shimSourceObject();\n      firefoxShim.shimPeerConnection();\n      firefoxShim.shimOnTrack();\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection) {\n        logging('MS edge shim is not included in this adapter release.');\n        return;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      module.exports.browserShim = edgeShim;\n\n      edgeShim.shimGetUserMedia();\n      edgeShim.shimPeerConnection();\n      break;\n    case 'safari':\n      if (!safariShim) {\n        logging('Safari shim is not included in this adapter release.');\n        return;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      module.exports.browserShim = safariShim;\n\n      safariShim.shimGetUserMedia();\n      break;\n    default:\n      logging('Unsupported browser!');\n  }\n})();\n\n},{\"./chrome/chrome_shim\":3,\"./edge/edge_shim\":5,\"./firefox/firefox_shim\":7,\"./safari/safari_shim\":9,\"./utils\":10}],3:[function(require,module,exports){\n\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\nvar logging = require('../utils.js').log;\nvar browserDetails = require('../utils.js').browserDetails;\n\nvar chromeShim = {\n  shimMediaStream: function() {\n    window.MediaStream = window.MediaStream || window.webkitMediaStream;\n  },\n\n  shimOnTrack: function() {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          var self = this;\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', function(te) {\n              var event = new Event('track');\n              event.track = te.track;\n              event.receiver = {track: te.track};\n              event.streams = [e.stream];\n              self.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function() {\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this._srcObject;\n          },\n          set: function(stream) {\n            var self = this;\n            // Use _srcObject as a private property for this shim\n            this._srcObject = stream;\n            if (this.src) {\n              URL.revokeObjectURL(this.src);\n            }\n\n            if (!stream) {\n              this.src = '';\n              return;\n            }\n            this.src = URL.createObjectURL(stream);\n            // We need to recreate the blob url when a track is added or\n            // removed. Doing it manually since we want to avoid a recursion.\n            stream.addEventListener('addtrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n            stream.addEventListener('removetrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function() {\n    // The RTCPeerConnection object.\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n      // Translate iceTransportPolicy to iceTransports,\n      // see https://code.google.com/p/webrtc/issues/detail?id=4869\n      logging('PeerConnection');\n      if (pcConfig && pcConfig.iceTransportPolicy) {\n        pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n      }\n\n      var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints);\n      var origGetStats = pc.getStats.bind(pc);\n      pc.getStats = function(selector, successCallback, errorCallback) {\n        var self = this;\n        var args = arguments;\n\n        // If selector is a function then we are in the old style stats so just\n        // pass back the original getStats format to avoid breaking old users.\n        if (arguments.length > 0 && typeof selector === 'function') {\n          return origGetStats(selector, successCallback);\n        }\n\n        var fixChromeStats_ = function(response) {\n          var standardReport = {};\n          var reports = response.result();\n          reports.forEach(function(report) {\n            var standardStats = {\n              id: report.id,\n              timestamp: report.timestamp,\n              type: report.type\n            };\n            report.names().forEach(function(name) {\n              standardStats[name] = report.stat(name);\n            });\n            standardReport[standardStats.id] = standardStats;\n          });\n\n          return standardReport;\n        };\n\n        // shim getStats with maplike support\n        var makeMapStats = function(stats, legacyStats) {\n          var map = new Map(Object.keys(stats).map(function(key) {\n            return[key, stats[key]];\n          }));\n          legacyStats = legacyStats || stats;\n          Object.keys(legacyStats).forEach(function(key) {\n            map[key] = legacyStats[key];\n          });\n          return map;\n        };\n\n        if (arguments.length >= 2) {\n          var successCallbackWrapper_ = function(response) {\n            args[1](makeMapStats(fixChromeStats_(response)));\n          };\n\n          return origGetStats.apply(this, [successCallbackWrapper_,\n              arguments[0]]);\n        }\n\n        // promise-support\n        return new Promise(function(resolve, reject) {\n          if (args.length === 1 && typeof selector === 'object') {\n            origGetStats.apply(self, [\n              function(response) {\n                resolve(makeMapStats(fixChromeStats_(response)));\n              }, reject]);\n          } else {\n            // Preserve legacy chrome stats only on legacy access of stats obj\n            origGetStats.apply(self, [\n              function(response) {\n                resolve(makeMapStats(fixChromeStats_(response),\n                    response.result()));\n              }, reject]);\n          }\n        }).then(successCallback, errorCallback);\n      };\n\n      return pc;\n    };\n    window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;\n\n    // wrap static methods. Currently just generateCertificate.\n    if (webkitRTCPeerConnection.generateCertificate) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return webkitRTCPeerConnection.generateCertificate;\n        }\n      });\n    }\n\n    ['createOffer', 'createAnswer'].forEach(function(method) {\n      var nativeMethod = webkitRTCPeerConnection.prototype[method];\n      webkitRTCPeerConnection.prototype[method] = function() {\n        var self = this;\n        if (arguments.length < 1 || (arguments.length === 1 &&\n            typeof arguments[0] === 'object')) {\n          var opts = arguments.length === 1 ? arguments[0] : undefined;\n          return new Promise(function(resolve, reject) {\n            nativeMethod.apply(self, [resolve, reject, opts]);\n          });\n        }\n        return nativeMethod.apply(this, arguments);\n      };\n    });\n\n    // add promise support -- natively available in Chrome 51\n    if (browserDetails.version < 51) {\n      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n          .forEach(function(method) {\n            var nativeMethod = webkitRTCPeerConnection.prototype[method];\n            webkitRTCPeerConnection.prototype[method] = function() {\n              var args = arguments;\n              var self = this;\n              var promise = new Promise(function(resolve, reject) {\n                nativeMethod.apply(self, [args[0], resolve, reject]);\n              });\n              if (args.length < 2) {\n                return promise;\n              }\n              return promise.then(function() {\n                args[1].apply(null, []);\n              },\n              function(err) {\n                if (args.length >= 3) {\n                  args[2].apply(null, [err]);\n                }\n              });\n            };\n          });\n    }\n\n    // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = webkitRTCPeerConnection.prototype[method];\n          webkitRTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                RTCIceCandidate : RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null)\n    var nativeAddIceCandidate =\n        RTCPeerConnection.prototype.addIceCandidate;\n    RTCPeerConnection.prototype.addIceCandidate = function() {\n      return arguments[0] === null ? Promise.resolve()\n          : nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n};\n\n\n// Expose public methods.\nmodule.exports = {\n  shimMediaStream: chromeShim.shimMediaStream,\n  shimOnTrack: chromeShim.shimOnTrack,\n  shimSourceObject: chromeShim.shimSourceObject,\n  shimPeerConnection: chromeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n\n},{\"../utils.js\":10,\"./getusermedia\":4}],4:[function(require,module,exports){\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\nvar logging = require('../utils.js').log;\n\n// Expose public methods.\nmodule.exports = function() {\n  var constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    var cc = {};\n    Object.keys(c).forEach(function(key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      var oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function(mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  var shimConstraints_ = function(constraints, func) {\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && constraints.audio) {\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile, where it defaults to \"user\".\n      var face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode)) {\n        delete constraints.video.facingMode;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          // Look for \"back\" in label, or use last cam (typically back cam).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(function(devices) {\n            devices = devices.filter(function(d) {\n              return d.kind === 'videoinput';\n            });\n            var back = devices.find(function(d) {\n              return d.label.toLowerCase().indexOf('back') !== -1;\n            }) || (devices.length && devices[devices.length - 1]);\n            if (back) {\n              constraints.video.deviceId = face.exact ? {exact: back.deviceId} :\n                                                        {ideal: back.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraintName,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, function(c) {\n      navigator.webkitGetUserMedia(c, onSuccess, function(e) {\n        onError(shimError_(e));\n      });\n    });\n  };\n\n  navigator.getUserMedia = getUserMedia_;\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      navigator.getUserMedia(constraints, resolve, reject);\n    });\n  };\n\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {\n      getUserMedia: getUserMediaPromise_,\n      enumerateDevices: function() {\n        return new Promise(function(resolve) {\n          var kinds = {audio: 'audioinput', video: 'videoinput'};\n          return MediaStreamTrack.getSources(function(devices) {\n            resolve(devices.map(function(device) {\n              return {label: device.label,\n                      kind: kinds[device.kind],\n                      deviceId: device.id,\n                      groupId: ''};\n            }));\n          });\n        });\n      }\n    };\n  }\n\n  // A shim for getUserMedia method on the mediaDevices object.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (!navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      return getUserMediaPromise_(constraints);\n    };\n  } else {\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n    // function which returns a Promise, it does not accept spec-style\n    // constraints.\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, function(c) {\n        return origGetUserMedia(c).catch(function(e) {\n          return Promise.reject(shimError_(e));\n        });\n      });\n    };\n  }\n\n  // Dummy devicechange event methods.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n    navigator.mediaDevices.addEventListener = function() {\n      logging('Dummy mediaDevices.addEventListener called.');\n    };\n  }\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n    navigator.mediaDevices.removeEventListener = function() {\n      logging('Dummy mediaDevices.removeEventListener called.');\n    };\n  }\n};\n\n},{\"../utils.js\":10}],5:[function(require,module,exports){\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n\nvar SDPUtils = require('sdp');\nvar browserDetails = require('../utils').browserDetails;\n\nvar edgeShim = {\n  shimPeerConnection: function() {\n    if (window.RTCIceGatherer) {\n      // ORTC defines an RTCIceCandidate object but no constructor.\n      // Not implemented in Edge.\n      if (!window.RTCIceCandidate) {\n        window.RTCIceCandidate = function(args) {\n          return args;\n        };\n      }\n      // ORTC does not have a session description object but\n      // other browsers (i.e. Chrome) that will support both PC and ORTC\n      // in the future might have this defined already.\n      if (!window.RTCSessionDescription) {\n        window.RTCSessionDescription = function(args) {\n          return args;\n        };\n      }\n    }\n\n    window.RTCPeerConnection = function(config) {\n      var self = this;\n\n      var _eventTarget = document.createDocumentFragment();\n      ['addEventListener', 'removeEventListener', 'dispatchEvent']\n          .forEach(function(method) {\n            self[method] = _eventTarget[method].bind(_eventTarget);\n          });\n\n      this.onicecandidate = null;\n      this.onaddstream = null;\n      this.ontrack = null;\n      this.onremovestream = null;\n      this.onsignalingstatechange = null;\n      this.oniceconnectionstatechange = null;\n      this.onnegotiationneeded = null;\n      this.ondatachannel = null;\n\n      this.localStreams = [];\n      this.remoteStreams = [];\n      this.getLocalStreams = function() {\n        return self.localStreams;\n      };\n      this.getRemoteStreams = function() {\n        return self.remoteStreams;\n      };\n\n      this.localDescription = new RTCSessionDescription({\n        type: '',\n        sdp: ''\n      });\n      this.remoteDescription = new RTCSessionDescription({\n        type: '',\n        sdp: ''\n      });\n      this.signalingState = 'stable';\n      this.iceConnectionState = 'new';\n      this.iceGatheringState = 'new';\n\n      this.iceOptions = {\n        gatherPolicy: 'all',\n        iceServers: []\n      };\n      if (config && config.iceTransportPolicy) {\n        switch (config.iceTransportPolicy) {\n          case 'all':\n          case 'relay':\n            this.iceOptions.gatherPolicy = config.iceTransportPolicy;\n            break;\n          case 'none':\n            // FIXME: remove once implementation and spec have added this.\n            throw new TypeError('iceTransportPolicy \"none\" not supported');\n          default:\n            // don't set iceTransportPolicy.\n            break;\n        }\n      }\n      this.usingBundle = config && config.bundlePolicy === 'max-bundle';\n\n      if (config && config.iceServers) {\n        // Edge does not like\n        // 1) stun:\n        // 2) turn: that does not have all of turn:host:port?transport=udp\n        // 3) turn: with ipv6 addresses\n        var iceServers = JSON.parse(JSON.stringify(config.iceServers));\n        this.iceOptions.iceServers = iceServers.filter(function(server) {\n          if (server && server.urls) {\n            var urls = server.urls;\n            if (typeof urls === 'string') {\n              urls = [urls];\n            }\n            urls = urls.filter(function(url) {\n              return (url.indexOf('turn:') === 0 &&\n                  url.indexOf('transport=udp') !== -1 &&\n                  url.indexOf('turn:[') === -1) ||\n                  (url.indexOf('stun:') === 0 &&\n                    browserDetails.version >= 14393);\n            })[0];\n            return !!urls;\n          }\n          return false;\n        });\n      }\n\n      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n      // everything that is needed to describe a SDP m-line.\n      this.transceivers = [];\n\n      // since the iceGatherer is currently created in createOffer but we\n      // must not emit candidates until after setLocalDescription we buffer\n      // them in this array.\n      this._localIceCandidatesBuffer = [];\n    };\n\n    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {\n      var self = this;\n      var sections = SDPUtils.splitSections(self.localDescription.sdp);\n      // FIXME: need to apply ice candidates in a way which is async but\n      // in-order\n      this._localIceCandidatesBuffer.forEach(function(event) {\n        var end = !event.candidate || Object.keys(event.candidate).length === 0;\n        if (end) {\n          for (var j = 1; j < sections.length; j++) {\n            if (sections[j].indexOf('\\r\\na=end-of-candidates\\r\\n') === -1) {\n              sections[j] += 'a=end-of-candidates\\r\\n';\n            }\n          }\n        } else if (event.candidate.candidate.indexOf('typ endOfCandidates')\n            === -1) {\n          sections[event.candidate.sdpMLineIndex + 1] +=\n              'a=' + event.candidate.candidate + '\\r\\n';\n        }\n        self.localDescription.sdp = sections.join('');\n        self.dispatchEvent(event);\n        if (self.onicecandidate !== null) {\n          self.onicecandidate(event);\n        }\n        if (!event.candidate && self.iceGatheringState !== 'complete') {\n          var complete = self.transceivers.every(function(transceiver) {\n            return transceiver.iceGatherer &&\n                transceiver.iceGatherer.state === 'completed';\n          });\n          if (complete) {\n            self.iceGatheringState = 'complete';\n          }\n        }\n      });\n      this._localIceCandidatesBuffer = [];\n    };\n\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      this.localStreams.push(stream.clone());\n      this._maybeFireNegotiationNeeded();\n    };\n\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\n      var idx = this.localStreams.indexOf(stream);\n      if (idx > -1) {\n        this.localStreams.splice(idx, 1);\n        this._maybeFireNegotiationNeeded();\n      }\n    };\n\n    window.RTCPeerConnection.prototype.getSenders = function() {\n      return this.transceivers.filter(function(transceiver) {\n        return !!transceiver.rtpSender;\n      })\n      .map(function(transceiver) {\n        return transceiver.rtpSender;\n      });\n    };\n\n    window.RTCPeerConnection.prototype.getReceivers = function() {\n      return this.transceivers.filter(function(transceiver) {\n        return !!transceiver.rtpReceiver;\n      })\n      .map(function(transceiver) {\n        return transceiver.rtpReceiver;\n      });\n    };\n\n    // Determines the intersection of local and remote capabilities.\n    window.RTCPeerConnection.prototype._getCommonCapabilities =\n        function(localCapabilities, remoteCapabilities) {\n          var commonCapabilities = {\n            codecs: [],\n            headerExtensions: [],\n            fecMechanisms: []\n          };\n          localCapabilities.codecs.forEach(function(lCodec) {\n            for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n              var rCodec = remoteCapabilities.codecs[i];\n              if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n                  lCodec.clockRate === rCodec.clockRate &&\n                  lCodec.numChannels === rCodec.numChannels) {\n                // push rCodec so we reply with offerer payload type\n                commonCapabilities.codecs.push(rCodec);\n\n                // determine common feedback mechanisms\n                rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n                  for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n                    if (lCodec.rtcpFeedback[j].type === fb.type &&\n                        lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n                // FIXME: also need to determine .parameters\n                //  see https://github.com/openpeer/ortc/issues/569\n                break;\n              }\n            }\n          });\n\n          localCapabilities.headerExtensions\n              .forEach(function(lHeaderExtension) {\n                for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n                     i++) {\n                  var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n                  if (lHeaderExtension.uri === rHeaderExtension.uri) {\n                    commonCapabilities.headerExtensions.push(rHeaderExtension);\n                    break;\n                  }\n                }\n              });\n\n          // FIXME: fecMechanisms\n          return commonCapabilities;\n        };\n\n    // Create ICE gatherer, ICE transport and DTLS transport.\n    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =\n        function(mid, sdpMLineIndex) {\n          var self = this;\n          var iceGatherer = new RTCIceGatherer(self.iceOptions);\n          var iceTransport = new RTCIceTransport(iceGatherer);\n          iceGatherer.onlocalcandidate = function(evt) {\n            var event = new Event('icecandidate');\n            event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n            var cand = evt.candidate;\n            var end = !cand || Object.keys(cand).length === 0;\n            // Edge emits an empty object for RTCIceCandidateComplete‥\n            if (end) {\n              // polyfill since RTCIceGatherer.state is not implemented in\n              // Edge 10547 yet.\n              if (iceGatherer.state === undefined) {\n                iceGatherer.state = 'completed';\n              }\n\n              // Emit a candidate with type endOfCandidates to make the samples\n              // work. Edge requires addIceCandidate with this empty candidate\n              // to start checking. The real solution is to signal\n              // end-of-candidates to the other side when getting the null\n              // candidate but some apps (like the samples) don't do that.\n              event.candidate.candidate =\n                  'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';\n            } else {\n              // RTCIceCandidate doesn't have a component, needs to be added\n              cand.component = iceTransport.component === 'RTCP' ? 2 : 1;\n              event.candidate.candidate = SDPUtils.writeCandidate(cand);\n            }\n\n            // update local description.\n            var sections = SDPUtils.splitSections(self.localDescription.sdp);\n            if (event.candidate.candidate.indexOf('typ endOfCandidates')\n                === -1) {\n              sections[event.candidate.sdpMLineIndex + 1] +=\n                  'a=' + event.candidate.candidate + '\\r\\n';\n            } else {\n              sections[event.candidate.sdpMLineIndex + 1] +=\n                  'a=end-of-candidates\\r\\n';\n            }\n            self.localDescription.sdp = sections.join('');\n\n            var complete = self.transceivers.every(function(transceiver) {\n              return transceiver.iceGatherer &&\n                  transceiver.iceGatherer.state === 'completed';\n            });\n\n            // Emit candidate if localDescription is set.\n            // Also emits null candidate when all gatherers are complete.\n            switch (self.iceGatheringState) {\n              case 'new':\n                self._localIceCandidatesBuffer.push(event);\n                if (end && complete) {\n                  self._localIceCandidatesBuffer.push(\n                      new Event('icecandidate'));\n                }\n                break;\n              case 'gathering':\n                self._emitBufferedCandidates();\n                self.dispatchEvent(event);\n                if (self.onicecandidate !== null) {\n                  self.onicecandidate(event);\n                }\n                if (complete) {\n                  self.dispatchEvent(new Event('icecandidate'));\n                  if (self.onicecandidate !== null) {\n                    self.onicecandidate(new Event('icecandidate'));\n                  }\n                  self.iceGatheringState = 'complete';\n                }\n                break;\n              case 'complete':\n                // should not happen... currently!\n                break;\n              default: // no-op.\n                break;\n            }\n          };\n          iceTransport.onicestatechange = function() {\n            self._updateConnectionState();\n          };\n\n          var dtlsTransport = new RTCDtlsTransport(iceTransport);\n          dtlsTransport.ondtlsstatechange = function() {\n            self._updateConnectionState();\n          };\n          dtlsTransport.onerror = function() {\n            // onerror does not set state to failed by itself.\n            dtlsTransport.state = 'failed';\n            self._updateConnectionState();\n          };\n\n          return {\n            iceGatherer: iceGatherer,\n            iceTransport: iceTransport,\n            dtlsTransport: dtlsTransport\n          };\n        };\n\n    // Start the RTP Sender and Receiver for a transceiver.\n    window.RTCPeerConnection.prototype._transceive = function(transceiver,\n        send, recv) {\n      var params = this._getCommonCapabilities(transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n      if (send && transceiver.rtpSender) {\n        params.encodings = transceiver.sendEncodingParameters;\n        params.rtcp = {\n          cname: SDPUtils.localCName\n        };\n        if (transceiver.recvEncodingParameters.length) {\n          params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n        }\n        transceiver.rtpSender.send(params);\n      }\n      if (recv && transceiver.rtpReceiver) {\n        params.encodings = transceiver.recvEncodingParameters;\n        params.rtcp = {\n          cname: transceiver.cname\n        };\n        if (transceiver.sendEncodingParameters.length) {\n          params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n        }\n        transceiver.rtpReceiver.receive(params);\n      }\n    };\n\n    window.RTCPeerConnection.prototype.setLocalDescription =\n        function(description) {\n          var self = this;\n          var sections;\n          var sessionpart;\n          if (description.type === 'offer') {\n            // FIXME: What was the purpose of this empty if statement?\n            // if (!this._pendingOffer) {\n            // } else {\n            if (this._pendingOffer) {\n              // VERY limited support for SDP munging. Limited to:\n              // * changing the order of codecs\n              sections = SDPUtils.splitSections(description.sdp);\n              sessionpart = sections.shift();\n              sections.forEach(function(mediaSection, sdpMLineIndex) {\n                var caps = SDPUtils.parseRtpParameters(mediaSection);\n                self._pendingOffer[sdpMLineIndex].localCapabilities = caps;\n              });\n              this.transceivers = this._pendingOffer;\n              delete this._pendingOffer;\n            }\n          } else if (description.type === 'answer') {\n            sections = SDPUtils.splitSections(self.remoteDescription.sdp);\n            sessionpart = sections.shift();\n            var isIceLite = SDPUtils.matchPrefix(sessionpart,\n                'a=ice-lite').length > 0;\n            sections.forEach(function(mediaSection, sdpMLineIndex) {\n              var transceiver = self.transceivers[sdpMLineIndex];\n              var iceGatherer = transceiver.iceGatherer;\n              var iceTransport = transceiver.iceTransport;\n              var dtlsTransport = transceiver.dtlsTransport;\n              var localCapabilities = transceiver.localCapabilities;\n              var remoteCapabilities = transceiver.remoteCapabilities;\n\n              var rejected = mediaSection.split('\\n', 1)[0]\n                  .split(' ', 2)[1] === '0';\n\n              if (!rejected && !transceiver.isDatachannel) {\n                var remoteIceParameters = SDPUtils.getIceParameters(\n                    mediaSection, sessionpart);\n                if (isIceLite) {\n                  var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n                  .map(function(cand) {\n                    return SDPUtils.parseCandidate(cand);\n                  })\n                  .filter(function(cand) {\n                    return cand.component === '1';\n                  });\n                  // ice-lite only includes host candidates in the SDP so we can\n                  // use setRemoteCandidates (which implies an\n                  // RTCIceCandidateComplete)\n                  if (cands.length) {\n                    iceTransport.setRemoteCandidates(cands);\n                  }\n                }\n                var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n                    mediaSection, sessionpart);\n                if (isIceLite) {\n                  remoteDtlsParameters.role = 'server';\n                }\n\n                if (!self.usingBundle || sdpMLineIndex === 0) {\n                  iceTransport.start(iceGatherer, remoteIceParameters,\n                      isIceLite ? 'controlling' : 'controlled');\n                  dtlsTransport.start(remoteDtlsParameters);\n                }\n\n                // Calculate intersection of capabilities.\n                var params = self._getCommonCapabilities(localCapabilities,\n                    remoteCapabilities);\n\n                // Start the RTCRtpSender. The RTCRtpReceiver for this\n                // transceiver has already been started in setRemoteDescription.\n                self._transceive(transceiver,\n                    params.codecs.length > 0,\n                    false);\n              }\n            });\n          }\n\n          this.localDescription = {\n            type: description.type,\n            sdp: description.sdp\n          };\n          switch (description.type) {\n            case 'offer':\n              this._updateSignalingState('have-local-offer');\n              break;\n            case 'answer':\n              this._updateSignalingState('stable');\n              break;\n            default:\n              throw new TypeError('unsupported type \"' + description.type +\n                  '\"');\n          }\n\n          // If a success callback was provided, emit ICE candidates after it\n          // has been executed. Otherwise, emit callback after the Promise is\n          // resolved.\n          var hasCallback = arguments.length > 1 &&\n            typeof arguments[1] === 'function';\n          if (hasCallback) {\n            var cb = arguments[1];\n            window.setTimeout(function() {\n              cb();\n              if (self.iceGatheringState === 'new') {\n                self.iceGatheringState = 'gathering';\n              }\n              self._emitBufferedCandidates();\n            }, 0);\n          }\n          var p = Promise.resolve();\n          p.then(function() {\n            if (!hasCallback) {\n              if (self.iceGatheringState === 'new') {\n                self.iceGatheringState = 'gathering';\n              }\n              // Usually candidates will be emitted earlier.\n              window.setTimeout(self._emitBufferedCandidates.bind(self), 500);\n            }\n          });\n          return p;\n        };\n\n    window.RTCPeerConnection.prototype.setRemoteDescription =\n        function(description) {\n          var self = this;\n          var stream = new MediaStream();\n          var receiverList = [];\n          var sections = SDPUtils.splitSections(description.sdp);\n          var sessionpart = sections.shift();\n          var isIceLite = SDPUtils.matchPrefix(sessionpart,\n              'a=ice-lite').length > 0;\n          this.usingBundle = SDPUtils.matchPrefix(sessionpart,\n              'a=group:BUNDLE ').length > 0;\n          sections.forEach(function(mediaSection, sdpMLineIndex) {\n            var lines = SDPUtils.splitLines(mediaSection);\n            var mline = lines[0].substr(2).split(' ');\n            var kind = mline[0];\n            var rejected = mline[1] === '0';\n            var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n\n            var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:');\n            if (mid.length) {\n              mid = mid[0].substr(6);\n            } else {\n              mid = SDPUtils.generateIdentifier();\n            }\n\n            // Reject datachannels which are not implemented yet.\n            if (kind === 'application' && mline[2] === 'DTLS/SCTP') {\n              self.transceivers[sdpMLineIndex] = {\n                mid: mid,\n                isDatachannel: true\n              };\n              return;\n            }\n\n            var transceiver;\n            var iceGatherer;\n            var iceTransport;\n            var dtlsTransport;\n            var rtpSender;\n            var rtpReceiver;\n            var sendEncodingParameters;\n            var recvEncodingParameters;\n            var localCapabilities;\n\n            var track;\n            // FIXME: ensure the mediaSection has rtcp-mux set.\n            var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n            var remoteIceParameters;\n            var remoteDtlsParameters;\n            if (!rejected) {\n              remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n                  sessionpart);\n              remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n                  sessionpart);\n              remoteDtlsParameters.role = 'client';\n            }\n            recvEncodingParameters =\n                SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n            var cname;\n            // Gets the first SSRC. Note that with RTX there might be multiple\n            // SSRCs.\n            var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n                .map(function(line) {\n                  return SDPUtils.parseSsrcMedia(line);\n                })\n                .filter(function(obj) {\n                  return obj.attribute === 'cname';\n                })[0];\n            if (remoteSsrc) {\n              cname = remoteSsrc.value;\n            }\n\n            var isComplete = SDPUtils.matchPrefix(mediaSection,\n                'a=end-of-candidates', sessionpart).length > 0;\n            var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n                .map(function(cand) {\n                  return SDPUtils.parseCandidate(cand);\n                })\n                .filter(function(cand) {\n                  return cand.component === '1';\n                });\n            if (description.type === 'offer' && !rejected) {\n              var transports = self.usingBundle && sdpMLineIndex > 0 ? {\n                iceGatherer: self.transceivers[0].iceGatherer,\n                iceTransport: self.transceivers[0].iceTransport,\n                dtlsTransport: self.transceivers[0].dtlsTransport\n              } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);\n\n              if (isComplete) {\n                transports.iceTransport.setRemoteCandidates(cands);\n              }\n\n              localCapabilities = RTCRtpReceiver.getCapabilities(kind);\n              sendEncodingParameters = [{\n                ssrc: (2 * sdpMLineIndex + 2) * 1001\n              }];\n\n              rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);\n\n              track = rtpReceiver.track;\n              receiverList.push([track, rtpReceiver]);\n              // FIXME: not correct when there are multiple streams but that is\n              // not currently supported in this shim.\n              stream.addTrack(track);\n\n              // FIXME: look at direction.\n              if (self.localStreams.length > 0 &&\n                  self.localStreams[0].getTracks().length >= sdpMLineIndex) {\n                var localTrack;\n                if (kind === 'audio') {\n                  localTrack = self.localStreams[0].getAudioTracks()[0];\n                } else if (kind === 'video') {\n                  localTrack = self.localStreams[0].getVideoTracks()[0];\n                }\n                if (localTrack) {\n                  rtpSender = new RTCRtpSender(localTrack,\n                      transports.dtlsTransport);\n                }\n              }\n\n              self.transceivers[sdpMLineIndex] = {\n                iceGatherer: transports.iceGatherer,\n                iceTransport: transports.iceTransport,\n                dtlsTransport: transports.dtlsTransport,\n                localCapabilities: localCapabilities,\n                remoteCapabilities: remoteCapabilities,\n                rtpSender: rtpSender,\n                rtpReceiver: rtpReceiver,\n                kind: kind,\n                mid: mid,\n                cname: cname,\n                sendEncodingParameters: sendEncodingParameters,\n                recvEncodingParameters: recvEncodingParameters\n              };\n              // Start the RTCRtpReceiver now. The RTPSender is started in\n              // setLocalDescription.\n              self._transceive(self.transceivers[sdpMLineIndex],\n                  false,\n                  direction === 'sendrecv' || direction === 'sendonly');\n            } else if (description.type === 'answer' && !rejected) {\n              transceiver = self.transceivers[sdpMLineIndex];\n              iceGatherer = transceiver.iceGatherer;\n              iceTransport = transceiver.iceTransport;\n              dtlsTransport = transceiver.dtlsTransport;\n              rtpSender = transceiver.rtpSender;\n              rtpReceiver = transceiver.rtpReceiver;\n              sendEncodingParameters = transceiver.sendEncodingParameters;\n              localCapabilities = transceiver.localCapabilities;\n\n              self.transceivers[sdpMLineIndex].recvEncodingParameters =\n                  recvEncodingParameters;\n              self.transceivers[sdpMLineIndex].remoteCapabilities =\n                  remoteCapabilities;\n              self.transceivers[sdpMLineIndex].cname = cname;\n\n              if ((isIceLite || isComplete) && cands.length) {\n                iceTransport.setRemoteCandidates(cands);\n              }\n              if (!self.usingBundle || sdpMLineIndex === 0) {\n                iceTransport.start(iceGatherer, remoteIceParameters,\n                    'controlling');\n                dtlsTransport.start(remoteDtlsParameters);\n              }\n\n              self._transceive(transceiver,\n                  direction === 'sendrecv' || direction === 'recvonly',\n                  direction === 'sendrecv' || direction === 'sendonly');\n\n              if (rtpReceiver &&\n                  (direction === 'sendrecv' || direction === 'sendonly')) {\n                track = rtpReceiver.track;\n                receiverList.push([track, rtpReceiver]);\n                stream.addTrack(track);\n              } else {\n                // FIXME: actually the receiver should be created later.\n                delete transceiver.rtpReceiver;\n              }\n            }\n          });\n\n          this.remoteDescription = {\n            type: description.type,\n            sdp: description.sdp\n          };\n          switch (description.type) {\n            case 'offer':\n              this._updateSignalingState('have-remote-offer');\n              break;\n            case 'answer':\n              this._updateSignalingState('stable');\n              break;\n            default:\n              throw new TypeError('unsupported type \"' + description.type +\n                  '\"');\n          }\n          if (stream.getTracks().length) {\n            self.remoteStreams.push(stream);\n            window.setTimeout(function() {\n              var event = new Event('addstream');\n              event.stream = stream;\n              self.dispatchEvent(event);\n              if (self.onaddstream !== null) {\n                window.setTimeout(function() {\n                  self.onaddstream(event);\n                }, 0);\n              }\n\n              receiverList.forEach(function(item) {\n                var track = item[0];\n                var receiver = item[1];\n                var trackEvent = new Event('track');\n                trackEvent.track = track;\n                trackEvent.receiver = receiver;\n                trackEvent.streams = [stream];\n                self.dispatchEvent(event);\n                if (self.ontrack !== null) {\n                  window.setTimeout(function() {\n                    self.ontrack(trackEvent);\n                  }, 0);\n                }\n              });\n            }, 0);\n          }\n          if (arguments.length > 1 && typeof arguments[1] === 'function') {\n            window.setTimeout(arguments[1], 0);\n          }\n          return Promise.resolve();\n        };\n\n    window.RTCPeerConnection.prototype.close = function() {\n      this.transceivers.forEach(function(transceiver) {\n        /* not yet\n        if (transceiver.iceGatherer) {\n          transceiver.iceGatherer.close();\n        }\n        */\n        if (transceiver.iceTransport) {\n          transceiver.iceTransport.stop();\n        }\n        if (transceiver.dtlsTransport) {\n          transceiver.dtlsTransport.stop();\n        }\n        if (transceiver.rtpSender) {\n          transceiver.rtpSender.stop();\n        }\n        if (transceiver.rtpReceiver) {\n          transceiver.rtpReceiver.stop();\n        }\n      });\n      // FIXME: clean up tracks, local streams, remote streams, etc\n      this._updateSignalingState('closed');\n    };\n\n    // Update the signaling state.\n    window.RTCPeerConnection.prototype._updateSignalingState =\n        function(newState) {\n          this.signalingState = newState;\n          var event = new Event('signalingstatechange');\n          this.dispatchEvent(event);\n          if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n          }\n        };\n\n    // Determine whether to fire the negotiationneeded event.\n    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =\n        function() {\n          // Fire away (for now).\n          var event = new Event('negotiationneeded');\n          this.dispatchEvent(event);\n          if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n          }\n        };\n\n    // Update the connection state.\n    window.RTCPeerConnection.prototype._updateConnectionState = function() {\n      var self = this;\n      var newState;\n      var states = {\n        'new': 0,\n        closed: 0,\n        connecting: 0,\n        checking: 0,\n        connected: 0,\n        completed: 0,\n        failed: 0\n      };\n      this.transceivers.forEach(function(transceiver) {\n        states[transceiver.iceTransport.state]++;\n        states[transceiver.dtlsTransport.state]++;\n      });\n      // ICETransport.completed and connected are the same for this purpose.\n      states.connected += states.completed;\n\n      newState = 'new';\n      if (states.failed > 0) {\n        newState = 'failed';\n      } else if (states.connecting > 0 || states.checking > 0) {\n        newState = 'connecting';\n      } else if (states.disconnected > 0) {\n        newState = 'disconnected';\n      } else if (states.new > 0) {\n        newState = 'new';\n      } else if (states.connected > 0 || states.completed > 0) {\n        newState = 'connected';\n      }\n\n      if (newState !== self.iceConnectionState) {\n        self.iceConnectionState = newState;\n        var event = new Event('iceconnectionstatechange');\n        this.dispatchEvent(event);\n        if (this.oniceconnectionstatechange !== null) {\n          this.oniceconnectionstatechange(event);\n        }\n      }\n    };\n\n    window.RTCPeerConnection.prototype.createOffer = function() {\n      var self = this;\n      if (this._pendingOffer) {\n        throw new Error('createOffer called while there is a pending offer.');\n      }\n      var offerOptions;\n      if (arguments.length === 1 && typeof arguments[0] !== 'function') {\n        offerOptions = arguments[0];\n      } else if (arguments.length === 3) {\n        offerOptions = arguments[2];\n      }\n\n      var tracks = [];\n      var numAudioTracks = 0;\n      var numVideoTracks = 0;\n      // Default to sendrecv.\n      if (this.localStreams.length) {\n        numAudioTracks = this.localStreams[0].getAudioTracks().length;\n        numVideoTracks = this.localStreams[0].getVideoTracks().length;\n      }\n      // Determine number of audio and video tracks we need to send/recv.\n      if (offerOptions) {\n        // Reject Chrome legacy constraints.\n        if (offerOptions.mandatory || offerOptions.optional) {\n          throw new TypeError(\n              'Legacy mandatory/optional constraints not supported.');\n        }\n        if (offerOptions.offerToReceiveAudio !== undefined) {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n        if (offerOptions.offerToReceiveVideo !== undefined) {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n      if (this.localStreams.length) {\n        // Push local streams.\n        this.localStreams[0].getTracks().forEach(function(track) {\n          tracks.push({\n            kind: track.kind,\n            track: track,\n            wantReceive: track.kind === 'audio' ?\n                numAudioTracks > 0 : numVideoTracks > 0\n          });\n          if (track.kind === 'audio') {\n            numAudioTracks--;\n          } else if (track.kind === 'video') {\n            numVideoTracks--;\n          }\n        });\n      }\n      // Create M-lines for recvonly streams.\n      while (numAudioTracks > 0 || numVideoTracks > 0) {\n        if (numAudioTracks > 0) {\n          tracks.push({\n            kind: 'audio',\n            wantReceive: true\n          });\n          numAudioTracks--;\n        }\n        if (numVideoTracks > 0) {\n          tracks.push({\n            kind: 'video',\n            wantReceive: true\n          });\n          numVideoTracks--;\n        }\n      }\n\n      var sdp = SDPUtils.writeSessionBoilerplate();\n      var transceivers = [];\n      tracks.forEach(function(mline, sdpMLineIndex) {\n        // For each track, create an ice gatherer, ice transport,\n        // dtls transport, potentially rtpsender and rtpreceiver.\n        var track = mline.track;\n        var kind = mline.kind;\n        var mid = SDPUtils.generateIdentifier();\n\n        var transports = self.usingBundle && sdpMLineIndex > 0 ? {\n          iceGatherer: transceivers[0].iceGatherer,\n          iceTransport: transceivers[0].iceTransport,\n          dtlsTransport: transceivers[0].dtlsTransport\n        } : self._createIceAndDtlsTransports(mid, sdpMLineIndex);\n\n        var localCapabilities = RTCRtpSender.getCapabilities(kind);\n        var rtpSender;\n        var rtpReceiver;\n\n        // generate an ssrc now, to be used later in rtpSender.send\n        var sendEncodingParameters = [{\n          ssrc: (2 * sdpMLineIndex + 1) * 1001\n        }];\n        if (track) {\n          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);\n        }\n\n        if (mline.wantReceive) {\n          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);\n        }\n\n        transceivers[sdpMLineIndex] = {\n          iceGatherer: transports.iceGatherer,\n          iceTransport: transports.iceTransport,\n          dtlsTransport: transports.dtlsTransport,\n          localCapabilities: localCapabilities,\n          remoteCapabilities: null,\n          rtpSender: rtpSender,\n          rtpReceiver: rtpReceiver,\n          kind: kind,\n          mid: mid,\n          sendEncodingParameters: sendEncodingParameters,\n          recvEncodingParameters: null\n        };\n      });\n      if (this.usingBundle) {\n        sdp += 'a=group:BUNDLE ' + transceivers.map(function(t) {\n          return t.mid;\n        }).join(' ') + '\\r\\n';\n      }\n      tracks.forEach(function(mline, sdpMLineIndex) {\n        var transceiver = transceivers[sdpMLineIndex];\n        sdp += SDPUtils.writeMediaSection(transceiver,\n            transceiver.localCapabilities, 'offer', self.localStreams[0]);\n      });\n\n      this._pendingOffer = transceivers;\n      var desc = new RTCSessionDescription({\n        type: 'offer',\n        sdp: sdp\n      });\n      if (arguments.length && typeof arguments[0] === 'function') {\n        window.setTimeout(arguments[0], 0, desc);\n      }\n      return Promise.resolve(desc);\n    };\n\n    window.RTCPeerConnection.prototype.createAnswer = function() {\n      var self = this;\n\n      var sdp = SDPUtils.writeSessionBoilerplate();\n      if (this.usingBundle) {\n        sdp += 'a=group:BUNDLE ' + this.transceivers.map(function(t) {\n          return t.mid;\n        }).join(' ') + '\\r\\n';\n      }\n      this.transceivers.forEach(function(transceiver) {\n        if (transceiver.isDatachannel) {\n          sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n' +\n              'c=IN IP4 0.0.0.0\\r\\n' +\n              'a=mid:' + transceiver.mid + '\\r\\n';\n          return;\n        }\n        // Calculate intersection of capabilities.\n        var commonCapabilities = self._getCommonCapabilities(\n            transceiver.localCapabilities,\n            transceiver.remoteCapabilities);\n\n        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,\n            'answer', self.localStreams[0]);\n      });\n\n      var desc = new RTCSessionDescription({\n        type: 'answer',\n        sdp: sdp\n      });\n      if (arguments.length && typeof arguments[0] === 'function') {\n        window.setTimeout(arguments[0], 0, desc);\n      }\n      return Promise.resolve(desc);\n    };\n\n    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n      if (candidate === null) {\n        this.transceivers.forEach(function(transceiver) {\n          transceiver.iceTransport.addRemoteCandidate({});\n        });\n      } else {\n        var mLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < this.transceivers.length; i++) {\n            if (this.transceivers[i].mid === candidate.sdpMid) {\n              mLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = this.transceivers[mLineIndex];\n        if (transceiver) {\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return;\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component !== '1') {\n            return;\n          }\n          // A dirty hack to make samples work.\n          if (cand.type === 'endOfCandidates') {\n            cand = {};\n          }\n          transceiver.iceTransport.addRemoteCandidate(cand);\n\n          // update the remoteDescription.\n          var sections = SDPUtils.splitSections(this.remoteDescription.sdp);\n          sections[mLineIndex + 1] += (cand.type ? candidate.candidate.trim()\n              : 'a=end-of-candidates') + '\\r\\n';\n          this.remoteDescription.sdp = sections.join('');\n        }\n      }\n      if (arguments.length > 1 && typeof arguments[1] === 'function') {\n        window.setTimeout(arguments[1], 0);\n      }\n      return Promise.resolve();\n    };\n\n    window.RTCPeerConnection.prototype.getStats = function() {\n      var promises = [];\n      this.transceivers.forEach(function(transceiver) {\n        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n            'dtlsTransport'].forEach(function(method) {\n              if (transceiver[method]) {\n                promises.push(transceiver[method].getStats());\n              }\n            });\n      });\n      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&\n          arguments[1];\n      return new Promise(function(resolve) {\n        // shim getStats with maplike support\n        var results = new Map();\n        Promise.all(promises).then(function(res) {\n          res.forEach(function(result) {\n            Object.keys(result).forEach(function(id) {\n              results.set(id, result[id]);\n              results[id] = result[id];\n            });\n          });\n          if (cb) {\n            window.setTimeout(cb, 0, results);\n          }\n          resolve(results);\n        });\n      });\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimPeerConnection: edgeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n\n},{\"../utils\":10,\"./getusermedia\":6,\"sdp\":1}],6:[function(require,module,exports){\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n\n// Expose public methods.\nmodule.exports = function() {\n  var shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(function(e) {\n      return Promise.reject(shimError_(e));\n    });\n  };\n};\n\n},{}],7:[function(require,module,exports){\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n\nvar browserDetails = require('../utils').browserDetails;\n\nvar firefoxShim = {\n  shimOnTrack: function() {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function() {\n    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this.mozSrcObject;\n          },\n          set: function(stream) {\n            this.mozSrcObject = stream;\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function() {\n    if (typeof window !== 'object' || !(window.RTCPeerConnection ||\n        window.mozRTCPeerConnection)) {\n      return; // probably media.peerconnection.enabled=false in about:config\n    }\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (browserDetails.version < 38) {\n          // .urls is not supported in FF < 38.\n          // create RTCIceServers with a single url.\n          if (pcConfig && pcConfig.iceServers) {\n            var newIceServers = [];\n            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n              var server = pcConfig.iceServers[i];\n              if (server.hasOwnProperty('urls')) {\n                for (var j = 0; j < server.urls.length; j++) {\n                  var newServer = {\n                    url: server.urls[j]\n                  };\n                  if (server.urls[j].indexOf('turn') === 0) {\n                    newServer.username = server.username;\n                    newServer.credential = server.credential;\n                  }\n                  newIceServers.push(newServer);\n                }\n              } else {\n                newIceServers.push(pcConfig.iceServers[i]);\n              }\n            }\n            pcConfig.iceServers = newIceServers;\n          }\n        }\n        return new mozRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;\n\n      // wrap static methods. Currently just generateCertificate.\n      if (mozRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return mozRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n\n      window.RTCSessionDescription = mozRTCSessionDescription;\n      window.RTCIceCandidate = mozRTCIceCandidate;\n    }\n\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = RTCPeerConnection.prototype[method];\n          RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                RTCIceCandidate : RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null)\n    var nativeAddIceCandidate =\n        RTCPeerConnection.prototype.addIceCandidate;\n    RTCPeerConnection.prototype.addIceCandidate = function() {\n      return arguments[0] === null ? Promise.resolve()\n          : nativeAddIceCandidate.apply(this, arguments);\n    };\n\n    // shim getStats with maplike support\n    var makeMapStats = function(stats) {\n      var map = new Map();\n      Object.keys(stats).forEach(function(key) {\n        map.set(key, stats[key]);\n        map[key] = stats[key];\n      });\n      return map;\n    };\n\n    var nativeGetStats = RTCPeerConnection.prototype.getStats;\n    RTCPeerConnection.prototype.getStats = function(selector, onSucc, onErr) {\n      return nativeGetStats.apply(this, [selector || null])\n        .then(function(stats) {\n          return makeMapStats(stats);\n        })\n        .then(onSucc, onErr);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimOnTrack: firefoxShim.shimOnTrack,\n  shimSourceObject: firefoxShim.shimSourceObject,\n  shimPeerConnection: firefoxShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n\n},{\"../utils\":10,\"./getusermedia\":8}],8:[function(require,module,exports){\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n\nvar logging = require('../utils').log;\nvar browserDetails = require('../utils').browserDetails;\n\n// Expose public methods.\nmodule.exports = function() {\n  var shimError_ = function(e) {\n    return {\n      name: {\n        SecurityError: 'NotAllowedError',\n        PermissionDeniedError: 'NotAllowedError'\n      }[e.name] || e.name,\n      message: {\n        'The operation is insecure.': 'The request is not allowed by the ' +\n        'user agent or the platform in the current context.'\n      }[e.message] || e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  // getUserMedia constraints shim.\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    var constraintsToFF37_ = function(c) {\n      if (typeof c !== 'object' || c.require) {\n        return c;\n      }\n      var require = [];\n      Object.keys(c).forEach(function(key) {\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n          return;\n        }\n        var r = c[key] = (typeof c[key] === 'object') ?\n            c[key] : {ideal: c[key]};\n        if (r.min !== undefined ||\n            r.max !== undefined || r.exact !== undefined) {\n          require.push(key);\n        }\n        if (r.exact !== undefined) {\n          if (typeof r.exact === 'number') {\n            r. min = r.max = r.exact;\n          } else {\n            c[key] = r.exact;\n          }\n          delete r.exact;\n        }\n        if (r.ideal !== undefined) {\n          c.advanced = c.advanced || [];\n          var oc = {};\n          if (typeof r.ideal === 'number') {\n            oc[key] = {min: r.ideal, max: r.ideal};\n          } else {\n            oc[key] = r.ideal;\n          }\n          c.advanced.push(oc);\n          delete r.ideal;\n          if (!Object.keys(r).length) {\n            delete c[key];\n          }\n        }\n      });\n      if (require.length) {\n        c.require = require;\n      }\n      return c;\n    };\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (browserDetails.version < 38) {\n      logging('spec: ' + JSON.stringify(constraints));\n      if (constraints.audio) {\n        constraints.audio = constraintsToFF37_(constraints.audio);\n      }\n      if (constraints.video) {\n        constraints.video = constraintsToFF37_(constraints.video);\n      }\n      logging('ff37: ' + JSON.stringify(constraints));\n    }\n    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {\n      onError(shimError_(e));\n    });\n  };\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      getUserMedia_(constraints, resolve, reject);\n    });\n  };\n\n  // Shim for mediaDevices on older versions.\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,\n      addEventListener: function() { },\n      removeEventListener: function() { }\n    };\n  }\n  navigator.mediaDevices.enumerateDevices =\n      navigator.mediaDevices.enumerateDevices || function() {\n        return new Promise(function(resolve) {\n          var infos = [\n            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n          ];\n          resolve(infos);\n        });\n      };\n\n  if (browserDetails.version < 41) {\n    // Work around http://bugzil.la/1169665\n    var orgEnumerateDevices =\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n    navigator.mediaDevices.enumerateDevices = function() {\n      return orgEnumerateDevices().then(undefined, function(e) {\n        if (e.name === 'NotFoundError') {\n          return [];\n        }\n        throw e;\n      });\n    };\n  }\n  if (browserDetails.version < 49) {\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      return origGetUserMedia(c).catch(function(e) {\n        return Promise.reject(shimError_(e));\n      });\n    };\n  }\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    if (browserDetails.version < 44) {\n      return getUserMedia_(constraints, onSuccess, onError);\n    }\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    console.warn('navigator.getUserMedia has been replaced by ' +\n                 'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n};\n\n},{\"../utils\":10}],9:[function(require,module,exports){\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\nvar safariShim = {\n  // TODO: DrAlex, should be here, double check against LayoutTests\n  // shimOnTrack: function() { },\n\n  // TODO: once the back-end for the mac port is done, add.\n  // TODO: check for webkitGTK+\n  // shimPeerConnection: function() { },\n\n  shimGetUserMedia: function() {\n    navigator.getUserMedia = navigator.webkitGetUserMedia;\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimGetUserMedia: safariShim.shimGetUserMedia\n  // TODO\n  // shimOnTrack: safariShim.shimOnTrack,\n  // shimPeerConnection: safariShim.shimPeerConnection\n};\n\n},{}],10:[function(require,module,exports){\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n\nvar logDisabled_ = true;\n\n// Utility methods.\nvar utils = {\n  disableLog: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    logDisabled_ = bool;\n    return (bool) ? 'adapter.js logging disabled' :\n        'adapter.js logging enabled';\n  },\n\n  log: function() {\n    if (typeof window === 'object') {\n      if (logDisabled_) {\n        return;\n      }\n      if (typeof console !== 'undefined' && typeof console.log === 'function') {\n        console.log.apply(console, arguments);\n      }\n    }\n  },\n\n  /**\n   * Extract browser version out of the provided user agent string.\n   *\n   * @param {!string} uastring userAgent string.\n   * @param {!string} expr Regular expression used as match criteria.\n   * @param {!number} pos position in the version string to be returned.\n   * @return {!number} browser version.\n   */\n  extractVersion: function(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  },\n\n  /**\n   * Browser detector.\n   *\n   * @return {object} result containing browser and version\n   *     properties.\n   */\n  detectBrowser: function() {\n    // Returned result object.\n    var result = {};\n    result.browser = null;\n    result.version = null;\n\n    // Fail early if it's not a browser\n    if (typeof window === 'undefined' || !window.navigator) {\n      result.browser = 'Not a browser.';\n      return result;\n    }\n\n    // Firefox.\n    if (navigator.mozGetUserMedia) {\n      result.browser = 'firefox';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Firefox\\/([0-9]+)\\./, 1);\n\n    // all webkit-based browsers\n    } else if (navigator.webkitGetUserMedia) {\n      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now\n      if (window.webkitRTCPeerConnection) {\n        result.browser = 'chrome';\n        result.version = this.extractVersion(navigator.userAgent,\n          /Chrom(e|ium)\\/([0-9]+)\\./, 2);\n\n      // Safari or unknown webkit-based\n      // for the time being Safari has support for MediaStreams but not webRTC\n      } else {\n        // Safari UA substrings of interest for reference:\n        // - webkit version:           AppleWebKit/602.1.25 (also used in Op,Cr)\n        // - safari UI version:        Version/9.0.3 (unique to Safari)\n        // - safari UI webkit version: Safari/601.4.4 (also used in Op,Cr)\n        //\n        // if the webkit version and safari UI webkit versions are equals,\n        // ... this is a stable version.\n        //\n        // only the internal webkit version is important today to know if\n        // media streams are supported\n        //\n        if (navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n          result.browser = 'safari';\n          result.version = this.extractVersion(navigator.userAgent,\n            /AppleWebKit\\/([0-9]+)\\./, 1);\n\n        // unknown webkit-based browser\n        } else {\n          result.browser = 'Unsupported webkit-based browser ' +\n              'with GUM support but no WebRTC support.';\n          return result;\n        }\n      }\n\n    // Edge.\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) {\n      result.browser = 'edge';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Edge\\/(\\d+).(\\d+)$/, 2);\n\n    // Default fallthrough: not supported.\n    } else {\n      result.browser = 'Not a supported browser.';\n      return result;\n    }\n\n    return result;\n  }\n};\n\n// Export.\nmodule.exports = {\n  log: utils.log,\n  disableLog: utils.disableLog,\n  browserDetails: utils.detectBrowser(),\n  extractVersion: utils.extractVersion\n};\n\n},{}]},{},[2])(2)\n});\n/* global define, module, require, console, MediaStreamTrack, createIceServer, RTCIceCandidate, RTCPeerConnection, RTCSessionDescription */\n/*!\n  Script: easyrtc.js\n\n    Provides client side support for the EasyRTC framework.\n    See the easyrtc_client_api.md and easyrtc_client_tutorial.md\n    for more details.\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define('easyrtc',['easyrtc_lang', 'webrtc-adapter', 'socket.io'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory(require('easyrtc_lang'), require('webrtc-adapter'), require('socket.io'));\n    } else {\n        //Vanilla JS, ensure dependencies are loaded correctly\n        if (typeof window.io === 'undefined' || !window.io) {\n            throw new Error(\"easyrtc requires socket.io\");\n        }\n        root.easyrtc = factory(window.easyrtc_lang, window.adapter, window.io);\n  }\n}(this, function (easyrtc_lang, adapter, io, undefined) {\n\n\n/**\n * @class Easyrtc.\n *\n * @returns {Easyrtc} the new easyrtc instance.\n *\n * @constructs Easyrtc\n */\nvar Easyrtc = function() {\n\n    var self = this;\n\n    function logDebug (message, obj) {\n        if (self.debugPrinter) {\n            self.debugPrinter(message, obj);\n        }\n    }\n\n    function isEmptyObj(obj) {\n        if (obj === null || obj === undefined) {\n            return true;\n        }\n        var key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /** @private */\n    var autoInitUserMedia = true;\n    /** @private */\n    var sdpLocalFilter = null;\n    /** @private */\n    var sdpRemoteFilter = null;\n    /** @private */\n    var iceCandidateFilter = null;\n    /** @private */\n    var iceConnectionStateChangeListener = null;\n    var signalingStateChangeListener = null;\n    /** @private */\n    var connectionOptions =  {\n        'connect timeout': 10000,\n        'force new connection': true\n    };\n\n    /** @private */\n    //\n    // this function replaces the deprecated MediaStream.stop method\n    //\n    function stopStream(stream) {\n       var i;\n       var tracks;\n\n       tracks = stream.getAudioTracks();\n       for( i = 0; i < tracks.length; i++ ) {\n           try {\n             tracks[i].stop();\n           } catch(err){}\n       }\n       tracks = stream.getVideoTracks();\n       for( i = 0; i < tracks.length; i++ ) {\n           try {\n             tracks[i].stop();\n           } catch(err){}\n       }\n\n       if (typeof stream.stop === 'function') {\n           try {\n             stream.stop();\n           } catch(err){}\n       }\n    }\n\n    /**\n     * Sets functions which filter sdp records before calling setLocalDescription or setRemoteDescription.\n     * This is advanced functionality which can break things, easily. See the easyrtc_rates.js file for a\n     * filter builder.\n     * @param {Function} localFilter a function that takes an sdp string and returns an sdp string.\n     * @param {Function} remoteFilter a function that takes an sdp string and returns an sdp string.\n     */\n    this.setSdpFilters = function(localFilter, remoteFilter) {\n        sdpLocalFilter = localFilter;\n        sdpRemoteFilter = remoteFilter;\n    };\n\n    /**\n     * Sets a function to warn about the peer connection closing.\n     *  @param {Function} handler: a function that gets an easyrtcid as an argument.\n     */\n    this.setPeerClosedListener = function( handler ) {\n       this.onPeerClosed = handler;\n    };\n\n    /**\n     * Sets a function to warn about the peer connection open.\n     *  @param {Function} handler: a function that gets an easyrtcid as an argument.\n     */\n    this.setPeerOpenListener = function( handler ) {\n       this.onPeerOpen = handler;\n    };\n\n    /**\n     * Sets a function to receive warnings about the peer connection\n     * failing. The peer connection may recover by itself.\n     *  @param {Function} failingHandler: a function that gets an easyrtcid as an argument.\n     *  @param {Function} recoveredHandler: a function that gets an easyrtcid as an argument.\n     */\n    this.setPeerFailingListener = function( failingHandler, recoveredHandler ) {\n       this.onPeerFailing = failingHandler;\n       this.onPeerRecovered = recoveredHandler;\n    };\n\n    /**\n     * Sets a function which filters IceCandidate records being sent or received.\n     *\n     * Candidate records can be received while they are being generated locally (before being\n     * sent to a peer), and after they are received by the peer. The filter receives two arguments, the candidate record and a boolean\n     * flag that is true for a candidate being received from another peer,\n     * and false for a candidate that was generated locally. The candidate record has the form:\n     *  {type: 'candidate', label: sdpMLineIndex, id: sdpMid, candidate: candidateString}\n     * The function should return one of the following: the input candidate record, a modified candidate record, or null (indicating that the\n     * candidate should be discarded).\n     * @param {Function} filter\n     */\n    this.setIceCandidateFilter = function(filter) {\n        iceCandidateFilter = filter;\n    };\n\n    /**\n     * Sets a function that listens on IceConnectionStateChange events.\n     *\n     * During ICE negotiation the peer connection fires the iceconnectionstatechange event.\n     * It is sometimes useful for the application to learn about these changes, especially if the ICE connection fails.\n     * The function should accept three parameters: the easyrtc id of the peer, the iceconnectionstatechange event target and the iceconnectionstate.\n     * @param {Function} listener\n     */\n    this.setIceConnectionStateChangeListener = function(listener) {\n       iceConnectionStateChangeListener = listener;\n    };\n\n    /**\n     * Sets a function that listens on SignalingStateChange events.\n     *\n     * During ICE negotiation the peer connection fires the signalingstatechange event.\n     * The function should accept three parameters: the easyrtc id of the peer, the signalingstatechange event target and the signalingstate.\n     * @param {Function} listener\n     */\n    this.setSignalingStateChangeListener = function(listener) {\n       signalingStateChangeListener = listener;\n    };\n\n    /**\n     * Controls whether a default local media stream should be acquired automatically during calls and accepts\n     * if a list of streamNames is not supplied. The default is true, which mimics the behaviour of earlier releases\n     * that didn't support multiple streams. This function should be called before easyrtc.call or before entering an\n     * accept  callback.\n     * @param {Boolean} flag true to allocate a default local media stream.\n     */\n    this.setAutoInitUserMedia = function(flag) {\n        autoInitUserMedia = !!flag;\n    };\n\n    /**\n     * This function performs a printf like formatting. It actually takes an unlimited\n     * number of arguments, the declared arguments arg1, arg2, arg3 are present just for\n     * documentation purposes.\n     * @param {String} format A string like \"abcd{1}efg{2}hij{1}.\"\n     * @param {String} arg1 The value that replaces {1}\n     * @param {String} arg2 The value that replaces {2}\n     * @param {String} arg3 The value that replaces {3}\n     * @returns {String} the formatted string.\n     */\n    this.format = function(format, arg1, arg2, arg3) {\n        var formatted = arguments[0];\n        for (var i = 1; i < arguments.length; i++) {\n            var regexp = new RegExp('\\\\{' + (i - 1) + '\\\\}', 'gi');\n            formatted = formatted.replace(regexp, arguments[i]);\n        }\n        return formatted;\n    };\n\n    /**\n     * This function checks if a socket is actually connected.\n     * @private\n     * @param {Object} socket a socket.io socket.\n     * @return true if the socket exists and is connected, false otherwise.\n    */\n    function isSocketConnected(socket) {\n       return socket && (\n            (socket.socket && socket.socket.connected) || socket.connected\n        );\n    }\n\n    /** @private */\n    //\n    // Maps a key to a language specific string using the easyrtc_lang map.\n    // Defaults to the key if the key can not be found, but outputs a warning in that case.\n    // This function is only used internally by easyrtc.js\n    //\n    var haveAudioVideo = {\n        audio: false,\n        video: false\n    };\n\n    /**\n     * @private\n     * @param {String} key\n     */\n    this.getConstantString = function(key) {\n        if (easyrtc_lang[key]) {\n            return easyrtc_lang[key];\n        }\n        else {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Could not find key='\" + key + \"' in easyrtc_lang\");\n            return key;\n        }\n    };\n\n    /** @private */\n    //\n    // this is a list of the events supported by the generalized event listener.\n    //\n    var allowedEvents = {\n        roomOccupant: true,  // this receives the list of everybody in any room you belong to\n        roomOccupants: true  // this receives a {roomName:..., occupants:...} value for a specific room\n    };\n\n    /** @private */\n    //\n    // A map of eventListeners. The key is the event type.\n    //\n    var eventListeners = {};\n\n    /**\n     * This function checks if an attempt was made to add an event listener or\n     * or emit an unlisted event, since such is typically a typo.\n     * @private\n     * @param {String} eventName\n     * @param {String} callingFunction the name of the calling function.\n     */\n    function event(eventName, callingFunction) {\n        if (typeof eventName !== 'string') {\n            self.showError(self.errCodes.DEVELOPER_ERR, callingFunction + \" called without a string as the first argument\");\n            throw \"developer error\";\n        }\n        if (!allowedEvents[eventName]) {\n            self.showError(self.errCodes.DEVELOPER_ERR, callingFunction + \" called with a bad event name = \" + eventName);\n            throw \"developer error\";\n        }\n    }\n\n    /**\n     * Adds an event listener for a particular type of event.\n     * Currently the only eventName supported is \"roomOccupant\".\n     * @param {String} eventName the type of the event\n     * @param {Function} eventListener the function that expects the event.\n     * The eventListener gets called with the eventName as it's first argument, and the event\n     * data as it's second argument.\n     * @returns {void}\n     */\n    this.addEventListener = function(eventName, eventListener) {\n        event(eventName, \"addEventListener\");\n        if (typeof eventListener !== 'function') {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"addEventListener called with a non-function for second argument\");\n            throw \"developer error\";\n        }\n        //\n        // remove the event listener if it's already present so we don't end up with two copies\n        //\n        self.removeEventListener(eventName, eventListener);\n        if (!eventListeners[eventName]) {\n            eventListeners[eventName] = [];\n        }\n        eventListeners[eventName][eventListeners[eventName].length] = eventListener;\n    };\n\n    /**\n     * Removes an event listener.\n     * @param {String} eventName\n     * @param {Function} eventListener\n     */\n    this.removeEventListener = function(eventName, eventListener) {\n        event(eventName, \"removeEventListener\");\n        var listeners = eventListeners[eventName];\n        var i = 0;\n        if (listeners) {\n            for (i = 0; i < listeners.length; i++) {\n                if (listeners[i] === eventListener) {\n                    if (i < listeners.length - 1) {\n                        listeners[i] = listeners[listeners.length - 1];\n                    }\n                    listeners.length = listeners.length - 1;\n                }\n            }\n        }\n    };\n\n    /**\n     * Emits an event, or in other words, calls all the eventListeners for a\n     * particular event.\n     * @param {String} eventName\n     * @param {Object} eventData\n     */\n    this.emitEvent = function(eventName, eventData) {\n        event(eventName, \"emitEvent\");\n        var listeners = eventListeners[eventName];\n        var i = 0;\n        if (listeners) {\n            for (i = 0; i < listeners.length; i++) {\n                listeners[i](eventName, eventData);\n            }\n        }\n    };\n\n    /**\n     * Error codes that the EasyRTC will use in the errorCode field of error object passed\n     * to error handler set by easyrtc.setOnError. The error codes are short printable strings.\n     * @type Object\n     */\n    this.errCodes = {\n        BAD_NAME: \"BAD_NAME\", // a user name wasn't of the desired form\n        CALL_ERR: \"CALL_ERR\", // something went wrong creating the peer connection\n        DEVELOPER_ERR: \"DEVELOPER_ERR\", // the developer using the EasyRTC library made a mistake\n        SYSTEM_ERR: \"SYSTEM_ERR\", // probably an error related to the network\n        CONNECT_ERR: \"CONNECT_ERR\", // error occurred when trying to create a connection\n        MEDIA_ERR: \"MEDIA_ERR\", // unable to get the local media\n        MEDIA_WARNING: \"MEDIA_WARNING\", // didn't get the desired resolution\n        INTERNAL_ERR: \"INTERNAL_ERR\",\n        PEER_GONE: \"PEER_GONE\", // peer doesn't exist\n        ALREADY_CONNECTED: \"ALREADY_CONNECTED\",\n        BAD_CREDENTIAL: \"BAD_CREDENTIAL\",\n        ICECANDIDATE_ERR: \"ICECANDIDATE_ERR\",\n        NOVIABLEICE: \"NOVIABLEICE\",\n        SIGNAL_ERR: \"SIGNAL_ERR\"\n    };\n\n    this.apiVersion = \"1.1.0\";\n\n    /** Most basic message acknowledgment object */\n    this.ackMessage = {msgType: \"ack\"};\n\n    /** Regular expression pattern for user ids. This will need modification to support non US character sets */\n    this.usernameRegExp = /^(.){1,64}$/;\n\n    /** Default cookieId name */\n    this.cookieId = \"easyrtcsid\";\n\n    /** @private */\n    var username = null;\n\n    /** Flag to indicate that user is currently logging out */\n    this.loggingOut = false;\n\n    /** @private */\n    this.disconnecting = false;\n\n    /** @private */\n    //\n    // A map of ids to local media streams.\n    //\n    var namedLocalMediaStreams = {};\n\n    /** @private */\n    var sessionFields = [];\n\n    /** @private */\n    var receivedMediaConstraints = {};\n\n    /**\n     * Control whether the client requests audio from a peer during a call.\n     * Must be called before the call to have an effect.\n     * @param value - true to receive audio, false otherwise. The default is true.\n     */\n    this.enableAudioReceive = function(value) {\n        if (\n            adapter && adapter.browserDetails &&\n             (adapter.browserDetails.browser === \"firefox\" || adapter.browserDetails.browser === \"edge\")\n        ) {\n            receivedMediaConstraints.offerToReceiveAudio = value;\n        }\n        else {\n            receivedMediaConstraints.mandatory = receivedMediaConstraints.mandatory || {};\n            receivedMediaConstraints.mandatory.OfferToReceiveAudio = value;\n        }\n    };\n\n    /**\n     * Control whether the client requests video from a peer during a call.\n     * Must be called before the call to have an effect.\n     * @param value - true to receive video, false otherwise. The default is true.\n     */\n    this.enableVideoReceive = function(value) {\n        if (\n            adapter && adapter.browserDetails &&\n             (adapter.browserDetails.browser === \"firefox\" || adapter.browserDetails.browser === \"edge\")\n        ) {\n           receivedMediaConstraints.offerToReceiveVideo = value;\n        }\n        else {\n            receivedMediaConstraints.mandatory = receivedMediaConstraints.mandatory || {};\n            receivedMediaConstraints.mandatory.OfferToReceiveVideo = value;\n        }\n    };\n\n    // True by default\n    // TODO should not be true by default only for legacy\n    this.enableAudioReceive(true);\n    this.enableVideoReceive(true);\n\n    function getSourceList(callback, sourceType) {\n        navigator.mediaDevices.enumerateDevices().then(\n             function(values) {\n                var results = [];\n                for (var i = 0; i < values.length; i++) {\n                    var source = values[i];\n                    if (source.kind === sourceType) {\n                        source.id = source.deviceId; //backwards compatibility\n                        results.push(source);\n                    }\n                }\n                callback(results);\n             }\n          ).catch(\n            function(reason) {\n               logDebug(\"Unable to enumerate devices (\" + reason + \")\");\n            }\n        );\n    }\n\n    /**\n     * Sets the audio output device of a Video object. \n     * That is to say, this controls what speakers get the sound.\n     * In theory, this works on Chrome but probably doesn't work anywhere else yet.\n     * This code was cribbed from https://webrtc.github.io/samples/src/content/devices/multi/.\n     *  @param {Object} element an HTML5 video element\n     *  @param {String} sinkId a deviceid from getAudioSinkList\n     */\n    this.setAudioOutput = function(element, sinkId) {\n       if (typeof element.sinkId !== 'undefined') {\n          element.setSinkId(sinkId)\n          .then(function() {\n            logDebug('Success, audio output device attached: ' + sinkId + ' to ' +\n                'element with ' + element.title + ' as source.');\n          })\n          .catch(function(error) {\n            var errorMessage = error;\n            if (error.name === 'SecurityError') {\n              errorMessage = 'You need to use HTTPS for selecting audio output ' +\n                  'device: ' + error;\n            }\n            logDebug(errorMessage);\n          });\n       } else {\n          logDebug('Browser does not support output device selection.');\n       }\n    };\n\n    /**\n     * Gets a list of the available audio sinks (ie, speakers)\n     * @param {Function} callback receives list of {deviceId:String, groupId:String, label:String, kind:\"audio\"}\n     * @example  easyrtc.getAudioSinkList( function(list) {\n     *               var i;\n     *               for( i = 0; i < list.length; i++ ) {\n     *                   console.log(\"label=\" + list[i].label + \", id= \" + list[i].deviceId);\n     *               }\n     *          });\n     */\n    this.getAudioSinkList = function(callback){\n       getSourceList(callback, \"audiooutput\");\n    };\n    /**\n     * Gets a list of the available audio sources (ie, microphones)\n     * @param {Function} callback receives list of {deviceId:String, groupId:String, label:String, kind:\"audio\"}\n     * @example  easyrtc.getAudioSourceList( function(list) {\n     *               var i;\n     *               for( i = 0; i < list.length; i++ ) {\n     *                   console.log(\"label=\" + list[i].label + \", id= \" + list[i].deviceId);\n     *               }\n     *          });\n     */\n    this.getAudioSourceList = function(callback){\n       getSourceList(callback, \"audioinput\");\n    };\n\n    /**\n     * Gets a list of the available video sources (ie, cameras)\n     * @param {Function} callback receives list of {deviceId:String, groupId:String, label:String, kind:\"video\"}\n     * @example  easyrtc.getVideoSourceList( function(list) {\n     *               var i;\n     *               for( i = 0; i < list.length; i++ ) {\n     *                   console.log(\"label=\" + list[i].label + \", id= \" + list[i].deviceId);\n     *               }\n     *          });\n     */\n    this.getVideoSourceList = function(callback) {\n       getSourceList(callback, \"videoinput\");\n    };\n\n\n    /** @private */\n    var dataChannelName = \"dc\";\n    /** @private */\n    var oldConfig = {};\n    /** @private */\n    var offersPending = {};\n    /** @private */\n    var credential = null;\n\n    /** @private */\n    self.audioEnabled = true;\n    /** @private */\n    self.videoEnabled = true;\n    /** @private */\n    this.debugPrinter = null;\n    /** Your easyrtcid */\n    this.myEasyrtcid = \"\";\n\n    /** The height of the local media stream video in pixels. This field is set an indeterminate period\n     * of time after easyrtc.initMediaSource succeeds. Note: in actuality, the dimensions of a video stream\n     * change dynamically in response to external factors, you should check the videoWidth and videoHeight attributes\n     * of your video objects before you use them for pixel specific operations.\n     */\n    this.nativeVideoHeight = 0;\n\n    /** This constant determines how long (in bytes) a message can be before being split in chunks of that size.\n    * This is because there is a limitation of the length of the message you can send on the\n    * data channel between browsers.\n    */\n    this.maxP2PMessageLength = 1000;\n\n    /** The width of the local media stream video in pixels. This field is set an indeterminate period\n     * of time after easyrtc.initMediaSource succeeds.  Note: in actuality, the dimensions of a video stream\n     * change dynamically in response to external factors, you should check the videoWidth and videoHeight attributes\n     * of your video objects before you use them for pixel specific operations.\n     */\n    this.nativeVideoWidth = 0;\n\n    /** The rooms the user is in. This only applies to room oriented applications and is set at the same\n     * time a token is received.\n     */\n    this.roomJoin = {};\n\n    /** Checks if the supplied string is a valid user name (standard identifier rules)\n     * @param {String} name\n     * @return {Boolean} true for a valid user name\n     * @example\n     *    var name = document.getElementById('nameField').value;\n     *    if( !easyrtc.isNameValid(name)){\n     *        console.error(\"Bad user name\");\n     *    }\n     */\n    this.isNameValid = function(name) {\n        return self.usernameRegExp.test(name);\n    };\n\n    /**\n     * This function sets the name of the cookie that client side library will look for\n     * and transmit back to the server as it's easyrtcsid in the first message.\n     * @param {String} cookieId\n     */\n    this.setCookieId = function(cookieId) {\n        self.cookieId = cookieId;\n    };\n\n    /** @private */\n    this._desiredVideoProperties = {}; // default camera\n\n    /**\n     * Specify particular video source. Call this before you call easyrtc.initMediaSource().\n     * @param {String} videoSrcId is a id value from one of the entries fetched by getVideoSourceList. null for default.\n     * @example easyrtc.setVideoSource( videoSrcId);\n     */\n    this.setVideoSource = function(videoSrcId) {\n        self._desiredVideoProperties.videoSrcId = videoSrcId;\n        delete self._desiredVideoProperties.screenCapture;\n    };\n\n    /** @private */\n    this._desiredAudioProperties = {}; // default camera\n\n    /**\n     * Specify particular video source. Call this before you call easyrtc.initMediaSource().\n     * @param {String} audioSrcId is a id value from one of the entries fetched by getAudioSourceList. null for default.\n     * @example easyrtc.setAudioSource( audioSrcId);\n     */\n    this.setAudioSource = function(audioSrcId) {\n        self._desiredAudioProperties.audioSrcId = audioSrcId;\n    };\n\n    /** This function is used to set the dimensions of the local camera, usually to get HD.\n     *  If called, it must be called before calling easyrtc.initMediaSource (explicitly or implicitly).\n     *  assuming it is supported. If you don't pass any parameters, it will use default camera dimensions.\n     * @param {Number} width in pixels\n     * @param {Number} height in pixels\n     * @param {number} frameRate is optional\n     * @example\n     *    easyrtc.setVideoDims(1280,720);\n     * @example\n     *    easyrtc.setVideoDims();\n     */\n    this.setVideoDims = function(width, height, frameRate) {\n        self._desiredVideoProperties.width = width;\n        self._desiredVideoProperties.height = height;\n        if (frameRate !== undefined) {\n            self._desiredVideoProperties.frameRate = frameRate;\n        }\n    };\n\n    /** This function requests that screen capturing be used to provide the local media source\n     * rather than a webcam. If you have multiple screens, they are composited side by side.\n     * Note: this functionality is not supported by Firefox, has to be called before calling initMediaSource (or easyApp), we don't currently supply a way to\n     * turn it off (once it's on), only works if the website is hosted SSL (https), and the image quality is rather\n     * poor going across a network because it tries to transmit so much data. In short, screen sharing\n     * through WebRTC isn't worth using at this point, but it is provided here so people can try it out.\n     * @example\n     *    easyrtc.setScreenCapture();\n     * @deprecated: use easyrtc.initScreenCapture (same parameters as easyrtc.initMediaSource.\n     */\n    this.setScreenCapture = function(enableScreenCapture) {\n        self._desiredVideoProperties.screenCapture = (enableScreenCapture !== false);\n    };\n\n    /**\n     * Builds the constraint object passed to getUserMedia.\n     * @returns {Object} mediaConstraints\n     */\n    self.getUserMediaConstraints = function() {\n        var constraints = {};\n        //\n        // _presetMediaConstraints allow you to provide your own constraints to be used\n        // with initMediaSource.\n        //\n        if (self._presetMediaConstraints) {\n            constraints = self._presetMediaConstraints;\n            delete self._presetMediaConstraints;\n            return constraints;\n        }\n        else if (self._desiredVideoProperties.screenCapture) {\n            return {\n                video: {\n                    mandatory: {\n                        chromeMediaSource: 'screen',\n                        maxWidth: screen.width,\n                        maxHeight: screen.height,\n                        minWidth: screen.width,\n                        minHeight: screen.height,\n                        minFrameRate: 1,\n                        maxFrameRate: 5},\n                    optional: []\n                },\n                audio: false\n            };\n        }\n        else if (!self.videoEnabled) {\n            constraints.video = false;\n        }\n        else {\n\n            // Tested Firefox 49 and MS Edge require minFrameRate and maxFrameRate \n            // instead max,min,ideal that cause GetUserMedia failure.\n            // Until confirmed both browser support idea,max and min we need this.\n            if (\n                adapter && adapter.browserDetails &&\n                    (adapter.browserDetails.browser === \"firefox\" || adapter.browserDetails.browser === \"edge\")\n            ) {\n                constraints.video = {};\n                if (self._desiredVideoProperties.width) {\n                    constraints.video.width = self._desiredVideoProperties.width;\n                }\n                if (self._desiredVideoProperties.height) {\n                    constraints.video.height = self._desiredVideoProperties.height;\n                }\n                if (self._desiredVideoProperties.frameRate) {\n                    constraints.video.frameRate = { \n                        minFrameRate: self._desiredVideoProperties.frameRate,\n                        maxFrameRate: self._desiredVideoProperties.frameRate\n                    };\n                }\n                if (self._desiredVideoProperties.videoSrcId) {\n                    constraints.video.deviceId = self._desiredVideoProperties.videoSrcId;\n                }\n\n            // chrome and opera\n            } else { \n                constraints.video = {};\n                if (self._desiredVideoProperties.width) {\n                     constraints.video.width = { \n                        max: self._desiredVideoProperties.width,\n                        min : self._desiredVideoProperties.width,\n                        ideal : self._desiredVideoProperties.width \n                     };\n                }\n                if (self._desiredVideoProperties.height) {\n                    constraints.video.height = {\n                        max: self._desiredVideoProperties.height,\n                        min: self._desiredVideoProperties.height,\n                        ideal: self._desiredVideoProperties.height\n                    };\n                }\n                if (self._desiredVideoProperties.frameRate) {\n                    constraints.video.frameRate = {\n                        max: self._desiredVideoProperties.frameRate,\n                        ideal: self._desiredVideoProperties.frameRate\n                    };\n                }\n                if (self._desiredVideoProperties.videoSrcId) {\n                    constraints.video.deviceId = self._desiredVideoProperties.videoSrcId;\n                }\n                // hack for opera\n                if (Object.keys(constraints.video).length === 0 ) {\n                    constraints.video = true;\n                }\n            }\n        }\n\n        if (!self.audioEnabled) {\n            constraints.audio = false;\n        }\n        else {\n            if (adapter && adapter.browserDetails && adapter.browserDetails.browser === \"firefox\") {\n                constraints.audio = {};\n                if (self._desiredAudioProperties.audioSrcId) {\n                    constraints.audio.deviceId = self._desiredAudioProperties.audioSrcId;\n                }\n            }\n            else { // chrome and opera\n                constraints.audio = {mandatory: {}, optional: []};\n                if (self._desiredAudioProperties.audioSrcId) {\n                    constraints.audio.optional = constraints.audio.optional || [];\n                    constraints.audio.optional.push({deviceId: self._desiredAudioProperties.audioSrcId});\n                }\n            }\n        }\n        return constraints;\n    };\n\n    /** Set the application name. Applications can only communicate with other applications\n     * that share the same API Key and application name. There is no predefined set of application\n     * names. Maximum length is\n     * @param {String} name\n     * @example\n     *    easyrtc.setApplicationName('simpleAudioVideo');\n     */\n    this.setApplicationName = function(name) {\n        self.applicationName = name;\n    };\n\n    /** Enable or disable logging to the console.\n     * Note: if you want to control the printing of debug messages, override the\n     *    easyrtc.debugPrinter variable with a function that takes a message string as it's argument.\n     *    This is exactly what easyrtc.enableDebug does when it's enable argument is true.\n     * @param {Boolean} enable - true to turn on debugging, false to turn off debugging. Default is false.\n     * @example\n     *    easyrtc.enableDebug(true);\n     */\n    this.enableDebug = function(enable) {\n        if (enable) {\n            self.debugPrinter = function(message, obj) {\n                var now = new Date().toISOString();\n                var stackString = new Error().stack;\n                var srcLine = \"location unknown\";\n                if (stackString) {\n                    var stackFrameStrings = stackString.split('\\n');\n                    srcLine = \"\";\n                    if (stackFrameStrings.length >= 5) {\n                        srcLine = stackFrameStrings[4];\n                    }\n                }\n\n                console.log(\"debug \" + now + \" : \" + message + \" [\" + srcLine + \"]\");\n\n                if (typeof obj !== 'undefined') {\n                    console.log(\"debug \" + now + \" : \", obj);\n                }\n            };\n        }\n        else {\n            self.debugPrinter = null;\n        }\n    };\n\n    /**\n     * Determines if the local browser supports WebRTC GetUserMedia (access to camera and microphone).\n     * @returns {Boolean} True getUserMedia is supported.\n     */\n    this.supportsGetUserMedia = function() {\n        return typeof navigator.getUserMedia !== 'undefined';\n    };\n\n    /**\n     * Determines if the local browser supports WebRTC Peer connections to the extent of being able to do video chats.\n     * @returns {Boolean} True if Peer connections are supported.\n     */\n    this.supportsPeerConnections = function() {\n        return typeof RTCPeerConnection !== 'undefined';\n    };\n\n    /** Determines whether the current browser supports the new data channels.\n     * EasyRTC will not open up connections with the old data channels.\n     * @returns {Boolean}\n     */\n    this.supportsDataChannels = function() {\n\n        var hasCreateDataChannel = false;\n\n        if (self.supportsPeerConnections()) {\n            try {\n                var peer = new RTCPeerConnection({iceServers: []}, {});\n                hasCreateDataChannel = typeof peer.createDataChannel !== 'undefined';\n                peer.close();\n            }\n            catch (err) {\n                // Ignore possible RTCPeerConnection.close error\n                // hasCreateDataChannel should reflect the feature state still.\n            }\n        }\n\n        return hasCreateDataChannel;\n    };\n\n    /** @private */\n    //\n    // Experimental function to determine if statistics gathering is supported.\n    //\n    this.supportsStatistics = function() {\n\n        var hasGetStats = false;\n\n        if (self.supportsPeerConnections()) {\n            try {\n                var peer = new RTCPeerConnection({iceServers: []}, {});\n                hasGetStats = typeof peer.getStats !== 'undefined';\n                peer.close();\n            }\n            catch (err) {\n                // Ingore possible RTCPeerConnection.close error\n                // hasCreateDataChannel should reflect the feature state still.\n            }\n        }\n\n        return hasGetStats;\n    };\n\n    /** @private\n     * @param {Array} pc_config ice configuration array\n     * @param {Object} optionalStuff peer constraints.\n     */\n    this.createRTCPeerConnection = function(pc_config, optionalStuff) {\n        if (self.supportsPeerConnections()) {\n            return new RTCPeerConnection(pc_config, optionalStuff);\n        }\n        else {\n            throw \"Your browser doesn't support webRTC (RTCPeerConnection)\";\n        }\n    };\n\n    //\n    // this should really be part of adapter.js\n    // Versions of chrome < 31 don't support reliable data channels transport.\n    // Firefox does.\n    //\n    this.getDatachannelConstraints = function() {\n        return {\n            reliable: adapter && adapter.browserDetails &&\n                adapter.browserDetails.browser !== \"chrome\" &&\n                    adapter.browserDetails.version < 31\n        };\n    };\n\n    /** @private */\n    haveAudioVideo = {\n        audio: false,\n        video: false\n    };\n    /** @private */\n    var dataEnabled = false;\n    /** @private */\n    var serverPath = null; // this was null, but that was generating an error.\n    /** @private */\n    var roomOccupantListener = null;\n    /** @private */\n    var onDataChannelOpen = null;\n    /** @private */\n    var onDataChannelClose = null;\n    /** @private */\n    var lastLoggedInList = {};\n    /** @private */\n    var receivePeer = {msgTypes: {}};\n    /** @private */\n    var receiveServerCB = null;\n    /** @private */\n    // dummy placeholder for when we aren't connected\n    var updateConfigurationInfo = function() { };\n    /** @private */\n    //\n    //\n    //  peerConns is a map from caller names to the below object structure\n    //     {  startedAV: boolean,  -- true if we have traded audio/video streams\n    //        dataChannelS: RTPDataChannel for outgoing messages if present\n    //        dataChannelR: RTPDataChannel for incoming messages if present\n    //        dataChannelReady: true if the data channel can be used for sending yet\n    //        connectTime: timestamp when the connection was started\n    //        sharingAudio: true if audio is being shared\n    //        sharingVideo: true if video is being shared\n    //        cancelled: temporarily true if a connection was cancelled by the peer asking to initiate it\n    //        candidatesToSend: SDP candidates temporarily queued\n    //        streamsAddedAcks: ack callbacks waiting for stream received messages\n    //        pc: RTCPeerConnection\n    //        mediaStream: mediaStream\n    //     function callSuccessCB(string) - see the easyrtc.call documentation.\n    //        function callFailureCB(errorCode, string) - see the easyrtc.call documentation.\n    //        function wasAcceptedCB(boolean,string) - see the easyrtc.call documentation.\n    //     }\n    //\n    var peerConns = {};\n    /** @private */\n    //\n    // a map keeping track of whom we've requested a call with so we don't try to\n    // call them a second time before they've responded.\n    //\n    var acceptancePending = {};\n\n    /** @private\n     * @param {string} caller\n     * @param {Function} helper\n     */\n    this.acceptCheck = function(caller, helper) {\n        helper(true);\n    };\n\n    /** @private\n     * @param {string} easyrtcid\n     * @param {HTMLMediaStream} stream\n     */\n    this.streamAcceptor = function(easyrtcid, stream) {\n    };\n\n    /** @private\n     * @param {string} easyrtcid\n     */\n    this.onStreamClosed = function(easyrtcid) {\n    };\n\n    /** @private\n     * @param {string} easyrtcid\n     */\n    this.callCancelled = function(easyrtcid) {\n    };\n\n    /**\n     * This function gets the raw RTCPeerConnection for a given easyrtcid\n     * @param {String} easyrtcid\n     * @param {RTCPeerConnection} for that easyrtcid, or null if no connection exists\n     * Submitted by Fabian Bernhard.\n     */\n    this.getPeerConnectionByUserId = function(userId) {\n        if (peerConns && peerConns[userId]) {\n            return peerConns[userId].pc;\n        }\n        return null;\n    };\n\n\n    var chromeStatsFilter = [\n        {\n            \"googTransmitBitrate\": \"transmitBitRate\",\n            \"googActualEncBitrate\": \"encodeRate\",\n            \"googAvailableSendBandwidth\": \"availableSendRate\"\n        },\n        {\n            \"googCodecName\": \"audioCodec\",\n            \"googTypingNoiseState\": \"typingNoise\",\n            \"packetsSent\": \"audioPacketsSent\",\n            \"bytesSent\": \"audioBytesSent\"\n        },\n        {\n            \"googCodecName\": \"videoCodec\",\n            \"googFrameRateSent\": \"outFrameRate\",\n            \"packetsSent\": \"videoPacketsSent\",\n            \"bytesSent\": \"videoBytesSent\"\n        },\n        {\n            \"packetsLost\": \"videoPacketsLost\",\n            \"packetsReceived\": \"videoPacketsReceived\",\n            \"bytesReceived\": \"videoBytesReceived\",\n            \"googFrameRateOutput\": \"frameRateOut\"\n        },\n        {\n            \"packetsLost\": \"audioPacketsLost\",\n            \"packetsReceived\": \"audioPacketsReceived\",\n            \"bytesReceived\": \"audioBytesReceived\",\n            \"audioOutputLevel\": \"audioOutputLevel\"\n        },\n        {\n            \"googRemoteAddress\": \"remoteAddress\",\n            \"googActiveConnection\": \"activeConnection\"\n        },\n        {\n            \"audioInputLevel\": \"audioInputLevel\"\n        }\n    ];\n\n    var firefoxStatsFilter = {\n        \"outboundrtp_audio.bytesSent\": \"audioBytesSent\",\n        \"outboundrtp_video.bytesSent\": \"videoBytesSent\",\n        \"inboundrtp_video.bytesReceived\": \"videoBytesReceived\",\n        \"inboundrtp_audio.bytesReceived\": \"audioBytesReceived\",\n        \"outboundrtp_audio.packetsSent\": \"audioPacketsSent\",\n        \"outboundrtp_video.packetsSent\": \"videoPacketsSent\",\n        \"inboundrtp_video.packetsReceived\": \"videoPacketsReceived\",\n        \"inboundrtp_audio.packetsReceived\": \"audioPacketsReceived\",\n        \"inboundrtp_video.packetsLost\": \"videoPacketsLost\",\n        \"inboundrtp_audio.packetsLost\": \"audioPacketsLost\",\n        \"firefoxRemoteAddress\": \"remoteAddress\"\n    };\n\n    var standardStatsFilter = adapter && adapter.browserDetails &&\n                adapter.browserDetails.browser === \"firefox\" ? firefoxStatsFilter : chromeStatsFilter;\n\n    function getFirefoxPeerStatistics(peerId, callback, filter) {\n\n\n        if (!peerConns[peerId]) {\n            callback(peerId, {\"connected\": false});\n        }\n        else if (peerConns[peerId].pc.getStats) {\n            peerConns[peerId].pc.getStats(null, function(stats) {\n                var items = {};\n                var candidates = {};\n                var activeId = null;\n                var srcKey;\n                //\n                // the stats objects has a group of entries. Each entry is either an rtcp, rtp entry\n                // or a candidate entry.\n                //\n                if (stats) {\n                    stats.forEach(function(entry) {\n                        var majorKey;\n                        var subKey;\n                        if (entry.type.match(/boundrtp/)) {\n                            if (entry.id.match(/audio/)) {\n                                majorKey = entry.type + \"_audio\";\n                            }\n                            else if (entry.id.match(/video/)) {\n                                majorKey = entry.type + \"_video\";\n                            }\n                            else {\n                                return;\n                            }\n                            for (subKey in entry) {\n                                if (entry.hasOwnProperty(subKey)) {\n                                    items[majorKey + \".\" + subKey] = entry[subKey];\n                                }\n                            }\n                        }\n                        else {\n                            if( entry.hasOwnProperty(\"ipAddress\") && entry.id) {\n                                candidates[entry.id] = entry.ipAddress + \":\" +\n                                      entry.portNumber;\n                            }\n                            else if( entry.hasOwnProperty(\"selected\") &&\n                                     entry.hasOwnProperty(\"remoteCandidateId\") &&\n                                     entry.selected ) {\n                                activeId =  entry.remoteCandidateId;\n                            }\n                        }\n                    });\n                }\n\n                if( activeId ) {\n                    items[\"firefoxRemoteAddress\"] = candidates[activeId];\n                }\n                if (!filter) {\n                    callback(peerId, items);\n                }\n                else {\n                    var filteredItems = {};\n                    for (srcKey in filter) {\n                        if (filter.hasOwnProperty(srcKey) && items.hasOwnProperty(srcKey)) {\n                            filteredItems[ filter[srcKey]] = items[srcKey];\n                        }\n                    }\n                    callback(peerId, filteredItems);\n                }\n            },\n                    function(error) {\n                        logDebug(\"unable to get statistics\");\n                    });\n        }\n        else {\n            callback(peerId, {\"statistics\": self.getConstantString(\"statsNotSupported\")});\n        }\n    }\n\n    function getChromePeerStatistics(peerId, callback, filter) {\n\n        if (!peerConns[peerId]) {\n            callback(peerId, {\"connected\": false});\n        }\n        else if (peerConns[peerId].pc.getStats) {\n\n            peerConns[peerId].pc.getStats(function(stats) {\n\n                var localStats = {};\n                var part, parts = stats.result();\n                var i, j;\n                var itemKeys;\n                var itemKey;\n                var names;\n                var userKey;\n                var partNames = [];\n                var partList;\n                var bestBytes = 0;\n                var bestI;\n                var turnAddress = null;\n                var hasActive, curReceived;\n                var localAddress, remoteAddress;\n                if (!filter) {\n                    for (i = 0; i < parts.length; i++) {\n                        names = parts[i].names();\n                        for (j = 0; j < names.length; j++) {\n                            itemKey = names[j];\n                            localStats[parts[i].id + \".\" + itemKey] = parts[i].stat(itemKey);\n                        }\n                    }\n                }\n                else {\n                    for (i = 0; i < parts.length; i++) {\n                        partNames[i] = {};\n                        //\n                        // convert the names into a dictionary\n                        //\n                        names = parts[i].names();\n                        for (j = 0; j < names.length; j++) {\n                            partNames[i][names[j]] = true;\n                        }\n\n                        //\n                        // a chrome-firefox connection results in several activeConnections.\n                        // we only want one, so we look for the one with the most data being received on it.\n                        //\n                        if (partNames[i].googRemoteAddress && partNames[i].googActiveConnection) {\n                            hasActive = parts[i].stat(\"googActiveConnection\");\n                            if (hasActive === true || hasActive === \"true\") {\n                                curReceived = parseInt(parts[i].stat(\"bytesReceived\")) +\n                                        parseInt(parts[i].stat(\"bytesSent\"));\n                                if (curReceived > bestBytes) {\n                                    bestI = i;\n                                    bestBytes = curReceived;\n                                }\n                            }\n                        }\n                    }\n\n                    for (i = 0; i < parts.length; i++) {\n                        //\n                        // discard info from any inactive connection.\n                        //\n                        if (partNames[i].googActiveConnection) {\n                            if (i !== bestI) {\n                                partNames[i] = {};\n                            }\n                            else {\n                                localAddress = parts[i].stat(\"googLocalAddress\").split(\":\")[0];\n                                remoteAddress = parts[i].stat(\"googRemoteAddress\").split(\":\")[0];\n                                if (self.isTurnServer(localAddress)) {\n                                    turnAddress = localAddress;\n                                }\n                                else if (self.isTurnServer(remoteAddress)) {\n                                    turnAddress = remoteAddress;\n                                }\n                            }\n                        }\n                    }\n\n                    for (i = 0; i < filter.length; i++) {\n                        itemKeys = filter[i];\n                        partList = [];\n                        part = null;\n                        for (j = 0; j < parts.length; j++) {\n                            var fullMatch = true;\n                            for (itemKey in itemKeys) {\n                                if (itemKeys.hasOwnProperty(itemKey) && !partNames[j][itemKey]) {\n                                    fullMatch = false;\n                                    break;\n                                }\n                            }\n                            if (fullMatch && parts[j]) {\n                                partList.push(parts[j]);\n                            }\n                        }\n                        if (partList.length === 1) {\n                            for (j = 0; j < partList.length; j++) {\n                                part = partList[j];\n                                if (part) {\n                                    for (itemKey in itemKeys) {\n                                        if (itemKeys.hasOwnProperty(itemKey)) {\n                                            userKey = itemKeys[itemKey];\n                                            localStats[userKey] = part.stat(itemKey);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else if (partList.length > 1) {\n                            for (itemKey in itemKeys) {\n                                if (itemKeys.hasOwnProperty(itemKey)) {\n                                    localStats[itemKeys[itemKey]] = [];\n                                }\n                            }\n                            for (j = 0; j < partList.length; j++) {\n                                part = partList[j];\n                                    for (itemKey in itemKeys) {\n                                        if (itemKeys.hasOwnProperty(itemKey)) {\n                                            userKey = itemKeys[itemKey];\n                                            localStats[userKey].push(part.stat(itemKey));\n                                        }\n                                    }\n                            }\n                        }\n                    }\n                }\n\n                if (localStats.remoteAddress && turnAddress) {\n                    localStats.remoteAddress = turnAddress;\n                }\n                callback(peerId, localStats);\n            });\n        }\n        else {\n            callback(peerId, {\"statistics\": self.getConstantString(\"statsNotSupported\")});\n        }\n    }\n\n    /**\n     * This function gets the statistics for a particular peer connection.\n     * @param {String} easyrtcid\n     * @param {Function} callback gets the easyrtcid for the peer and a map of {userDefinedKey: value}. If there is no peer connection to easyrtcid, then the map will\n     *  have a value of {connected:false}.\n     * @param {Object} filter depends on whether Chrome or Firefox is used. See the default filters for guidance.\n     * It is still experimental.\n     */\n    this.getPeerStatistics = function(easyrtcid, callback, filter) {\n        if (\n            adapter && adapter.browserDetails &&\n                adapter.browserDetails.browser === \"firefox\"\n        ) {\n            getFirefoxPeerStatistics(easyrtcid, callback, filter);\n        }\n        else {\n            getChromePeerStatistics(easyrtcid, callback, filter);\n        }\n    };\n\n    /**\n     * @private\n     * @param roomName\n     * @param fields\n     */\n    function sendRoomApiFields(roomName, fields) {\n        var fieldAsString = JSON.stringify(fields);\n        JSON.parse(fieldAsString);\n        var dataToShip = {\n            msgType: \"setRoomApiField\",\n            msgData: {\n                setRoomApiField: {\n                    roomName: roomName,\n                    field: fields\n                }\n            }\n        };\n        self.webSocket.json.emit(\"easyrtcCmd\", dataToShip,\n                function(ackMsg) {\n                    if (ackMsg.msgType === \"error\") {\n                        self.showError(ackMsg.msgData.errorCode, ackMsg.msgData.errorText);\n                    }\n                }\n        );\n    }\n\n    /** @private */\n    var roomApiFieldTimer = null;\n\n    /**\n     * @private\n     * @param {String} roomName\n     */\n    function enqueueSendRoomApi(roomName) {\n        //\n        // Rather than issue the send request immediately, we set a timer so we can accumulate other\n        // calls\n        //\n        if (roomApiFieldTimer) {\n            clearTimeout(roomApiFieldTimer);\n        }\n        roomApiFieldTimer = setTimeout(function() {\n            sendRoomApiFields(roomName, self._roomApiFields[roomName]);\n            roomApiFieldTimer = null;\n        }, 10);\n    }\n\n    /** Provide a set of application defined fields that will be part of this instances\n     * configuration information. This data will get sent to other peers via the websocket\n     * path.\n     * @param {String} roomName - the room the field is attached to.\n     * @param {String} fieldName - the name of the field.\n     * @param {Object} fieldValue - the value of the field.\n     * @example\n     *   easyrtc.setRoomApiField(\"trekkieRoom\",  \"favorite_alien\", \"Mr Spock\");\n     *   easyrtc.setRoomOccupantListener( function(roomName, list){\n     *      for( var i in list ){\n     *         console.log(\"easyrtcid=\" + i + \" favorite alien is \" + list[i].apiFields.favorite_alien);\n     *      }\n     *   });\n     */\n    this.setRoomApiField = function(roomName, fieldName, fieldValue) {\n        //\n        // if we're not connected yet, we'll just cache the fields until we are.\n        //\n        if (!self._roomApiFields) {\n            self._roomApiFields = {};\n        }\n        if (!fieldName && !fieldValue) {\n            delete self._roomApiFields[roomName];\n            return;\n        }\n\n        if (!self._roomApiFields[roomName]) {\n            self._roomApiFields[roomName] = {};\n        }\n        if (fieldValue !== undefined && fieldValue !== null) {\n            if (typeof fieldValue === \"object\") {\n                try {\n                    JSON.stringify(fieldValue);\n                }\n                catch (jsonError) {\n                    self.showError(self.errCodes.DEVELOPER_ERR, \"easyrtc.setRoomApiField passed bad object \");\n                    return;\n                }\n            }\n            self._roomApiFields[roomName][fieldName] = {fieldName: fieldName, fieldValue: fieldValue};\n        }\n        else {\n            delete self._roomApiFields[roomName][fieldName];\n        }\n        if (self.webSocketConnected) {\n            enqueueSendRoomApi(roomName);\n        }\n    };\n\n    /**\n     * Default error reporting function. The default implementation displays error messages\n     * in a programmatically created div with the id easyrtcErrorDialog. The div has title\n     * component with a class name of easyrtcErrorDialog_title. The error messages get added to a\n     * container with the id easyrtcErrorDialog_body. Each error message is a text node inside a div\n     * with a class of easyrtcErrorDialog_element. There is an \"okay\" button with the className of easyrtcErrorDialog_okayButton.\n     * @param {String} messageCode An error message code\n     * @param {String} message the error message text without any markup.\n     * @example\n     *     easyrtc.showError(\"BAD_NAME\", \"Invalid username\");\n     */\n    this.showError = function(messageCode, message) {\n        self.onError({errorCode: messageCode, errorText: message});\n    };\n\n    /**\n     * @private\n     * @param errorObject\n     */\n    this.onError = function(errorObject) {\n        logDebug(\"saw error \" + errorObject.errorText);\n\n        var errorDiv = document.getElementById('easyrtcErrorDialog');\n        var errorBody;\n        if (!errorDiv) {\n            errorDiv = document.createElement(\"div\");\n            errorDiv.id = 'easyrtcErrorDialog';\n            var title = document.createElement(\"div\");\n            title.innerHTML = \"Error messages\";\n            title.className = \"easyrtcErrorDialog_title\";\n            errorDiv.appendChild(title);\n            errorBody = document.createElement(\"div\");\n            errorBody.id = \"easyrtcErrorDialog_body\";\n            errorDiv.appendChild(errorBody);\n            var clearButton = document.createElement(\"button\");\n            clearButton.appendChild(document.createTextNode(\"Okay\"));\n            clearButton.className = \"easyrtcErrorDialog_okayButton\";\n            clearButton.onclick = function() {\n                errorBody.innerHTML = \"\"; // remove all inner nodes\n                errorDiv.style.display = \"none\";\n            };\n            errorDiv.appendChild(clearButton);\n            document.body.appendChild(errorDiv);\n        }\n\n        errorBody = document.getElementById(\"easyrtcErrorDialog_body\");\n        var messageNode = document.createElement(\"div\");\n        messageNode.className = 'easyrtcErrorDialog_element';\n        messageNode.appendChild(document.createTextNode(errorObject.errorText));\n        errorBody.appendChild(messageNode);\n        errorDiv.style.display = \"block\";\n    };\n\n    /** @private\n     * @param mediaStream */\n    //\n    // easyrtc.createObjectURL builds a URL from a media stream.\n    // Arguments:\n    //     mediaStream - a media stream object.\n    // The video object in Chrome expects a URL.\n    //\n    this.createObjectURL = function(mediaStream) {\n        var errMessage;\n        if (window.URL && window.URL.createObjectURL) {\n            return window.URL.createObjectURL(mediaStream);\n        }\n        else if (window.webkitURL && window.webkitURL.createObjectURL) {\n            return window.webkit.createObjectURL(mediaStream);\n        }\n        else {\n            errMessage = \"Your browsers does not support URL.createObjectURL.\";\n            logDebug(\"saw exception \" + errMessage);\n            throw errMessage;\n        }\n    };\n\n    /**\n     * A convenience function to ensure that a string doesn't have symbols that will be interpreted by HTML.\n     * @param {String} idString\n     * @return {String} The cleaned string.\n     * @example\n     *   console.log( easyrtc.cleanId('&hello'));\n     */\n    this.cleanId = function(idString) {\n        var MAP = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;'\n        };\n        return idString.replace(/[&<>]/g, function(c) {\n            return MAP[c];\n        });\n    };\n\n    /**\n     * Set a callback that will be invoked when the application enters or leaves a room.\n     * @param {Function} handler - the first parameter is true for entering a room, false for leaving a room. The second parameter is the room name.\n     * @example\n     *   easyrtc.setRoomEntryListener(function(entry, roomName){\n     *       if( entry ){\n     *           console.log(\"entering room \" + roomName);\n     *       }\n     *       else{\n     *           console.log(\"leaving room \" + roomName);\n     *       }\n     *   });\n     */\n    self.setRoomEntryListener = function(handler) {\n        self.roomEntryListener = handler;\n    };\n\n    /**\n     * Set the callback that will be invoked when the list of people logged in changes.\n     * The callback expects to receive a room name argument, and\n     * a map whose ideas are easyrtcids and whose values are in turn maps\n     * supplying user specific information. The inner maps have the following keys:\n     * username, applicationName, browserFamily, browserMajor, osFamily, osMajor, deviceFamily.\n     * The third argument is the listener is the innerMap for the connections own data (not needed by most applications).\n     * @param {Function} listener\n     * @example\n     *   easyrtc.setRoomOccupantListener( function(roomName, list, selfInfo){\n     *      for( var i in list ){\n     *         (\"easyrtcid=\" + i + \" belongs to user \" + list[i].username);\n     *      }\n     *   });\n     */\n    self.setRoomOccupantListener = function(listener) {\n        roomOccupantListener = listener;\n    };\n\n    /**\n     * Sets a callback that is called when a data channel is open and ready to send data.\n     * The callback will be called with an easyrtcid as it's sole argument.\n     * @param {Function} listener\n     * @example\n     *    easyrtc.setDataChannelOpenListener( function(easyrtcid){\n     *         easyrtc.sendDataP2P(easyrtcid, \"greeting\", \"hello\");\n     *    });\n     */\n    this.setDataChannelOpenListener = function(listener) {\n        onDataChannelOpen = listener;\n    };\n\n    /** Sets a callback that is called when a previously open data channel closes.\n     * The callback will be called with an easyrtcid as it's sole argument.\n     * @param {Function} listener\n     * @example\n     *    easyrtc.setDataChannelCloseListener( function(easyrtcid){\n     *            (\"No longer connected to \" + easyrtc.idToName(easyrtcid));\n     *    });\n     */\n    this.setDataChannelCloseListener = function(listener) {\n        onDataChannelClose = listener;\n    };\n\n    /** Returns the number of live peer connections the client has.\n     * @return {Number}\n     * @example\n     *    (\"You have \" + easyrtc.getConnectionCount() + \" peer connections\");\n     */\n    this.getConnectionCount = function() {\n        var count = 0;\n        var i;\n        for (i in peerConns) {\n            if (peerConns.hasOwnProperty(i)) {\n                if (self.getConnectStatus(i) === self.IS_CONNECTED) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    };\n\n    /** Sets the maximum length in bytes of P2P messages that can be sent.\n     * @param {Number} maxLength maximum length to set\n     * @example\n     *     easyrtc.setMaxP2PMessageLength(10000);\n     */\n    this.setMaxP2PMessageLength = function(maxLength) {\n        this.maxP2PMessageLength = maxLength;\n    };\n\n    /** Sets whether audio is transmitted by the local user in any subsequent calls.\n     * @param {Boolean} enabled true to include audio, false to exclude audio. The default is true.\n     * @example\n     *      easyrtc.enableAudio(false);\n     */\n    this.enableAudio = function(enabled) {\n        self.audioEnabled = enabled;\n    };\n\n    /**\n     *Sets whether video is transmitted by the local user in any subsequent calls.\n     * @param {Boolean} enabled - true to include video, false to exclude video. The default is true.\n     * @example\n     *      easyrtc.enableVideo(false);\n     */\n    this.enableVideo = function(enabled) {\n        self.videoEnabled = enabled;\n    };\n\n    /**\n     * Sets whether WebRTC data channels are used to send inter-client messages.\n     * This is only the messages that applications explicitly send to other applications, not the WebRTC signaling messages.\n     * @param {Boolean} enabled  true to use data channels, false otherwise. The default is false.\n     * @example\n     *     easyrtc.enableDataChannels(true);\n     */\n    this.enableDataChannels = function(enabled) {\n        dataEnabled = enabled;\n    };\n\n    /**\n     * @private\n     * @param {Boolean} enable\n     * @param {Array} tracks - an array of MediaStreamTrack\n     */\n    function enableMediaTracks(enable, tracks) {\n        var i;\n        if (tracks) {\n            for (i = 0; i < tracks.length; i++) {\n                var track = tracks[i];\n                track.enabled = enable;\n            }\n        }\n    }\n\n    /** @private */\n    //\n    // fetches a stream by name. Treat a null/undefined streamName as \"default\".\n    //\n    function getLocalMediaStreamByName(streamName) {\n        if (!streamName) {\n            streamName = \"default\";\n        }\n        if (namedLocalMediaStreams.hasOwnProperty(streamName)) {\n            return namedLocalMediaStreams[streamName];\n        }\n        else {\n            return null;\n        }\n    }\n\n    /**\n     * Returns the user assigned id's of currently active local media streams.\n     * @return {Array}\n     */\n    this.getLocalMediaIds = function() {\n        return Object.keys(namedLocalMediaStreams);\n    };\n\n    /** @private */\n    function buildMediaIds() {\n        var mediaMap = {};\n        var streamName;\n        for (streamName in namedLocalMediaStreams) {\n            if (namedLocalMediaStreams.hasOwnProperty(streamName)) {\n                mediaMap[streamName] = namedLocalMediaStreams[streamName].id || \"default\";\n            }\n        }\n        return mediaMap;\n    }\n\n    /** @private */\n    function registerLocalMediaStreamByName(stream, streamName) {\n        var roomName;\n        if (!streamName) {\n            streamName = \"default\";\n        }\n        stream.streamName = streamName;\n        namedLocalMediaStreams[streamName] = stream;\n        if (streamName !== \"default\") {\n            var mediaIds = buildMediaIds(),\n                roomData = self.roomData;\n            for (roomName in roomData) {\n                if (roomData.hasOwnProperty(roomName)) {\n                    self.setRoomApiField(roomName, \"mediaIds\", mediaIds);\n                }\n            }\n        }\n    }\n\n    /**\n     * Allow an externally created mediastream (ie, created by another\n     * library) to be used within easyrtc. Tracking when it closes\n     * must be done by the supplying party.\n     */\n    this.register3rdPartyLocalMediaStream = function(stream, streamName) {\n       return registerLocalMediaStreamByName(stream, streamName);\n    };\n\n    /** @private */\n    //\n    // look up a stream's name from the stream.id\n    //\n    function getNameOfRemoteStream(easyrtcId, webrtcStreamId) {\n        var roomName;\n        var mediaIds;\n        var streamName;\n        if (!webrtcStreamId) {\n            webrtcStreamId = \"default\";\n        }\n        if (peerConns[easyrtcId]) {\n            streamName = peerConns[easyrtcId].remoteStreamIdToName[webrtcStreamId];\n            if (streamName) {\n                return streamName;\n            }\n        }\n\n        for (roomName in self.roomData) {\n            if (self.roomData.hasOwnProperty(roomName)) {\n                mediaIds = self.getRoomApiField(roomName, easyrtcId, \"mediaIds\");\n                if (!mediaIds) {\n                    continue;\n                }\n                for (streamName in mediaIds) {\n                    if (mediaIds.hasOwnProperty(streamName) &&\n                            mediaIds[streamName] === webrtcStreamId) {\n                        return streamName;\n                    }\n                }\n                //\n                // a stream from chrome to firefox will be missing it's id/label.\n                // there is no correct solution.\n                //\n                if (\n                    adapter && adapter.browserDetails &&\n                        adapter.browserDetails.browser === \"firefox\"\n                ) {\n\n                   // if there is a stream called default, return it in preference\n                   if (mediaIds[\"default\"]) {\n                       return \"default\";\n                   }\n\n                   //\n                   // otherwise return the first name we find. If there is more than\n                   // one, complain to Mozilla.\n                   //\n                   for(var anyName in mediaIds) {\n                        if (mediaIds.hasOwnProperty(anyName)) {\n                            return anyName;\n                        }\n                   }\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    this.getNameOfRemoteStream = function(easyrtcId, webrtcStream){\n        if(typeof webrtcStream === \"string\") {\n            return getNameOfRemoteStream(easyrtcId, webrtcStream);\n        }\n        else if( webrtcStream.id) {\n            return getNameOfRemoteStream(easyrtcId, webrtcStream.id);\n        }\n    };\n\n    /** @private */\n    function closeLocalMediaStreamByName(streamName) {\n        if (!streamName) {\n            streamName = \"default\";\n        }\n        var stream = self.getLocalStream(streamName);\n        if (!stream) {\n            return;\n        }\n        var streamId = stream.id || \"default\";\n        var id;\n        var roomName;\n        if (namedLocalMediaStreams[streamName]) {\n\n            for (id in peerConns) {\n                if (peerConns.hasOwnProperty(id)) {\n                    try {\n                        peerConns[id].pc.removeStream(stream);\n                    } catch (err) {\n                    }\n                    self.sendPeerMessage(id, \"__closingMediaStream\", {streamId: streamId, streamName: streamName});\n                }\n            }\n\n            stopStream(namedLocalMediaStreams[streamName]);\n            delete namedLocalMediaStreams[streamName];\n\n            if (streamName !== \"default\") {\n                var mediaIds = buildMediaIds();\n                for (roomName in self.roomData) {\n                    if (self.roomData.hasOwnProperty(roomName)) {\n                        self.setRoomApiField(roomName, \"mediaIds\", mediaIds);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Close the local media stream. You usually need to close the existing media stream\n     * of a camera before reacquiring it at a different resolution.\n     * @param {String} streamName - an option stream name.\n     */\n    this.closeLocalMediaStream = function(streamName) {\n        return closeLocalMediaStreamByName(streamName);\n    };\n\n    /**\n     * Alias for closeLocalMediaStream\n     */\n    this.closeLocalStream = this.closeLocalMediaStream;\n\n    /**\n     * This function is used to enable and disable the local camera. If you disable the\n     * camera, video objects display it will \"freeze\" until the camera is re-enabled. *\n     * By default, a camera is enabled.\n     * @param {Boolean} enable - true to enable the camera, false to disable it.\n     * @param {String} streamName - the name of the stream, optional.\n     */\n    this.enableCamera = function(enable, streamName) {\n        var stream = getLocalMediaStreamByName(streamName);\n        if (stream && stream.getVideoTracks) {\n            enableMediaTracks(enable, stream.getVideoTracks());\n        }\n    };\n\n    /**\n     * This function is used to enable and disable the local microphone. If you disable\n     * the microphone, sounds stops being transmitted to your peers. By default, the microphone\n     * is enabled.\n     * @param {Boolean} enable - true to enable the microphone, false to disable it.\n     * @param {String} streamName - an optional streamName\n     */\n    this.enableMicrophone = function(enable, streamName) {\n        var stream = getLocalMediaStreamByName(streamName);\n        if (stream && stream.getAudioTracks) {\n            enableMediaTracks(enable, stream.getAudioTracks());\n        }\n    };\n\n    /**\n     * Mute a video object.\n     * @param {String} videoObjectName - A DOMObject or the id of the DOMObject.\n     * @param {Boolean} mute - true to mute the video object, false to unmute it.\n     */\n    this.muteVideoObject = function(videoObjectName, mute) {\n        var videoObject;\n        if (typeof (videoObjectName) === 'string') {\n            videoObject = document.getElementById(videoObjectName);\n            if (!videoObject) {\n                throw \"Unknown video object \" + videoObjectName;\n            }\n        }\n        else if (!videoObjectName) {\n            throw \"muteVideoObject passed a null\";\n        }\n        else {\n            videoObject = videoObjectName;\n        }\n        videoObject.muted = !!mute;\n    };\n\n    /**\n     * Returns a URL for your local camera and microphone.\n     *  It can be called only after easyrtc.initMediaSource has succeeded.\n     *  It returns a url that can be used as a source by the Chrome video element or the &lt;canvas&gt; element.\n     *  @param {String} streamName - an option stream name.\n     *  @return {URL}\n     *  @example\n     *      document.getElementById(\"myVideo\").src = easyrtc.getLocalStreamAsUrl();\n     */\n    self.getLocalStreamAsUrl = function(streamName) {\n        var stream = getLocalMediaStreamByName(streamName);\n        if (stream === null) {\n            throw \"Developer error: attempt to get a MediaStream without invoking easyrtc.initMediaSource successfully\";\n        }\n        return self.createObjectURL(stream);\n    };\n\n    /**\n     * Returns a media stream for your local camera and microphone.\n     *  It can be called only after easyrtc.initMediaSource has succeeded.\n     *  It returns a stream that can be used as an argument to easyrtc.setVideoObjectSrc.\n     *  Returns null if there is no local media stream acquired yet.\n     * @return {?MediaStream}\n     * @example\n     *    easyrtc.setVideoObjectSrc( document.getElementById(\"myVideo\"), easyrtc.getLocalStream());\n     */\n    this.getLocalStream = function(streamName) {\n        return getLocalMediaStreamByName(streamName) || null;\n    };\n\n    /** Clears the media stream on a video object.\n     *\n     * @param {Object} element the video object.\n     * @example\n     *    easyrtc.clearMediaStream( document.getElementById('selfVideo'));\n     *\n     */\n    this.clearMediaStream = function(element) {\n        if (typeof element.src !== 'undefined') {\n            //noinspection JSUndefinedPropertyAssignment\n            element.src = \"\";\n        } else if (typeof element.srcObject !== 'undefined') {\n            element.srcObject = \"\";\n        } else if (typeof element.mozSrcObject !== 'undefined') {\n            element.mozSrcObject = null;\n        }\n    };\n\n    /**\n     *  Sets a video or audio object from a media stream.\n     *  Chrome uses the src attribute and expects a URL, while firefox\n     *  uses the mozSrcObject and expects a stream. This procedure hides\n     *  that from you.\n     *  If the media stream is from a local webcam, you may want to add the\n     *  easyrtcMirror class to the video object so it looks like a proper mirror.\n     *  The easyrtcMirror class is defined in this.css.\n     *  Which is could be added using the same path of easyrtc.js file to an HTML file\n     *  @param {Object} element an HTML5 video element\n     *  @param {MediaStream|String} stream a media stream as returned by easyrtc.getLocalStream or your stream acceptor.\n     * @example\n     *    easyrtc.setVideoObjectSrc( document.getElementById(\"myVideo\"), easyrtc.getLocalStream());\n     *\n     */\n    this.setVideoObjectSrc = function(element, stream) {\n        if (stream && stream !== \"\") {\n            element.autoplay = true;\n\n            if (typeof element.src !== 'undefined') {\n                element.src = self.createObjectURL(stream);\n            } else if (typeof element.srcObject !== 'undefined') {\n                element.srcObject = stream;\n            } else if (typeof element.mozSrcObject !== 'undefined') {\n                element.mozSrcObject = self.createObjectURL(stream);\n            }\n            element.play();\n        }\n        else {\n            self.clearMediaStream(element);\n        }\n    };\n\n    /**\n     * This function builds a new named local media stream from a set of existing audio and video tracks from other media streams.\n     * @param {String} streamName is the name of the new media stream.\n     * @param {Array} audioTracks is an array of MediaStreamTracks\n     * @param {Array} videoTracks is an array of MediaStreamTracks\n     * @returns {?MediaStream} the track created.\n     * @example\n     *    easyrtc.buildLocalMediaStream(\"myComposedStream\",\n     *             easyrtc.getLocalStream(\"camera1\").getVideoTracks(),\n     *             easyrtc.getLocalStream(\"camera2\").getAudioTracks());\n     */\n    this.buildLocalMediaStream = function(streamName, audioTracks, videoTracks) {\n        var i;\n        if (typeof streamName !== 'string') {\n            self.showError(self.errCodes.DEVELOPER_ERR,\n               \"easyrtc.buildLocalMediaStream not supplied a stream name\");\n            return null;\n        }\n\n         var streamToClone = null;\n         for(var key in namedLocalMediaStreams ) {\n            if( namedLocalMediaStreams.hasOwnProperty(key)) {\n              streamToClone = namedLocalMediaStreams[key];\n              if(streamToClone) {\n                break;\n              }\n            }\n         }\n         if( !streamToClone ) {\n            for(key in peerConns) {\n                if (peerConns.hasOwnProperty(key)) {\n                    var remoteStreams = peerConns[key].pc.getRemoteStreams();\n                    if( remoteStreams && remoteStreams.length > 0 ) {\n                        streamToClone = remoteStreams[0];\n                    }\n                }\n            }\n         }\n         if( !streamToClone ){\n            self.showError(self.errCodes.DEVELOPER_ERR,\n             \"Attempt to create a mediastream without one to clone from\");\n            return null;\n         }\n\n         //\n         // clone whatever mediastream we found, and remove any of it's\n         // tracks.\n         //\n         var mediaClone = streamToClone.clone();\n         var oldTracks = mediaClone.getTracks();\n\n        if (audioTracks) {\n            for (i = 0; i < audioTracks.length; i++) {\n                mediaClone.addTrack(audioTracks[i].clone());\n            }\n        }\n\n        if (videoTracks) {\n            for (i = 0; i < videoTracks.length; i++) {\n                mediaClone.addTrack(videoTracks[i].clone());\n            }\n        }\n\n        for( i = 0; i < oldTracks.length; i++ ) {\n            mediaClone.removeTrack(oldTracks[i]);\n        }\n\n        registerLocalMediaStreamByName(mediaClone, streamName);\n        return mediaClone;\n    };\n\n    /* @private*/\n    /** Load Easyrtc Stylesheet.\n     *   Easyrtc Stylesheet define easyrtcMirror class and some basic css class for using easyrtc.js.\n     *   That way, developers can override it or use it's own css file minified css or package.\n     * @example\n     *       easyrtc.loadStylesheet();\n     *\n     */\n    this.loadStylesheet = function() {\n\n        //\n        // check to see if we already have an easyrtc.css file loaded\n        // if we do, we can exit immediately.\n        //\n        var links = document.getElementsByTagName(\"link\");\n        var cssIndex, css;\n        for (cssIndex in links) {\n            if (links.hasOwnProperty(cssIndex)) {\n                css = links[cssIndex];\n                if (css.href && (css.href.match(/\\/easyrtc.css/))) {\n                    return;\n                }\n            }\n        }\n        //\n        // add the easyrtc.css file since it isn't present\n        //\n        var easySheet = document.createElement(\"link\");\n        easySheet.setAttribute(\"rel\", \"stylesheet\");\n        easySheet.setAttribute(\"type\", \"text/css\");\n        easySheet.setAttribute(\"href\", \"/easyrtc/easyrtc.css\");\n        var headSection = document.getElementsByTagName(\"head\")[0];\n        var firstHead = headSection.childNodes[0];\n        headSection.insertBefore(easySheet, firstHead);\n    };\n\n    /**\n     * @private\n     * @param {String} x\n     */\n    this.formatError = function(x) {\n        var name, result;\n        if (x === null || typeof x === 'undefined') {\n            return \"null\";\n        }\n        if (typeof x === 'string') {\n            return x;\n        }\n        else if (x.type && x.description) {\n            return x.type + \" : \" + x.description;\n        }\n        else if (typeof x === 'object') {\n            try {\n                return JSON.stringify(x);\n            }\n            catch (oops) {\n                result = \"{\";\n                for (name in x) {\n                    if (x.hasOwnProperty(name)) {\n                        if (typeof x[name] === 'string') {\n                            result = result + name + \"='\" + x[name] + \"' \";\n                        }\n                    }\n                }\n                result = result + \"}\";\n                return result;\n            }\n        }\n        else {\n            return \"Strange case\";\n        }\n    };\n\n    /**\n     * Initializes your access to a local camera and microphone.\n     * Failure could be caused a browser that didn't support WebRTC, or by the user not granting permission.\n     * If you are going to call easyrtc.enableAudio or easyrtc.enableVideo, you need to do it before\n     * calling easyrtc.initMediaSource.\n     * @param {function(Object)} successCallback - will be called with localmedia stream on success.\n     * @param {function(String,String)} errorCallback - is called with an error code and error description.\n     * @param {String} streamName - an optional name for the media source so you can use multiple cameras and\n     * screen share simultaneously.\n     * @example\n     *       easyrtc.initMediaSource(\n     *          function(mediastream){\n     *              easyrtc.setVideoObjectSrc( document.getElementById(\"mirrorVideo\"), mediastream);\n     *          },\n     *          function(errorCode, errorText){\n     *               easyrtc.showError(errorCode, errorText);\n     *          });\n     */\n    this.initMediaSource = function(successCallback, errorCallback, streamName) {\n\n        logDebug(\"about to request local media\");\n\n        if (!streamName) {\n            streamName = \"default\";\n        }\n\n        haveAudioVideo = {\n            audio: self.audioEnabled,\n            video: self.videoEnabled\n        };\n\n        if (!errorCallback) {\n            errorCallback = function(errorCode, errorText) {\n                var message = \"easyrtc.initMediaSource: \" + self.formatError(errorText);\n                logDebug(message);\n                self.showError(self.errCodes.MEDIA_ERR, message);\n            };\n        }\n\n        if (!self.supportsGetUserMedia()) {\n            errorCallback(self.errCodes.MEDIA_ERR, self.getConstantString(\"noWebrtcSupport\"));\n            return;\n        }\n\n        if (!successCallback) {\n            self.showError(self.errCodes.DEVELOPER_ERR,\n                    \"easyrtc.initMediaSource not supplied a successCallback\");\n            return;\n        }\n\n        var mode = self.getUserMediaConstraints();\n        /** @private\n         * @param {Object} stream - A mediaStream object.\n         *  */\n        var onUserMediaSuccess = function(stream) {\n            logDebug(\"getUserMedia success callback entered\");\n            logDebug(\"successfully got local media\");\n\n            stream.streamName = streamName;\n            registerLocalMediaStreamByName(stream, streamName);\n            var videoObj, triesLeft, tryToGetSize, ele;\n            if (haveAudioVideo.video) {\n                videoObj = document.createElement('video');\n                videoObj.muted = true;\n                triesLeft = 30;\n                tryToGetSize = function() {\n                    if (videoObj.videoWidth > 0 || triesLeft < 0) {\n                        self.nativeVideoWidth = videoObj.videoWidth;\n                        self.nativeVideoHeight = videoObj.videoHeight;\n                        if (self._desiredVideoProperties.height &&\n                                (self.nativeVideoHeight !== self._desiredVideoProperties.height ||\n                                        self.nativeVideoWidth !== self._desiredVideoProperties.width)) {\n                            self.showError(self.errCodes.MEDIA_WARNING,\n                                    self.format(self.getConstantString(\"resolutionWarning\"),\n                                    self._desiredVideoProperties.width, self._desiredVideoProperties.height,\n                                    self.nativeVideoWidth, self.nativeVideoHeight));\n                        }\n                        self.setVideoObjectSrc(videoObj, null);\n                        if (videoObj.removeNode) {\n                            videoObj.removeNode(true);\n                        }\n                        else {\n                            ele = document.createElement('div');\n                            ele.appendChild(videoObj);\n                            ele.removeChild(videoObj);\n                        }\n\n                        updateConfigurationInfo();\n                        if (successCallback) {\n                            successCallback(stream);\n                        }\n                    }\n                    else {\n                        triesLeft -= 1;\n                        setTimeout(tryToGetSize, 300);\n                    }\n                };\n                self.setVideoObjectSrc(videoObj, stream);\n                tryToGetSize();\n            }\n            else {\n                updateConfigurationInfo();\n                if (successCallback) {\n                    successCallback(stream);\n                }\n            }\n        };\n\n        /**\n         * @private\n         * @param {String} error\n         */\n        var onUserMediaError = function(error) {\n            logDebug(\"getusermedia failed\");\n            logDebug(\"failed to get local media\");\n            var errText;\n            if (typeof error === 'string') {\n                errText = error;\n            }\n            else if (error.name) {\n                errText = error.name;\n            }\n            else {\n                errText = \"Unknown\";\n            }\n            if (errorCallback) {\n                logDebug(\"invoking error callback\", errText);\n                errorCallback(self.errCodes.MEDIA_ERR, self.format(self.getConstantString(\"gumFailed\"), errText));\n            }\n            closeLocalMediaStreamByName(streamName);\n            haveAudioVideo = {\n                audio: false,\n                video: false\n            };\n            updateConfigurationInfo();\n        };\n\n        if (!self.audioEnabled && !self.videoEnabled) {\n            onUserMediaError(self.getConstantString(\"requireAudioOrVideo\"));\n            return;\n        }\n\n        function getCurrentTime() {\n            return (new Date()).getTime();\n        }\n\n        var firstCallTime;\n        function tryAgain(err) {\n            var currentTime = getCurrentTime();\n            if (currentTime < firstCallTime + 1000) {\n                logDebug(\"Trying getUserMedia a second time\");\n                try {\n                    navigator.getUserMedia(mode, onUserMediaSuccess, onUserMediaError);\n                } catch (e) {\n                    onUserMediaError(err);\n                }\n            }\n            else {\n                onUserMediaError(err);\n            }\n        }\n\n        //\n        // getUserMedia sometimes fails the first time I call it. I suspect it's a page loading\n        // issue. So I'm going to try adding a 1 second delay to allow things to settle down first.\n        // In addition, I'm going to try again after 3 seconds.\n        //\n        try {\n            firstCallTime = getCurrentTime();\n            navigator.getUserMedia(mode, onUserMediaSuccess, tryAgain);\n        } catch (err) {\n            tryAgain(err);\n        }\n    };\n\n    /**\n     * Sets the callback used to decide whether to accept or reject an incoming call.\n     * @param {Function} acceptCheck takes the arguments (callerEasyrtcid, acceptor).\n     * The acceptCheck callback is passed an easyrtcid and an acceptor function. The acceptor function should be called with either\n     * a true value (accept the call) or false value( reject the call) as it's first argument, and optionally,\n     * an array of local media streamNames as a second argument.\n     * @example\n     *      easyrtc.setAcceptChecker( function(easyrtcid, acceptor){\n     *           if( easyrtc.idToName(easyrtcid) === 'Fred' ){\n     *              acceptor(true);\n     *           }\n     *           else if( easyrtc.idToName(easyrtcid) === 'Barney' ){\n     *              setTimeout( function(){\n     acceptor(true, ['myOtherCam']); // myOtherCam presumed to a streamName\n     }, 10000);\n     *           }\n     *           else{\n     *              acceptor(false);\n     *           }\n     *      });\n     */\n    this.setAcceptChecker = function(acceptCheck) {\n        self.acceptCheck = acceptCheck;\n    };\n\n    /**\n     * easyrtc.setStreamAcceptor sets a callback to receive media streams from other peers, independent\n     * of where the call was initiated (caller or callee).\n     * @param {Function} acceptor takes arguments (caller, mediaStream, mediaStreamName)\n     * @example\n     *  easyrtc.setStreamAcceptor(function(easyrtcid, stream, streamName){\n     *     document.getElementById('callerName').innerHTML = easyrtc.idToName(easyrtcid);\n     *     easyrtc.setVideoObjectSrc( document.getElementById(\"callerVideo\"), stream);\n     *  });\n     */\n    this.setStreamAcceptor = function(acceptor) {\n        self.streamAcceptor = acceptor;\n    };\n\n    /** Sets the easyrtc.onError field to a user specified function.\n     * @param {Function} errListener takes an object of the form {errorCode: String, errorText: String}\n     * @example\n     *    easyrtc.setOnError( function(errorObject){\n     *        document.getElementById(\"errMessageDiv\").innerHTML += errorObject.errorText;\n     *    });\n     */\n    self.setOnError = function(errListener) {\n        self.onError = errListener;\n    };\n\n    /**\n     * Sets the callCancelled callback. This will be called when a remote user\n     * initiates a call to you, but does a \"hangup\" before you have a chance to get his video stream.\n     * @param {Function} callCancelled takes an easyrtcid as an argument and a boolean that indicates whether\n     *  the call was explicitly cancelled remotely (true), or actually accepted by the user attempting a call to\n     *  the same party.\n     * @example\n     *     easyrtc.setCallCancelled( function(easyrtcid, explicitlyCancelled){\n     *        if( explicitlyCancelled ){\n     *            console.log(easyrtc.idToName(easyrtcid) + \" stopped trying to reach you\");\n     *         }\n     *         else{\n     *            console.log(\"Implicitly called \"  + easyrtc.idToName(easyrtcid));\n     *         }\n     *     });\n     */\n    this.setCallCancelled = function(callCancelled) {\n        self.callCancelled = callCancelled;\n    };\n\n    /**  Sets a callback to receive notification of a media stream closing. The usual\n     *  use of this is to clear the source of your video object so you aren't left with\n     *  the last frame of the video displayed on it.\n     *  @param {Function} onStreamClosed takes an easyrtcid as it's first parameter, the stream as it's second argument, and name of the video stream as it's third.\n     *  @example\n     *     easyrtc.setOnStreamClosed( function(easyrtcid, stream, streamName){\n     *         easyrtc.setVideoObjectSrc( document.getElementById(\"callerVideo\"), \"\");\n     *         ( easyrtc.idToName(easyrtcid) + \" closed stream \" + stream.id + \" \" + streamName);\n     *     });\n     */\n    this.setOnStreamClosed = function(onStreamClosed) {\n        self.onStreamClosed = onStreamClosed;\n    };\n\n    /**\n     * Sets a listener for data sent from another client (either peer to peer or via websockets).\n     * If no msgType or source is provided, the listener applies to all events that aren't otherwise handled.\n     * If a msgType but no source is provided, the listener applies to all messages of that msgType that aren't otherwise handled.\n     * If a msgType and a source is provided, the listener applies to only message of the specified type coming from the specified peer.\n     * The most specific case takes priority over the more general.\n     * @param {Function} listener has the signature (easyrtcid, msgType, msgData, targeting).\n     *   msgType is a string. targeting is null if the message was received using WebRTC data channels, otherwise it\n     *   is an object that contains one or more of the following string valued elements {targetEasyrtcid, targetGroup, targetRoom}.\n     * @param {String} msgType - a string, optional.\n     * @param {String} source - the sender's easyrtcid, optional.\n     * @example\n     *     easyrtc.setPeerListener( function(easyrtcid, msgType, msgData, targeting){\n     *         console.log(\"From \" + easyrtc.idToName(easyrtcid) +\n     *             \" sent the following data \" + JSON.stringify(msgData));\n     *     });\n     *     easyrtc.setPeerListener( function(easyrtcid, msgType, msgData, targeting){\n     *         console.log(\"From \" + easyrtc.idToName(easyrtcid) +\n     *             \" sent the following data \" + JSON.stringify(msgData));\n     *     }, 'food', 'dkdjdekj44--');\n     *     easyrtc.setPeerListener( function(easyrtcid, msgType, msgData, targeting){\n     *         console.log(\"From \" + easyrtcid +\n     *             \" sent the following data \" + JSON.stringify(msgData));\n     *     }, 'drink');\n     *\n     *\n     */\n    this.setPeerListener = function(listener, msgType, source) {\n        if (!msgType) {\n            receivePeer.cb = listener;\n        }\n        else {\n            if (!receivePeer.msgTypes[msgType]) {\n                receivePeer.msgTypes[msgType] = {sources: {}};\n            }\n            if (!source) {\n                receivePeer.msgTypes[msgType].cb = listener;\n            }\n            else {\n                receivePeer.msgTypes[msgType].sources[source] = {cb: listener};\n            }\n        }\n    };\n    /* This function serves to distribute peer messages to the various peer listeners */\n    /** @private\n     * @param {String} easyrtcid\n     * @param {Object} msg - needs to contain a msgType and a msgData field.\n     * @param {Object} targeting\n     */\n    this.receivePeerDistribute = function(easyrtcid, msg, targeting) {\n        var msgType = msg.msgType;\n        var msgData = msg.msgData;\n        if (!msgType) {\n            logDebug(\"received peer message without msgType\", msg);\n            return;\n        }\n\n        if (receivePeer.msgTypes[msgType]) {\n            if (receivePeer.msgTypes[msgType].sources[easyrtcid] &&\n                    receivePeer.msgTypes[msgType].sources[easyrtcid].cb) {\n                receivePeer.msgTypes[msgType].sources[easyrtcid].cb(easyrtcid, msgType, msgData, targeting);\n                return;\n            }\n            if (receivePeer.msgTypes[msgType].cb) {\n                receivePeer.msgTypes[msgType].cb(easyrtcid, msgType, msgData, targeting);\n                return;\n            }\n        }\n        if (receivePeer.cb) {\n            receivePeer.cb(easyrtcid, msgType, msgData, targeting);\n        }\n    };\n\n    /**\n     * Sets a listener for messages from the server.\n     * @param {Function} listener has the signature (msgType, msgData, targeting)\n     * @example\n     *     easyrtc.setServerListener( function(msgType, msgData, targeting){\n     *         (\"The Server sent the following message \" + JSON.stringify(msgData));\n     *     });\n     */\n    this.setServerListener = function(listener) {\n        receiveServerCB = listener;\n    };\n\n    /**\n     * Sets the url of the Socket server.\n     * The node.js server is great as a socket server, but it doesn't have\n     * all the hooks you'd like in a general web server, like PHP or Python\n     * plug-ins. By setting the serverPath your application can get it's regular\n     * pages from a regular web server, but the EasyRTC library can still reach the\n     * socket server.\n     * @param {String} socketUrl\n     * @param {Object} options an optional dictionary of options for socket.io's connect method.\n     * The default is {'connect timeout': 10000,'force new connection': true }\n     * @example\n     *     easyrtc.setSocketUrl(\":8080\", options);\n     */\n    this.setSocketUrl = function(socketUrl, options) {\n        logDebug(\"WebRTC signaling server URL set to \" + socketUrl);\n        serverPath = socketUrl;\n        if( options ) {\n            connectionOptions = options;\n        }\n    };\n\n    /**\n     * Sets the user name associated with the connection.\n     * @param {String} username must obey standard identifier conventions.\n     * @returns {Boolean} true if the call succeeded, false if the username was invalid.\n     * @example\n     *    if( !easyrtc.setUsername(\"JohnSmith\") ){\n     *        console.error(\"bad user name);\n     *    }\n     *\n     */\n    this.setUsername = function(username) {\n        if( self.myEasyrtcid ) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"easyrtc.setUsername called after authentication\");\n            return false;\n        }\n        else if (self.isNameValid(username)) {\n            self.username = username;\n            return true;\n        }\n        else {\n            self.showError(self.errCodes.BAD_NAME, self.format(self.getConstantString(\"badUserName\"), username));\n            return false;\n        }\n    };\n\n    /**\n     * Get an array of easyrtcids that are using a particular username\n     * @param {String} username - the username of interest.\n     * @param {String} room - an optional room name argument limiting results to a particular room.\n     * @returns {Array} an array of {easyrtcid:id, roomName: roomName}.\n     */\n    this.usernameToIds = function(username, room) {\n        var results = [];\n        var id, roomName;\n        for (roomName in lastLoggedInList) {\n            if (!lastLoggedInList.hasOwnProperty(roomName)) {\n                continue;\n            }\n            if (room && roomName !== room) {\n                continue;\n            }\n            for (id in lastLoggedInList[roomName]) {\n                if (!lastLoggedInList[roomName].hasOwnProperty(id)) {\n                    continue;\n                }\n                if (lastLoggedInList[roomName][id].username === username) {\n                    results.push({\n                        easyrtcid: id,\n                        roomName: roomName\n                    });\n                }\n            }\n        }\n        return results;\n    };\n\n    /**\n     * Returns another peers API field, if it exists.\n     * @param {type} roomName\n     * @param {type} easyrtcid\n     * @param {type} fieldName\n     * @returns {Object}  Undefined if the attribute does not exist, its value otherwise.\n     */\n    this.getRoomApiField = function(roomName, easyrtcid, fieldName) {\n        if (lastLoggedInList[roomName] &&\n                lastLoggedInList[roomName][easyrtcid] &&\n                lastLoggedInList[roomName][easyrtcid].apiField &&\n                lastLoggedInList[roomName][easyrtcid].apiField[fieldName]) {\n            return lastLoggedInList[roomName][easyrtcid].apiField[fieldName].fieldValue;\n        }\n        else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Set the authentication credential if needed.\n     * @param {Object} credentialParm - a JSONable object.\n     */\n    this.setCredential = function(credentialParm) {\n        try {\n            JSON.stringify(credentialParm);\n            credential = credentialParm;\n            return true;\n        }\n        catch (oops) {\n            self.showError(self.errCodes.BAD_CREDENTIAL, \"easyrtc.setCredential passed a non-JSON-able object\");\n            throw \"easyrtc.setCredential passed a non-JSON-able object\";\n        }\n    };\n\n    /**\n     * Sets the listener for socket disconnection by external (to the API) reasons.\n     * @param {Function} disconnectListener takes no arguments and is not called as a result of calling easyrtc.disconnect.\n     * @example\n     *    easyrtc.setDisconnectListener(function(){\n     *        easyrtc.showError(\"SYSTEM-ERROR\", \"Lost our connection to the socket server\");\n     *    });\n     */\n    this.setDisconnectListener = function(disconnectListener) {\n        self.disconnectListener = disconnectListener;\n    };\n\n    /**\n     * Convert an easyrtcid to a user name. This is useful for labeling buttons and messages\n     * regarding peers.\n     * @param {String} easyrtcid\n     * @return {String} the username associated with the easyrtcid, or the easyrtcid if there is\n     * no associated username.\n     * @example\n     *    console.log(easyrtcid + \" is actually \" + easyrtc.idToName(easyrtcid));\n     */\n    this.idToName = function(easyrtcid) {\n        var roomName;\n        for (roomName in lastLoggedInList) {\n            if (!lastLoggedInList.hasOwnProperty(roomName)) {\n                continue;\n            }\n            if (lastLoggedInList[roomName][easyrtcid]) {\n                if (lastLoggedInList[roomName][easyrtcid].username) {\n                    return lastLoggedInList[roomName][easyrtcid].username;\n                }\n            }\n        }\n        return easyrtcid;\n    };\n\n    /* used in easyrtc.connect */\n    /** @private */\n    this.webSocket = null;\n    /** @private */\n    var pc_config = {};\n    /** @private */\n    var pc_config_to_use = null;\n    /** @private */\n    var use_fresh_ice_each_peer = false;\n\n    /**\n     * Determines whether fresh ice server configuration should be requested from the server for each peer connection.\n     * @param {Boolean} value the default is false.\n     */\n    this.setUseFreshIceEachPeerConnection = function(value) {\n        use_fresh_ice_each_peer = value;\n    };\n\n    /**\n     * Returns the last ice config supplied by the EasyRTC server. This function is not normally used, it is provided\n     * for people who want to try filtering ice server configuration on the client.\n     * @return {Object} which has the form {iceServers:[ice_server_entry, ice_server_entry, ...]}\n     */\n    this.getServerIce = function() {\n        return pc_config;\n    };\n\n    /**\n     * Sets the ice server configuration that will be used in subsequent calls. You only need this function if you are filtering\n     * the ice server configuration on the client or if you are using TURN certificates that have a very short lifespan.\n     * @param {Object} ice An object with iceServers element containing an array of ice server entries.\n     * @example\n     *     easyrtc.setIceUsedInCalls( {\"iceServers\": [\n     *      {\n     *         \"url\": \"stun:stun.sipgate.net\"\n     *      },\n     *      {\n     *         \"url\": \"stun:217.10.68.152\"\n     *      },\n     *      {\n     *         \"url\": \"stun:stun.sipgate.net:10000\"\n     *      }\n     *      ]});\n     *      easyrtc.call(...);\n     */\n    this.setIceUsedInCalls = function(ice) {\n        if (!ice.iceServers) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Bad ice configuration passed to easyrtc.setIceUsedInCalls\");\n        }\n        else {\n            pc_config_to_use = ice;\n        }\n    };\n\n    /** @private */\n    function getRemoteStreamByName(peerConn, otherUser, streamName) {\n                    \n        var keyToMatch = null;\n        var remoteStreams = peerConn.pc.getRemoteStreams();\n\n        // No streamName lead to default \n        if (!streamName) {\n            streamName = \"default\";\n        }\n\n        // default lead to first if available\n        if (streamName === \"default\") {\n            if (remoteStreams.length > 0) {\n                return remoteStreams[0];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Get mediaIds from user roomData\n        for (var roomName in self.roomData) {\n            if (self.roomData.hasOwnProperty(roomName)) {\n                var mediaIds = self.getRoomApiField(roomName, otherUser, \"mediaIds\");\n                keyToMatch = mediaIds ? mediaIds[streamName] : null;\n                if (keyToMatch) {\n                    break;\n                }\n            }\n        }\n\n        // \n        if (!keyToMatch) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"remote peer does not have media stream called \" + streamName);\n        }\n\n        // \n        for (var i = 0; i < remoteStreams.length; i++) {\n            var remoteId;\n            if (remoteStreams[i].id) {\n                remoteId = remoteStreams[i].id;\n            }  else {\n                remoteId = \"default\";\n            }\n\n            if (\n                !keyToMatch || // No match\n                    remoteId === keyToMatch || // Full match\n                        remoteId.indexOf(keyToMatch) === 0 // Partial match\n            ) {\n                return remoteStreams[i];\n            }\n\n        }\n\n        return null;\n    }\n\n    /**\n     * @private\n     * @param {string} easyrtcid\n     * @param {boolean} checkAudio\n     * @param {string} streamName\n     */\n    function _haveTracks(easyrtcid, checkAudio, streamName) {\n        var stream, peerConnObj;\n        if (!easyrtcid) {\n            stream = getLocalMediaStreamByName(streamName);\n        }\n        else {\n            peerConnObj = peerConns[easyrtcid];\n            if (!peerConnObj) {\n                self.showError(self.errCodes.DEVELOPER_ERR, \"haveTracks called about a peer you don't have a connection to\");\n                return false;\n            }\n            stream = getRemoteStreamByName(peerConns[easyrtcid], easyrtcid, streamName);\n        }\n        if (!stream) {\n            return false;\n        }\n\n        var tracks;\n        try {\n\n            if (checkAudio) {\n                tracks = stream.getAudioTracks();\n            }\n            else {\n                tracks = stream.getVideoTracks();\n            }\n\n        } catch (oops) {\n            // TODO why do we return true here ?\n            return true;\n        }\n\n        if (!tracks) {\n            return false;\n        }\n\n        return tracks.length > 0;\n    }\n\n    /** Determines if a particular peer2peer connection has an audio track.\n     * @param {String} easyrtcid - the id of the other caller in the connection. If easyrtcid is not supplied, checks the local media.\n     * @param {String} streamName - an optional stream id.\n     * @return {Boolean} true if there is an audio track or the browser can't tell us.\n     */\n    this.haveAudioTrack = function(easyrtcid, streamName) {\n        return _haveTracks(easyrtcid, true, streamName);\n    };\n\n    /** Determines if a particular peer2peer connection has a video track.\n     * @param {String} easyrtcid - the id of the other caller in the connection. If easyrtcid is not supplied, checks the local media.\n     * @param {String} streamName - an optional stream id.     *\n     * @return {Boolean} true if there is an video track or the browser can't tell us.\n     */\n    this.haveVideoTrack = function(easyrtcid, streamName) {\n        return _haveTracks(easyrtcid, false, streamName);\n    };\n\n    /**\n     * Gets a data field associated with a room.\n     * @param {String} roomName - the name of the room.\n     * @param {String} fieldName - the name of the field.\n     * @return {Object} dataValue - the value of the field if present, undefined if not present.\n     */\n    this.getRoomField = function(roomName, fieldName) {\n        var fields = self.getRoomFields(roomName);\n        return (!fields || !fields[fieldName]) ? undefined : fields[fieldName].fieldValue;\n    };\n\n    /** @private */\n    var fields = null;\n\n    /** @private */\n    var preallocatedSocketIo = null;\n\n    /** @private */\n    var closedChannel = null;\n\n    //\n    // easyrtc.disconnect performs a clean disconnection of the client from the server.\n    //\n    function disconnectBody() {\n        var key;\n        self.loggingOut = true;\n        offersPending = {};\n        acceptancePending = {};\n        self.disconnecting = true;\n        closedChannel = self.webSocket;\n        if (self.webSocketConnected) {\n            if (!preallocatedSocketIo) {\n                self.webSocket.close();\n            }\n            self.webSocketConnected = false;\n        }\n        self.hangupAll();\n        if (roomOccupantListener) {\n            for (key in lastLoggedInList) {\n                if (lastLoggedInList.hasOwnProperty(key)) {\n                    roomOccupantListener(key, {}, false);\n                }\n            }\n        }\n        lastLoggedInList = {};\n        self.emitEvent(\"roomOccupant\", {});\n        self.roomData = {};\n        self.roomJoin = {};\n        self.loggingOut = false;\n        self.myEasyrtcid = null;\n        self.disconnecting = false;\n        oldConfig = {};\n    }\n\n    /**\n     * Disconnect from the EasyRTC server.\n     * @example\n     *    easyrtc.disconnect();\n     */\n    this.disconnect = function() {\n\n        logDebug(\"attempt to disconnect from WebRTC signalling server\");\n\n        self.disconnecting = true;\n        self.hangupAll();\n        self.loggingOut = true;\n        //\n        // The hangupAll may try to send configuration information back to the server.\n        // Collecting that information is asynchronous, we don't actually close the\n        // connection until it's had a chance to be sent. We allocate 100ms for collecting\n        // the info, so 250ms should be sufficient for the disconnecting.\n        //\n        setTimeout(function() {\n            if (self.webSocket) {\n                try {\n                    self.webSocket.disconnect();\n                } catch (e) {\n                    // we don't really care if this fails.\n                }\n\n                closedChannel = self.webSocket;\n                self.webSocket = 0;\n            }\n            self.loggingOut = false;\n            self.disconnecting = false;\n            if (roomOccupantListener) {\n                roomOccupantListener(null, {}, false);\n            }\n            self.emitEvent(\"roomOccupant\", {});\n            oldConfig = {};\n        }, 250);\n    };\n\n    /** @private */\n    //\n    // This function is used to send WebRTC signaling messages to another client. These messages all the form:\n    //   destUser: some id or null\n    //   msgType: one of [\"offer\"/\"answer\"/\"candidate\",\"reject\",\"hangup\", \"getRoomList\"]\n    //   msgData: either null or an SDP record\n    //   successCallback: a function with the signature  function(msgType, wholeMsg);\n    //   errorCallback: a function with signature function(errorCode, errorText)\n    //\n    function sendSignalling(destUser, msgType, msgData, successCallback, errorCallback) {\n        if (!self.webSocket) {\n            throw \"Attempt to send message without a valid connection to the server.\";\n        }\n        else {\n            var dataToShip = {\n                msgType: msgType\n            };\n            if (destUser) {\n                dataToShip.targetEasyrtcid = destUser;\n            }\n            if (msgData) {\n                dataToShip.msgData = msgData;\n            }\n\n            logDebug(\"sending socket message \" + JSON.stringify(dataToShip));\n\n            self.webSocket.json.emit(\"easyrtcCmd\", dataToShip,\n                    function(ackMsg) {\n                        if (ackMsg.msgType !== \"error\") {\n                            if (!ackMsg.hasOwnProperty(\"msgData\")) {\n                                ackMsg.msgData = null;\n                            }\n                            if (successCallback) {\n                                successCallback(ackMsg.msgType, ackMsg.msgData);\n                            }\n                        }\n                        else {\n                            if (errorCallback) {\n                                errorCallback(ackMsg.msgData.errorCode, ackMsg.msgData.errorText);\n                            }\n                            else {\n                                self.showError(ackMsg.msgData.errorCode, ackMsg.msgData.errorText);\n                            }\n                        }\n                    }\n            );\n        }\n    }\n\n    /** @private */\n    //\n    // This function is used to send large messages. it sends messages that have a transfer field\n    // so that the receiver knows it's a transfer message. To differentiate the transfers, a\n    // transferId is generated and passed for each message.\n    //\n    var sendByChunkUidCounter = 0;\n    /** @private */\n    function sendByChunkHelper(destUser, msgData) {\n        var transferId = destUser + '-' + sendByChunkUidCounter++;\n\n        var pos, len, startMessage, message, endMessage;\n        var numberOfChunks = Math.ceil(msgData.length / self.maxP2PMessageLength);\n        startMessage = {\n            transfer: 'start',\n            transferId: transferId,\n            parts: numberOfChunks\n        };\n\n        endMessage = {\n            transfer: 'end',\n            transferId: transferId\n        };\n\n        peerConns[destUser].dataChannelS.send(JSON.stringify(startMessage));\n\n        for (pos = 0, len = msgData.length; pos < len; pos += self.maxP2PMessageLength) {\n            message = {\n                transferId: transferId,\n                data: msgData.substr(pos, self.maxP2PMessageLength),\n                transfer: 'chunk'\n            };\n            peerConns[destUser].dataChannelS.send(JSON.stringify(message));\n        }\n\n        peerConns[destUser].dataChannelS.send(JSON.stringify(endMessage));\n    }\n\n    /**\n     *Sends data to another user using previously established data channel. This method will\n     * fail if no data channel has been established yet. Unlike the easyrtc.sendWS method,\n     * you can't send a dictionary, convert dictionaries to strings using JSON.stringify first.\n     * What data types you can send, and how large a data type depends on your browser.\n     * @param {String} destUser (an easyrtcid)\n     * @param {String} msgType - the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object.\n     * @example\n     *     easyrtc.sendDataP2P(someEasyrtcid, \"roomData\", {room:499, bldgNum:'asd'});\n     */\n    this.sendDataP2P = function(destUser, msgType, msgData) {\n\n        var flattenedData = JSON.stringify({msgType: msgType, msgData: msgData});\n        logDebug(\"sending p2p message to \" + destUser + \" with data=\" + JSON.stringify(flattenedData));\n\n        if (!peerConns[destUser]) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to send data peer to peer without a connection to \" + destUser + ' first.');\n        }\n        else if (!peerConns[destUser].dataChannelS) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to send data peer to peer without establishing a data channel to \" + destUser + ' first.');\n        }\n        else if (!peerConns[destUser].dataChannelReady) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to use data channel to \" + destUser + \" before it's ready to send.\");\n        }\n        else {\n            try {\n                if (flattenedData.length > self.maxP2PMessageLength) {\n                    sendByChunkHelper(destUser, flattenedData);\n                } else {\n                    peerConns[destUser].dataChannelS.send(flattenedData);\n                }\n            } catch (sendDataErr) {\n                logDebug(\"sendDataP2P error: \", sendDataErr);\n                throw sendDataErr;\n            }\n        }\n    };\n\n    /** Sends data to another user using websockets. The easyrtc.sendServerMessage or easyrtc.sendPeerMessage methods\n     * are wrappers for this method; application code should use them instead.\n     * @param {String} destination - either a string containing the easyrtcId of the other user, or an object containing some subset of the following fields: targetEasyrtcid, targetGroup, targetRoom.\n     * Specifying multiple fields restricts the scope of the destination (operates as a logical AND, not a logical OR).\n     * @param {String} msgType -the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object.\n     * @param {Function} ackhandler - by default, the ackhandler handles acknowledgments from the server that your message was delivered to it's destination.\n     * However, application logic in the server can over-ride this. If you leave this null, a stub ackHandler will be used. The ackHandler\n     * gets passed a message with the same msgType as your outgoing message, or a message type of \"error\" in which case\n     * msgData will contain a errorCode and errorText fields.\n     * @example\n     *    easyrtc.sendDataWS(someEasyrtcid, \"setPostalAddress\", {room:499, bldgNum:'asd'},\n     *      function(ackMsg){\n     *          console.log(\"saw the following acknowledgment \" + JSON.stringify(ackMsg));\n     *      }\n     *    );\n     */\n    this.sendDataWS = function(destination, msgType, msgData, ackhandler) {\n        logDebug(\"sending client message via websockets to \" + destination + \" with data=\" + JSON.stringify(msgData));\n\n        if (!ackhandler) {\n            ackhandler = function(msg) {\n                if (msg.msgType === \"error\") {\n                    self.showError(msg.msgData.errorCode, msg.msgData.errorText);\n                }\n            };\n        }\n\n        var outgoingMessage = {\n            msgType: msgType,\n            msgData: msgData\n        };\n\n        if (destination) {\n            if (typeof destination === 'string') {\n                outgoingMessage.targetEasyrtcid = destination;\n            }\n            else if (typeof destination === 'object') {\n                if (destination.targetEasyrtcid) {\n                    outgoingMessage.targetEasyrtcid = destination.targetEasyrtcid;\n                }\n                if (destination.targetRoom) {\n                    outgoingMessage.targetRoom = destination.targetRoom;\n                }\n                if (destination.targetGroup) {\n                    outgoingMessage.targetGroup = destination.targetGroup;\n                }\n            }\n        }\n\n        if (self.webSocket) {\n            self.webSocket.json.emit(\"easyrtcMsg\", outgoingMessage, ackhandler);\n        }\n        else {\n            logDebug(\"websocket failed because no connection to server\");\n\n            throw \"Attempt to send message without a valid connection to the server.\";\n        }\n    };\n\n    /** Sends data to another user. This method uses data channels if one has been set up, or websockets otherwise.\n     * @param {String} destUser - a string containing the easyrtcId of the other user.\n     * Specifying multiple fields restricts the scope of the destination (operates as a logical AND, not a logical OR).\n     * @param {String} msgType -the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object.\n     * @param {Function} ackHandler - a function which receives acknowledgments. May only be invoked in\n     *  the websocket case.\n     * @example\n     *    easyrtc.sendData(someEasyrtcid, \"roomData\",  {room:499, bldgNum:'asd'},\n     *       function ackHandler(msgType, msgData);\n     *    );\n     */\n    this.sendData = function(destUser, msgType, msgData, ackHandler) {\n        if (peerConns[destUser] && peerConns[destUser].dataChannelReady) {\n            self.sendDataP2P(destUser, msgType, msgData);\n        }\n        else {\n            self.sendDataWS(destUser, msgType, msgData, ackHandler);\n        }\n    };\n\n    /**\n     * Sends a message to another peer on the easyrtcMsg channel.\n     * @param {String} destination - either a string containing the easyrtcId of the other user, or an object containing some subset of the following fields: targetEasyrtcid, targetGroup, targetRoom.\n     * Specifying multiple fields restricts the scope of the destination (operates as a logical AND, not a logical OR).\n     * @param {String} msgType - the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object with the message contents.\n     * @param {function(String, Object)} successCB - a callback function with results from the server.\n     * @param {function(String, String)} failureCB - a callback function to handle errors.\n     * @example\n     *     easyrtc.sendPeerMessage(otherUser, 'offer_candy', {candy_name:'mars'},\n     *             function(msgType, msgBody ){\n     *                console.log(\"message was sent\");\n     *             },\n     *             function(errorCode, errorText){\n     *                console.log(\"error was \" + errorText);\n     *             });\n     */\n    this.sendPeerMessage = function(destination, msgType, msgData, successCB, failureCB) {\n        if (!destination) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"destination was null in sendPeerMessage\");\n        }\n\n        logDebug(\"sending peer message \" + JSON.stringify(msgData));\n\n        function ackHandler(response) {\n            if (response.msgType === \"error\") {\n                if (failureCB) {\n                    failureCB(response.msgData.errorCode, response.msgData.errorText);\n                }\n            }\n            else {\n                if (successCB) {\n                    // firefox complains if you pass an undefined as an parameter.\n                    successCB(response.msgType, response.msgData ? response.msgData : null);\n                }\n            }\n        }\n\n        self.sendDataWS(destination, msgType, msgData, ackHandler);\n    };\n\n    /**\n     * Sends a message to the application code in the server (ie, on the easyrtcMsg channel).\n     * @param {String} msgType - the type of message being sent (application specific).\n     * @param {Object} msgData - a JSONable object with the message contents.\n     * @param {function(String, Object)} successCB - a callback function with results from the server.\n     * @param {function(String, String)} failureCB - a callback function to handle errors.\n     * @example\n     *     easyrtc.sendServerMessage('get_candy', {candy_name:'mars'},\n     *             function(msgType, msgData ){\n     *                console.log(\"got candy count of \" + msgData.barCount);\n     *             },\n     *             function(errorCode, errorText){\n     *                console.log(\"error was \" + errorText);\n     *             });\n     */\n    this.sendServerMessage = function(msgType, msgData, successCB, failureCB) {\n\n        var dataToShip = {msgType: msgType, msgData: msgData};\n        logDebug(\"sending server message \" + JSON.stringify(dataToShip));\n\n        function ackhandler(response) {\n            if (response.msgType === \"error\") {\n                if (failureCB) {\n                    failureCB(response.msgData.errorCode, response.msgData.errorText);\n                }\n            }\n            else {\n                if (successCB) {\n                    successCB(response.msgType, response.msgData ? response.msgData : null);\n                }\n            }\n        }\n\n        self.sendDataWS(null, msgType, msgData, ackhandler);\n    };\n\n    /** Sends the server a request for the list of rooms the user can see.\n     * You must have already be connected to use this function.\n     * @param {function(Object)} callback - on success, this function is called with a map of the form  { roomName:{\"roomName\":String, \"numberClients\": Number}}.\n     * The roomName appears as both the key to the map, and as the value of the \"roomName\" field.\n     * @param {function(String, String)} errorCallback   is called on failure. It gets an errorCode and errorText as it's too arguments.\n     * @example\n     *    easyrtc.getRoomList(\n     *        function(roomList){\n     *           for(roomName in roomList){\n     *              console.log(\"saw room \" + roomName);\n     *           }\n     *         },\n     *         function(errorCode, errorText){\n     *            easyrtc.showError(errorCode, errorText);\n     *         }\n     *    );\n     */\n    this.getRoomList = function(callback, errorCallback) {\n        sendSignalling(null, \"getRoomList\", null,\n                function(msgType, msgData) {\n                    callback(msgData.roomList);\n                },\n                function(errorCode, errorText) {\n                    if (errorCallback) {\n                        errorCallback(errorCode, errorText);\n                    }\n                    else {\n                        self.showError(errorCode, errorText);\n                    }\n                }\n        );\n    };\n\n    /** Value returned by easyrtc.getConnectStatus if the other user isn't connected to us. */\n    this.NOT_CONNECTED = \"not connected\";\n\n    /** Value returned by easyrtc.getConnectStatus if the other user is in the process of getting connected */\n    this.BECOMING_CONNECTED = \"connection in progress to us.\";\n\n    /** Value returned by easyrtc.getConnectStatus if the other user is connected to us. */\n    this.IS_CONNECTED = \"is connected\";\n\n    /**\n     * Check if the client has a peer-2-peer connection to another user.\n     * The return values are text strings so you can use them in debugging output.\n     *  @param {String} otherUser - the easyrtcid of the other user.\n     *  @return {String} one of the following values: easyrtc.NOT_CONNECTED, easyrtc.BECOMING_CONNECTED, easyrtc.IS_CONNECTED\n     *  @example\n     *     if( easyrtc.getConnectStatus(otherEasyrtcid) == easyrtc.NOT_CONNECTED ){\n     *         easyrtc.call(otherEasyrtcid,\n     *                  function(){ console.log(\"success\"); },\n     *                  function(){ console.log(\"failure\"); });\n     *     }\n     */\n    this.getConnectStatus = function(otherUser) {\n        if (!peerConns.hasOwnProperty(otherUser)) {\n            return self.NOT_CONNECTED;\n        }\n        var peer = peerConns[otherUser];\n        if ((peer.sharingAudio || peer.sharingVideo) && !peer.startedAV) {\n            return self.BECOMING_CONNECTED;\n        }\n        else if (peer.sharingData && !peer.dataChannelReady) {\n            return self.BECOMING_CONNECTED;\n        }\n        else {\n            return self.IS_CONNECTED;\n        }\n    };\n\n    /**\n     * @private\n     */\n    function buildPeerConstraints() {\n        var options = [];\n        options.push({'DtlsSrtpKeyAgreement': 'true'}); // for interoperability\n        return {optional: options};\n    }\n\n    /** @private */\n    function sendQueuedCandidates(peer, onSignalSuccess, onSignalFailure) {\n        var i;\n        for (i = 0; i < peerConns[peer].candidatesToSend.length; i++) {\n            sendSignalling(\n                    peer,\n                    \"candidate\",\n                    peerConns[peer].candidatesToSend[i],\n                    onSignalSuccess,\n                    onSignalFailure\n                    );\n        }\n    }\n\n    /** @private */\n    //\n    // This function calls the users onStreamClosed handler, passing it the easyrtcid of the peer, the stream itself,\n    // and the name of the stream.\n    //\n    function emitOnStreamClosed(easyrtcid, stream) {\n        if (!peerConns[easyrtcid]) {\n            return;\n        }\n        var streamName;\n        var id;\n        if (stream.id) {\n            id = stream.id;\n        }\n        else {\n            id = \"default\";\n        }\n        streamName = peerConns[easyrtcid].remoteStreamIdToName[id] || \"default\";\n        if (peerConns[easyrtcid].liveRemoteStreams[streamName] &&\n            self.onStreamClosed) {\n            delete peerConns[easyrtcid].liveRemoteStreams[streamName];\n            self.onStreamClosed(easyrtcid, stream, streamName);\n        }\n        delete peerConns[easyrtcid].remoteStreamIdToName[id];\n    }\n\n    /** @private */\n    function onRemoveStreamHelper(easyrtcid, stream) {\n        if (peerConns[easyrtcid]) {\n            emitOnStreamClosed(easyrtcid, stream);\n            updateConfigurationInfo();\n            if (peerConns[easyrtcid].pc) {\n                 try {\n                    peerConns[easyrtcid].pc.removeStream(stream);\n                 } catch( err) {}\n            }\n        }\n    }\n\n    /** @private */\n    function buildDeltaRecord(added, deleted) {\n        function objectNotEmpty(obj) {\n            var i;\n            for (i in obj) {\n                if (obj.hasOwnProperty(i)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        var result = {};\n        if (objectNotEmpty(added)) {\n            result.added = added;\n        }\n\n        if (objectNotEmpty(deleted)) {\n            result.deleted = deleted;\n        }\n\n        if (objectNotEmpty(result)) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    }\n\n    /** @private */\n    function findDeltas(oldVersion, newVersion) {\n        var i;\n        var added = {}, deleted = {};\n        var subPart;\n        for (i in newVersion) {\n            if (newVersion.hasOwnProperty(i)) {\n                if (oldVersion === null || typeof oldVersion[i] === 'undefined') {\n                    added[i] = newVersion[i];\n                }\n                else if (typeof newVersion[i] === 'object') {\n                    subPart = findDeltas(oldVersion[i], newVersion[i]);\n                    if (subPart !== null) {\n                        added[i] = newVersion[i];\n                    }\n                }\n                else if (newVersion[i] !== oldVersion[i]) {\n                    added[i] = newVersion[i];\n                }\n            }\n        }\n        for (i in oldVersion) {\n            if (newVersion.hasOwnProperty(i)) {\n                if (typeof newVersion[i] === 'undefined') {\n                    deleted[i] = oldVersion[i];\n                }\n            }\n        }\n\n        return buildDeltaRecord(added, deleted);\n    }\n\n    /** @private */\n    //\n    // this function collects configuration info that will be sent to the server.\n    // It returns that information, leaving it the responsibility of the caller to\n    // do the actual sending.\n    //\n    function collectConfigurationInfo(/* forAuthentication */) {\n        var p2pList = {};\n        var i;\n        for (i in peerConns) {\n            if (!peerConns.hasOwnProperty(i)) {\n                continue;\n            }\n            p2pList[i] = {\n                connectTime: peerConns[i].connectTime,\n                isInitiator: !!peerConns[i].isInitiator\n            };\n        }\n\n        var newConfig = {\n            userSettings: {\n                sharingAudio: !!haveAudioVideo.audio,\n                sharingVideo: !!haveAudioVideo.video,\n                sharingData: !!dataEnabled,\n                nativeVideoWidth: self.nativeVideoWidth,\n                nativeVideoHeight: self.nativeVideoHeight,\n                windowWidth: window.innerWidth,\n                windowHeight: window.innerHeight,\n                screenWidth: window.screen.width,\n                screenHeight: window.screen.height,\n                cookieEnabled: navigator.cookieEnabled,\n                os: navigator.oscpu,\n                language: navigator.language\n            }\n        };\n\n        if (!isEmptyObj(p2pList)) {\n            newConfig.p2pList = p2pList;\n        }\n\n        return newConfig;\n    }\n\n    /** @private */\n    function updateConfiguration() {\n\n        var newConfig = collectConfigurationInfo(false);\n        //\n        // we need to give the getStats calls a chance to fish out the data.\n        // The longest I've seen it take is 5 milliseconds so 100 should be overkill.\n        //\n        var sendDeltas = function() {\n            var alteredData = findDeltas(oldConfig, newConfig);\n            //\n            // send all the configuration information that changes during the session\n            //\n            if (alteredData) {\n                logDebug(\"cfg=\" + JSON.stringify(alteredData.added));\n\n                if (self.webSocket) {\n                    sendSignalling(null, \"setUserCfg\", {setUserCfg: alteredData.added}, null, null);\n                }\n            }\n            oldConfig = newConfig;\n        };\n        if (oldConfig === {}) {\n            sendDeltas();\n        }\n        else {\n            setTimeout(sendDeltas, 100);\n        }\n    }\n\n    // Parse the uint32 PRIORITY field into its constituent parts from RFC 5245,\n    // type preference, local preference, and (256 - component ID).\n    // ex: 126 | 32252 | 255 (126 is host preference, 255 is component ID 1)\n    function formatPriority(priority) {\n        var s = '';\n        s += (priority >> 24);\n        s += ' | ';\n        s += (priority >> 8) & 0xFFFF;\n        s += ' | ';\n        s += priority & 0xFF;\n        return s;\n    }\n\n    // Parse a candidate:foo string into an object, for easier use by other methods.\n    /** @private */\n    function parseCandidate(text) {\n        var candidateStr = 'candidate:';\n        var pos = text.indexOf(candidateStr) + candidateStr.length;\n        var fields = text.substr(pos).split(' ');\n        return {\n            'component': fields[1],\n            'type': fields[7],\n            'foundation': fields[0],\n            'protocol': fields[2],\n            'address': fields[4],\n            'port': fields[5],\n            'priority': formatPriority(fields[3])\n        };\n    }\n\n    /** @private */\n    function processCandicate(candicate) {\n        self._candicates = self._candicates || [];\n        self._candicates.push(parseCandidate(candicate));\n    }\n\n    function processAddedStream(otherUser, theStream) {\n        if (!peerConns[otherUser] ||  peerConns[otherUser].cancelled) {\n            return;\n        }\n\n        var peerConn = peerConns[otherUser];\n\n        if (!peerConn.startedAV) {\n            peerConn.startedAV = true;\n            peerConn.sharingAudio = haveAudioVideo.audio;\n            peerConn.sharingVideo = haveAudioVideo.video;\n            peerConn.connectTime = new Date().getTime();\n            if (peerConn.callSuccessCB) {\n                if (peerConn.sharingAudio || peerConn.sharingVideo) {\n                    peerConn.callSuccessCB(otherUser, \"audiovideo\");\n                }\n            }\n            if (self.audioEnabled || self.videoEnabled) {\n                updateConfiguration();\n            }\n        }\n\n        var remoteName = getNameOfRemoteStream(otherUser, theStream.id || \"default\");\n        if (!remoteName) {\n            remoteName = \"default\";\n        }\n        peerConn.remoteStreamIdToName[theStream.id || \"default\"] = remoteName;\n        peerConn.liveRemoteStreams[remoteName] = true;\n        theStream.streamName = remoteName;\n        if (self.streamAcceptor) {\n            self.streamAcceptor(otherUser, theStream, remoteName);\n            //\n            // Inform the other user that the stream they provided has been received.\n            // This should be moved into signalling at some point\n            //\n            self.sendDataWS(otherUser, \"easyrtc_streamReceived\", {streamName:remoteName},function(){});\n        }\n    }\n\n    function processAddedTrack(otherUser, peerStreams) {\n\n        if (!peerConns[otherUser] ||  peerConns[otherUser].cancelled) {\n            return;\n        }\n\n        var peerConn = peerConns[otherUser];\n        peerConn.trackTimers = peerConn.trackTimers || {};\n\n        // easyrtc thinks in terms of streams, not tracks.\n        // so we'll add a timeout when the first track event\n        // fires. Firefox produces two events (one of type \"video\",\n        // and one of type \"audio\".\n\n        for (var i = 0, l = peerStreams.length; i < l; i++) {\n            var peerStream = peerStreams[i],\n                streamId = peerStream.id || \"default\";\n            clearTimeout(peerConn.trackTimers[streamId]);\n            peerConn.trackTimers[streamId] = setTimeout(function(peerStream) {\n               processAddedStream(peerConn, otherUser, peerStream);\n            }.bind(peerStream), 100); // Bind peerStream\n        }\n    }\n\n    /** @private */\n    // TODO split buildPeerConnection it more thant 500 lines\n    function buildPeerConnection(otherUser, isInitiator, failureCB, streamNames) {\n        var pc;\n        var message;\n        var newPeerConn;\n        var iceConfig = pc_config_to_use ? pc_config_to_use : pc_config;\n\n        logDebug(\"building peer connection to \" + otherUser);\n\n        //\n        // we don't support data channels on chrome versions < 31\n        //\n\n        try {\n\n            pc = self.createRTCPeerConnection(iceConfig, buildPeerConstraints());\n\n            if (!pc) {\n                message = \"Unable to create PeerConnection object, check your ice configuration(\" + JSON.stringify(iceConfig) + \")\";\n                logDebug(message);\n                throw Error(message);\n            }\n\n            //\n            // turn off data channel support if the browser doesn't support it.\n            //\n\n            if (dataEnabled && typeof pc.createDataChannel === 'undefined') {\n                dataEnabled = false;\n            }\n\n            pc.onnegotiationneeded = function(event) {\n                if (\n                    peerConns[otherUser] &&\n                        (peerConns[otherUser].enableNegotiateListener)\n                ) {\n                    pc.createOffer(function(sdp) {\n                        if (sdpLocalFilter) {\n                            sdp.sdp = sdpLocalFilter(sdp.sdp);\n                        }\n                        pc.setLocalDescription(sdp, function() {\n                            self.sendPeerMessage(otherUser, \"__addedMediaStream\", {\n                                sdp: sdp\n                            });\n\n                        }, function() {\n                        });\n                    }, function(error) {\n                        logDebug(\"unexpected error in creating offer\");\n                    });\n                }\n            };\n\n            pc.onsignalingstatechange = function () {\n                \n                var eventTarget = event.currentTarget || event.target || pc,\n                    signalingState = eventTarget.signalingState || 'unknown';\n\n                if (signalingStateChangeListener) {\n                   signalingStateChangeListener(otherUser, eventTarget, signalingState);\n                }\n            };\n\n            pc.oniceconnectionstatechange = function(event) {\n\n                var eventTarget = event.currentTarget || event.target || pc,\n                    connState = eventTarget.iceConnectionState || 'unknown';\n\n                if (iceConnectionStateChangeListener) {\n                   iceConnectionStateChangeListener(otherUser, eventTarget, connState);\n                }\n\n                switch (connState) {\n                    case \"connected\":\n                        if (self.onPeerOpen ) {\n                            self.onPeerOpen(otherUser);\n                        }\n                        if (peerConns[otherUser] && peerConns[otherUser].callSuccessCB) {\n                            peerConns[otherUser].callSuccessCB(otherUser, \"connection\");\n                        }\n                        break;\n                    case \"failed\":\n                        if (failureCB) {\n                            failureCB(self.errCodes.NOVIABLEICE, \"No usable STUN/TURN path\");\n                        }\n                        delete peerConns[otherUser];\n                        break;\n                    case \"disconnected\":\n                        if (self.onPeerFailing) {\n                            self.onPeerFailing(otherUser);\n                        }\n                        if (peerConns[otherUser]) {\n                            peerConns[otherUser].failing = Date.now();\n                        }\n                        break;\n\n                    case \"closed\":\n                        if (self.onPeerClosed) {\n                            self.onPeerClosed(otherUser);\n                        }\n                        break;\n                    case \"completed\":\n                        if (peerConns[otherUser]) {\n                            if (peerConns[otherUser].failing && self.onPeerRecovered) {\n                                self.onPeerRecovered(otherUser, peerConns[otherUser].failing, Date.now());\n                            }\n                            delete peerConns[otherUser].failing;\n                         }\n                        break;\n                }\n            };\n\n            pc.onconnection = function() {\n                logDebug(\"onconnection called prematurely\");\n            };\n\n            newPeerConn = {\n                pc: pc,\n                candidatesToSend: [],\n                startedAV: false,\n                connectionAccepted: false,\n                isInitiator: isInitiator,\n                remoteStreamIdToName: {},\n                streamsAddedAcks: {},\n                liveRemoteStreams: {}\n            };\n\n            pc.onicecandidate = function(event) {\n                if (peerConns[otherUser] && peerConns[otherUser].cancelled) {\n                    return;\n                }\n                var candidateData;\n                if (event.candidate && peerConns[otherUser]) {\n                    candidateData = {\n                        type: 'candidate',\n                        label: event.candidate.sdpMLineIndex,\n                        id: event.candidate.sdpMid,\n                        candidate: event.candidate.candidate\n                    };\n\n                    if (iceCandidateFilter ) {\n                       candidateData = iceCandidateFilter(candidateData, false);\n                       if( !candidateData ) {\n                          return;\n                       }\n                    }\n                    //\n                    // some candidates include ip addresses of turn servers. we'll want those\n                    // later so we can see if our actual connection uses a turn server.\n                    // The keyword \"relay\" in the candidate identifies it as referencing a\n                    // turn server. The \\d symbol in the regular expression matches a number.\n                    //\n                    processCandicate(event.candidate.candidate);\n\n                    if (peerConns[otherUser].connectionAccepted) {\n                        sendSignalling(otherUser, \"candidate\", candidateData, null, function() {\n                            failureCB(self.errCodes.PEER_GONE, \"Candidate disappeared\");\n                        });\n                    }\n                    else {\n                        peerConns[otherUser].candidatesToSend.push(candidateData);\n                    }\n                }\n            };\n\n            pc.ontrack = function(event) {\n                logDebug(\"empty ontrack method invoked, which is expected\");\n                processAddedTrack(otherUser, event.streams);\n            };\n\n            pc.onaddstream = function(event) {\n                logDebug(\"empty onaddstream method invoked, which is expected\");\n                processAddedStream(otherUser, event.stream);\n            };\n\n            pc.onremovestream = function(event) {\n                logDebug(\"saw remove on remote media stream\");\n                onRemoveStreamHelper(otherUser, event.stream);\n            };\n\n            // Register PeerConn\n            peerConns[otherUser] = newPeerConn;\n\n        } catch (error) {\n            logDebug('buildPeerConnection error', error);\n            failureCB(self.errCodes.SYSTEM_ERR, error.message);\n            return null;\n        }\n\n        var i, stream;\n        if (streamNames) {\n            for (i = 0; i < streamNames.length; i++) {\n                stream = getLocalMediaStreamByName(streamNames[i]);\n                if (stream) {\n                    pc.addStream(stream);\n                }\n                else {\n                    logDebug(\"Developer error, attempt to access unknown local media stream \" + streamNames[i]);\n                }\n            }\n        }\n        else if (autoInitUserMedia && (self.videoEnabled || self.audioEnabled)) {\n            stream = self.getLocalStream();\n            pc.addStream(stream);\n        }\n\n        //\n        // This function handles data channel message events.\n        //\n        var pendingTransfer = {};\n        function dataChannelMessageHandler(event) {\n            logDebug(\"saw dataChannel.onmessage event: \", event.data);\n\n            if (event.data === \"dataChannelPrimed\") {\n                self.sendDataWS(otherUser, \"dataChannelPrimed\", \"\");\n            }\n            else {\n                //\n                // Chrome and Firefox Interop is passing a event with a strange data=\"\", perhaps\n                // as it's own form of priming message. Comparing the data against \"\" doesn't\n                // work, so I'm going with parsing and trapping the parse error.\n                //\n                var msg;\n\n                try {\n                    msg = JSON.parse(event.data);\n                } catch (err) {\n                    logDebug('Developer error, unable to parse event data');\n                }\n\n                if (msg) {\n                    if (msg.transfer && msg.transferId) {\n                        if (msg.transfer === 'start') {\n                            logDebug('start transfer #' + msg.transferId);\n\n                            var parts = parseInt(msg.parts);\n                            pendingTransfer = {\n                                chunks: [],\n                                parts: parts,\n                                transferId: msg.transferId\n                            };\n\n                        } else if (msg.transfer === 'chunk') {\n                            logDebug('got chunk for transfer #' + msg.transferId);\n\n                            // check data is valid\n                            if (!(typeof msg.data === 'string' && msg.data.length <= self.maxP2PMessageLength)) {\n                                logDebug('Developer error, invalid data');\n\n                                // check there's a pending transfer\n                            } else if (!pendingTransfer) {\n                                logDebug('Developer error, unexpected chunk');\n\n                            // check that transferId is valid\n                            } else if (msg.transferId !== pendingTransfer.transferId) {\n                                logDebug('Developer error, invalid transfer id');\n\n                            // check that the max length of transfer is not reached\n                            } else if (pendingTransfer.chunks.length + 1 > pendingTransfer.parts) {\n                                logDebug('Developer error, received too many chunks');\n\n                            } else {\n                                pendingTransfer.chunks.push(msg.data);\n                            }\n\n                        } else if (msg.transfer === 'end') {\n                            logDebug('end of transfer #' + msg.transferId);\n\n                            // check there's a pending transfer\n                            if (!pendingTransfer) {\n                                logDebug('Developer error, unexpected end of transfer');\n\n                            // check that transferId is valid\n                            } else if (msg.transferId !== pendingTransfer.transferId) {\n                                logDebug('Developer error, invalid transfer id');\n\n                            // check that all the chunks were received\n                            } else if (pendingTransfer.chunks.length !== pendingTransfer.parts) {\n                                logDebug('Developer error, received wrong number of chunks');\n\n                            } else {\n                                var chunkedMsg;\n                                try {\n                                    chunkedMsg = JSON.parse(pendingTransfer.chunks.join(''));\n                                } catch (err) {\n                                    logDebug('Developer error, unable to parse message');\n                                }\n\n                                if (chunkedMsg) {\n                                    self.receivePeerDistribute(otherUser, chunkedMsg, null);\n                                }\n                            }\n                            pendingTransfer = {  };\n\n                        } else {\n                            logDebug('Developer error, got an unknown transfer message' + msg.transfer);\n                        }\n                    } else {\n                        self.receivePeerDistribute(otherUser, msg, null);\n                    }\n                }\n            }\n        }\n\n        function initOutGoingChannel(otherUser) {\n            logDebug(\"saw initOutgoingChannel call\");\n\n            var dataChannel = pc.createDataChannel(dataChannelName, self.getDatachannelConstraints());\n            peerConns[otherUser].dataChannelS = dataChannel;\n            peerConns[otherUser].dataChannelR = dataChannel;\n            dataChannel.onmessage = dataChannelMessageHandler;\n            dataChannel.onopen = function(event) {\n                logDebug(\"saw dataChannel.onopen event\");\n\n                if (peerConns[otherUser]) {\n                    dataChannel.send(\"dataChannelPrimed\");\n                }\n            };\n            dataChannel.onclose = function(event) {\n                logDebug(\"saw dataChannelS.onclose event\");\n\n                if (peerConns[otherUser]) {\n                    peerConns[otherUser].dataChannelReady = false;\n                    delete peerConns[otherUser].dataChannelS;\n                }\n                if (onDataChannelClose) {\n                    onDataChannelClose(otherUser);\n                }\n\n                updateConfigurationInfo();\n            };\n        }\n\n        function initIncomingChannel(otherUser) {\n            logDebug(\"initializing incoming channel handler for \" + otherUser);\n\n            peerConns[otherUser].pc.ondatachannel = function(event) {\n\n                logDebug(\"saw incoming data channel\");\n\n                var dataChannel = event.channel;\n                peerConns[otherUser].dataChannelR = dataChannel;\n                peerConns[otherUser].dataChannelS = dataChannel;\n                peerConns[otherUser].dataChannelReady = true;\n                dataChannel.onmessage = dataChannelMessageHandler;\n                dataChannel.onclose = function(event) {\n                    logDebug(\"saw dataChannelR.onclose event\");\n\n                    if (peerConns[otherUser]) {\n                        peerConns[otherUser].dataChannelReady = false;\n                        delete peerConns[otherUser].dataChannelR;\n                    }\n                    if (onDataChannelClose) {\n                        onDataChannelClose(otherUser);\n                    }\n\n                    updateConfigurationInfo();\n                };\n                dataChannel.onopen = function(event) {\n                    logDebug(\"saw dataChannel.onopen event\");\n\n                    if (peerConns[otherUser]) {\n                        dataChannel.send(\"dataChannelPrimed\");\n                    }\n                };\n            };\n        }\n\n        //\n        //  added for interoperability\n        //\n        // TODO check if both sides have the same browser and versions\n        if (dataEnabled) {\n            self.setPeerListener(function() {\n                if (peerConns[otherUser]) {\n                    peerConns[otherUser].dataChannelReady = true;\n                    if (peerConns[otherUser].callSuccessCB) {\n                        peerConns[otherUser].callSuccessCB(otherUser, \"datachannel\");\n                    }\n                    if (onDataChannelOpen) {\n                        onDataChannelOpen(otherUser, true);\n                    }\n                    updateConfigurationInfo();\n                } else {\n                    logDebug(\"failed to setup outgoing channel listener\");\n                }\n            }, \"dataChannelPrimed\", otherUser);\n\n            if (isInitiator) {\n                try {\n\n                    initOutGoingChannel(otherUser);\n                } catch (channelErrorEvent) {\n                    logDebug(\"failed to init outgoing channel\");\n                    failureCB(self.errCodes.SYSTEM_ERR,\n                            self.formatError(channelErrorEvent));\n                }\n            }\n            if (!isInitiator) {\n                initIncomingChannel(otherUser);\n            }\n        }\n\n        pc.onconnection = function() {\n            logDebug(\"setup pc.onconnection \");\n        };\n\n        //\n        // Temporary support for responding to acknowledgements of about streams being added.\n        //\n        self.setPeerListener(function(easyrtcid, msgType, msgData, targeting){\n             if( newPeerConn.streamsAddedAcks[msgData.streamName]) {\n                 (newPeerConn.streamsAddedAcks[msgData.streamName])(easyrtcid, msgData.streamName);\n                 delete newPeerConn.streamsAddedAcks[msgData.streamName];\n             }\n        }, \"easyrtc_streamReceived\", otherUser);\n        return pc;\n    }\n\n    /** @private */\n    function doAnswerBody(caller, msgData, streamNames) {\n        var pc = buildPeerConnection(caller, false, function(message) {\n            self.showError(self.errCodes.SYSTEM_ERR, message);\n        }, streamNames);\n        var newPeerConn = peerConns[caller];\n        if (!pc) {\n            logDebug(\"buildPeerConnection failed. Call not answered\");\n            return;\n        }\n        var setLocalAndSendMessage1 = function(sessionDescription) {\n\n            if (newPeerConn.cancelled) {\n                return;\n            }\n\n            var sendAnswer = function() {\n                logDebug(\"sending answer\");\n\n                function onSignalSuccess() {\n                    logDebug(\"sending success\");\n                }\n\n                function onSignalFailure(errorCode, errorText) {\n                    logDebug(\"sending error\");\n                    delete peerConns[caller];\n                    self.showError(errorCode, errorText);\n                }\n\n                sendSignalling(caller, \"answer\", sessionDescription, onSignalSuccess, onSignalFailure);\n                peerConns[caller].connectionAccepted = true;\n                sendQueuedCandidates(caller, onSignalSuccess, onSignalFailure);\n\n                if (pc.connectDataConnection) {\n                    logDebug(\"calling connectDataConnection(5002,5001)\");\n                    pc.connectDataConnection(5002, 5001);\n                }\n            };\n            if (sdpLocalFilter) {\n                sessionDescription.sdp = sdpLocalFilter(sessionDescription.sdp);\n            }\n            pc.setLocalDescription(sessionDescription, sendAnswer, function(message) {\n                self.showError(self.errCodes.INTERNAL_ERR, \"setLocalDescription: \" + message);\n            });\n        };\n        var sd = new RTCSessionDescription(msgData);\n\n        if (!sd) {\n            throw \"Could not create the RTCSessionDescription\";\n        }\n\n        logDebug(\"sdp ||  \" + JSON.stringify(sd));\n\n        var invokeCreateAnswer = function() {\n            if (newPeerConn.cancelled) {\n                return;\n            }\n            pc.createAnswer(setLocalAndSendMessage1,\n                function(message) {\n                    self.showError(self.errCodes.INTERNAL_ERR, \"create-answer: \" + message);\n                },\n                receivedMediaConstraints);\n        };\n\n        logDebug(\"about to call setRemoteDescription in doAnswer\");\n\n        try {\n\n            if (sdpRemoteFilter) {\n                sd.sdp = sdpRemoteFilter(sd.sdp);\n            }\n            pc.setRemoteDescription(sd, invokeCreateAnswer, function(message) {\n                self.showError(self.errCodes.INTERNAL_ERR, \"set-remote-description: \" + message);\n            });\n        } catch (srdError) {\n            logDebug(\"set remote description failed\");\n            self.showError(self.errCodes.INTERNAL_ERR, \"setRemoteDescription failed: \" + srdError.message);\n        }\n    }\n\n    /** @private */\n    function doAnswer(caller, msgData, streamNames) {\n        if (!streamNames && autoInitUserMedia) {\n            var localStream = self.getLocalStream();\n            if (!localStream && (self.videoEnabled || self.audioEnabled)) {\n                self.initMediaSource(\n                        function() {\n                            doAnswer(caller, msgData);\n                        },\n                        function(errorCode, error) {\n                            self.showError(self.errCodes.MEDIA_ERR, self.format(self.getConstantString(\"localMediaError\")));\n                        });\n                return;\n            }\n        }\n        if (use_fresh_ice_each_peer) {\n            self.getFreshIceConfig(function(succeeded) {\n                if (succeeded) {\n                    doAnswerBody(caller, msgData, streamNames);\n                }\n                else {\n                    self.showError(self.errCodes.CALL_ERR, \"Failed to get fresh ice config\");\n                }\n            });\n        }\n        else {\n            doAnswerBody(caller, msgData, streamNames);\n        }\n    }\n\n\n    /** @private */\n    function callBody(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB, streamNames) {\n        acceptancePending[otherUser] = true;\n        var pc = buildPeerConnection(otherUser, true, callFailureCB, streamNames);\n        var message;\n        if (!pc) {\n            message = \"buildPeerConnection failed, call not completed\";\n            logDebug(message);\n            throw message;\n        }\n\n        peerConns[otherUser].callSuccessCB = callSuccessCB;\n        peerConns[otherUser].callFailureCB = callFailureCB;\n        peerConns[otherUser].wasAcceptedCB = wasAcceptedCB;\n        var peerConnObj = peerConns[otherUser];\n        var setLocalAndSendMessage0 = function(sessionDescription) {\n            if (peerConnObj.cancelled) {\n                return;\n            }\n            var sendOffer = function() {\n\n                sendSignalling(otherUser, \"offer\", sessionDescription, null, callFailureCB);\n            };\n            if (sdpLocalFilter) {\n                sessionDescription.sdp = sdpLocalFilter(sessionDescription.sdp);\n            }\n            pc.setLocalDescription(sessionDescription, sendOffer,\n                    function(errorText) {\n                        callFailureCB(self.errCodes.CALL_ERR, errorText);\n                    });\n        };\n        setTimeout(function() {\n            //\n            // if the call was cancelled, we don't want to continue getting the offer.\n            // we can tell the call was cancelled because there won't be a peerConn object\n            // for it.\n            //\n            if( !peerConns[otherUser]) {\n                return;\n            }\n            pc.createOffer(setLocalAndSendMessage0, function(errorObj) {\n                callFailureCB(self.errCodes.CALL_ERR, JSON.stringify(errorObj));\n            },\n                    receivedMediaConstraints);\n        }, 100);\n    }\n\n    /**\n     * Initiates a call to another user. If it succeeds, the streamAcceptor callback will be called.\n     * @param {String} otherUser - the easyrtcid of the peer being called.\n     * @param {Function} callSuccessCB (otherCaller, mediaType) - is called when the datachannel is established or the MediaStream is established. mediaType will have a value of \"audiovideo\" or \"datachannel\"\n     * @param {Function} callFailureCB (errorCode, errMessage) - is called if there was a system error interfering with the call.\n     * @param {Function} wasAcceptedCB (wasAccepted:boolean,otherUser:string) - is called when a call is accepted or rejected by another party. It can be left null.\n     * @param {Array} streamNames - optional array of streamNames.\n     * @example\n     *    easyrtc.call( otherEasyrtcid,\n     *        function(easyrtcid, mediaType){\n     *           console.log(\"Got mediaType \" + mediaType + \" from \" + easyrtc.idToName(easyrtcid));\n     *        },\n     *        function(errorCode, errMessage){\n     *           console.log(\"call to  \" + easyrtc.idToName(otherEasyrtcid) + \" failed:\" + errMessage);\n     *        },\n     *        function(wasAccepted, easyrtcid){\n     *            if( wasAccepted ){\n     *               console.log(\"call accepted by \" + easyrtc.idToName(easyrtcid));\n     *            }\n     *            else{\n     *                console.log(\"call rejected\" + easyrtc.idToName(easyrtcid));\n     *            }\n     *        });\n     */\n    this.call = function(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB, streamNames) {\n\n        if (streamNames) {\n            if (typeof streamNames === \"string\") { // accept a string argument if passed.\n                streamNames = [streamNames];\n            }\n            else if (typeof streamNames.length === \"undefined\") {\n                self.showError(self.errCodes.DEVELOPER_ERR, \"easyrtc.call passed bad streamNames\");\n                return;\n            }\n        }\n\n        logDebug(\"initiating peer to peer call to \" + otherUser +\n                    \" audio=\" + self.audioEnabled +\n                    \" video=\" + self.videoEnabled +\n                    \" data=\" + dataEnabled);\n\n\n        if (!self.supportsPeerConnections()) {\n            callFailureCB(self.errCodes.CALL_ERR, self.getConstantString(\"noWebrtcSupport\"));\n            return;\n        }\n\n        var message;\n        //\n        // If we are sharing audio/video and we haven't allocated the local media stream yet,\n        // we'll do so, recalling our self on success.\n        //\n        if (!streamNames && autoInitUserMedia) {\n            var stream = self.getLocalStream();\n            if (!stream && (self.audioEnabled || self.videoEnabled)) {\n                self.initMediaSource(function() {\n                    self.call(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB);\n                }, callFailureCB);\n                return;\n            }\n        }\n\n        if (!self.webSocket) {\n            message = \"Attempt to make a call prior to connecting to service\";\n            logDebug(message);\n            throw message;\n        }\n\n        //\n        // If B calls A, and then A calls B before accepting, then A should treat the attempt to\n        // call B as a positive offer to B's offer.\n        //\n        if (offersPending[otherUser]) {\n            wasAcceptedCB(true, otherUser);\n            doAnswer(otherUser, offersPending[otherUser], streamNames);\n            delete offersPending[otherUser];\n            self.callCancelled(otherUser, false);\n            return;\n        }\n\n        // do we already have a pending call?\n        if (typeof acceptancePending[otherUser] !== 'undefined') {\n            message = \"Call already pending acceptance\";\n            logDebug(message);\n            callFailureCB(self.errCodes.ALREADY_CONNECTED, message);\n            return;\n        }\n\n        if (use_fresh_ice_each_peer) {\n            self.getFreshIceConfig(function(succeeded) {\n                if (succeeded) {\n                    callBody(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB, streamNames);\n                }\n                else {\n                    callFailureCB(self.errCodes.CALL_ERR, \"Attempt to get fresh ice configuration failed\");\n                }\n            });\n        }\n        else {\n            callBody(otherUser, callSuccessCB, callFailureCB, wasAcceptedCB, streamNames);\n        }\n    };\n\n    /** @private */\n    //\n    // this function check the deprecated MediaStream.ended attribute\n    // and new .active. Also fallback .enable on track for Firefox.\n    //\n    function isStreamActive(stream) {\n\n        var isActive;\n\n        if (stream.active === true || stream.ended === false)  {\n            isActive = true;\n        } else {\n            isActive = stream.getTracks().reduce(function (track) {\n                return track.enabled;\n            });\n        }\n\n        return isActive;\n    }\n\n    /** @private */\n    var queuedMessages = {};\n\n    /** @private */\n    function clearQueuedMessages(caller) {\n        queuedMessages[caller] = {\n            candidates: []\n        };\n    }\n\n    /** @private */\n    function closePeer(otherUser) {\n\n        if (acceptancePending[otherUser]) {\n            delete acceptancePending[otherUser];\n        }\n        if (offersPending[otherUser]) {\n            delete offersPending[otherUser];\n        }\n\n        if (\n          !peerConns[otherUser].cancelled &&\n              peerConns[otherUser].pc\n        ) {\n            try {\n                var remoteStreams = peerConns[otherUser].pc.getRemoteStreams();\n                for (var i = 0; i < remoteStreams.length; i++) {\n                    if (isStreamActive(remoteStreams[i])) {\n                        emitOnStreamClosed(otherUser, remoteStreams[i]);\n                        stopStream(remoteStreams[i]);\n                    }\n                }\n\n                peerConns[otherUser].pc.close();\n                peerConns[otherUser].cancelled = true;\n                logDebug(\"peer closed\");\n            } catch (err) {\n                logDebug(\"peer \" + otherUser + \" close failed:\" + err);\n            } finally {\n                if (self.onPeerClosed) {\n                    self.onPeerClosed(otherUser);\n                }\n            }\n        }\n    }\n\n    /** @private */\n    function hangupBody(otherUser) {\n        \n        logDebug(\"Hanging up on \" + otherUser);\n        clearQueuedMessages(otherUser);\n\n        if (peerConns[otherUser]) {\n\n            if (peerConns[otherUser].pc) {\n                closePeer(otherUser);\n            } \n\n            if (peerConns[otherUser]) {\n                delete peerConns[otherUser];\n            }\n\n            updateConfigurationInfo();\n            \n            if (self.webSocket) {\n                sendSignalling(otherUser, \"hangup\", null, function() {\n                    logDebug(\"hangup succeeds\");\n                }, function(errorCode, errorText) {\n                    logDebug(\"hangup failed:\" + errorText);\n                    self.showError(errorCode, errorText);\n                });\n            }\n        }\n    }\n\n    \n\n    /**\n     * Hang up on a particular user or all users.\n     *  @param {String} otherUser - the easyrtcid of the person to hang up on.\n     *  @example\n     *     easyrtc.hangup(someEasyrtcid);\n     */\n    this.hangup = function(otherUser) {\n        hangupBody(otherUser);\n        updateConfigurationInfo();\n    };\n\n    /**\n     * Hangs up on all current connections.\n     * @example\n     *    easyrtc.hangupAll();\n     */\n    this.hangupAll = function() {\n\n        var sawAConnection = false;\n        for (var otherUser in peerConns) {\n            if (!peerConns.hasOwnProperty(otherUser)) {\n                continue;\n            }\n            sawAConnection = true;\n            hangupBody(otherUser);\n        }\n\n        if (sawAConnection) {\n            updateConfigurationInfo();\n        }\n    };\n\n    /**\n     * Checks to see if data channels work between two peers.\n     * @param {String} otherUser - the other peer.\n     * @returns {Boolean} true if data channels work and are ready to be used\n     *   between the two peers.\n     */\n    this.doesDataChannelWork = function(otherUser) {\n        if (!peerConns[otherUser]) {\n            return false;\n        }\n        return !!peerConns[otherUser].dataChannelReady;\n    };\n\n    /**\n     * Return the media stream shared by a particular peer. This is needed when you\n     * add a stream in the middle of a call.\n     * @param {String} easyrtcid the peer.\n     * @param {String} remoteStreamName an optional argument supplying the streamName.\n     * @returns {Object} A mediaStream.\n     */\n    this.getRemoteStream = function(easyrtcid, remoteStreamName) {\n        if (!peerConns[easyrtcid]) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"attempt to get stream of uncalled party\");\n            throw \"Developer err: no such stream\";\n        }\n        else {\n            return getRemoteStreamByName(peerConns[easyrtcid], easyrtcid, remoteStreamName);\n        }\n    };\n\n    /**\n     * Assign a local streamName to a remote stream so that it can be forwarded to other callers.\n     * @param {String} easyrtcid the peer supplying the remote stream\n     * @param {String} remoteStreamName the streamName supplied by the peer.\n     * @param {String} localStreamName streamName used when passing the stream to other peers.\n     * @example\n     *    easyrtc.makeLocalStreamFromRemoteStream(sourcePeer, \"default\", \"forwardedStream\");\n     *    easyrtc.call(nextPeer, callSuccessCB, callFailureCB, wasAcceptedCB, [\"forwardedStream\"]);\n     */\n    this.makeLocalStreamFromRemoteStream = function(easyrtcid, remoteStreamName, localStreamName) {\n        var remoteStream;\n        if (peerConns[easyrtcid].pc) {\n            remoteStream = getRemoteStreamByName(peerConns[easyrtcid], easyrtcid, remoteStreamName);\n            if (remoteStream) {\n                registerLocalMediaStreamByName(remoteStream, localStreamName);\n            }\n            else {\n                throw \"Developer err: no such stream\";\n            }\n        }\n        else {\n            throw \"Developer err: no such peer \";\n        }\n    };\n\n    /**\n     * Add a named local stream to a call.\n     * @param {String} easyrtcId The id of client receiving the stream.\n     * @param {String} streamName The name of the stream.\n     * @param {Function} receiptHandler is a function that gets called when the other side sends a message\n     *   that the stream has been received. The receiptHandler gets called with an easyrtcid and a stream name. This\n     *   argument is optional.\n     */\n    this.addStreamToCall = function(easyrtcId, streamName, receiptHandler) {\n        if( !streamName) {\n            streamName = \"default\";\n        }\n        var stream = getLocalMediaStreamByName(streamName);\n        if (!stream) {\n            logDebug(\"attempt to add nonexistent stream \" + streamName);\n        }\n        else if (!peerConns[easyrtcId] || !peerConns[easyrtcId].pc) {\n            logDebug(\"Can't add stream before a call has started.\");\n        }\n        else {\n            var pc = peerConns[easyrtcId].pc;\n            peerConns[easyrtcId].enableNegotiateListener = true;\n            pc.addStream(stream);\n            if (receiptHandler) {\n                peerConns[easyrtcId].streamsAddedAcks[streamName] = receiptHandler;\n            }\n        }\n    };\n\n    //\n    // these three listeners support the ability to add/remove additional media streams on the fly.\n    //\n    this.setPeerListener(function(easyrtcid, msgType, msgData) {\n        if (!peerConns[easyrtcid] || !peerConns[easyrtcid].pc) {\n            self.showError(self.errCodes.DEVELOPER_ERR,\n                  \"Attempt to add additional stream before establishing the base call.\");\n        }\n        else {\n            var sdp = msgData.sdp;\n            var pc = peerConns[easyrtcid].pc;\n\n            var setLocalAndSendMessage1 = function(sessionDescription) {\n                var sendAnswer = function() {\n                   logDebug(\"sending answer\");\n\n                   function onSignalSuccess() {\n                        logDebug(\"sending answer succeeded\");\n\n                   }\n\n                   function onSignalFailure(errorCode, errorText) {\n                        logDebug(\"sending answer failed\");\n\n                       delete peerConns[easyrtcid];\n                       self.showError(errorCode, errorText);\n                   }\n\n                   sendSignalling(easyrtcid, \"answer\", sessionDescription,\n                           onSignalSuccess, onSignalFailure);\n                   peerConns[easyrtcid].connectionAccepted = true;\n                   sendQueuedCandidates(easyrtcid, onSignalSuccess, onSignalFailure);\n               };\n\n               if (sdpLocalFilter) {\n                   sessionDescription.sdp = sdpLocalFilter(sessionDescription.sdp);\n               }\n               pc.setLocalDescription(sessionDescription, sendAnswer, function(message) {\n                   self.showError(self.errCodes.INTERNAL_ERR, \"setLocalDescription: \" + msgData);\n               });\n            };\n\n            var invokeCreateAnswer = function() {\n               pc.createAnswer(setLocalAndSendMessage1,\n                    function(message) {\n                        self.showError(self.errCodes.INTERNAL_ERR, \"create-answer: \" + message);\n                    },\n                    receivedMediaConstraints);\n               self.sendPeerMessage(easyrtcid, \"__gotAddedMediaStream\", {sdp: sdp});\n            };\n\n            logDebug(\"about to call setRemoteDescription in doAnswer\");\n\n            try {\n\n                if (sdpRemoteFilter) {\n                    sdp.sdp = sdpRemoteFilter(sdp.sdp);\n                }\n                pc.setRemoteDescription(new RTCSessionDescription(sdp),\n                   invokeCreateAnswer, function(message) {\n                    self.showError(self.errCodes.INTERNAL_ERR, \"set-remote-description: \" + message);\n                });\n            } catch (srdError) {\n                logDebug(\"saw exception in setRemoteDescription\", srdError);\n                self.showError(self.errCodes.INTERNAL_ERR, \"setRemoteDescription failed: \" + srdError.message);\n            }\n        }\n    }, \"__addedMediaStream\");\n\n    this.setPeerListener(function(easyrtcid, msgType, msgData) {\n        if (!peerConns[easyrtcid] || !peerConns[easyrtcid].pc) {\n            logDebug(\"setPeerListener failed: __gotAddedMediaStream Unknow easyrtcid \" + easyrtcid);\n        }\n        else {\n            var sdp = msgData.sdp;\n            if (sdpRemoteFilter) {\n                sdp.sdp = sdpRemoteFilter(sdp.sdp);\n            }\n            var pc = peerConns[easyrtcid].pc;\n            pc.setRemoteDescription(new RTCSessionDescription(sdp), function(){},\n                    function(message) {\n                       self.showError(self.errCodes.INTERNAL_ERR, \"set-remote-description: \" + message);\n                    });\n        }\n\n    }, \"__gotAddedMediaStream\");\n\n    this.setPeerListener(function(easyrtcid, msgType, msgData) {\n        if (!peerConns[easyrtcid] || !peerConns[easyrtcid].pc) {\n            logDebug(\"setPeerListener failed: __closingMediaStream Unknow easyrtcid \" + easyrtcid);\n        }\n        else {\n            var stream = getRemoteStreamByName(peerConns[easyrtcid], easyrtcid, msgData.streamName);\n            if (stream) {\n                onRemoveStreamHelper(easyrtcid, stream);\n                stopStream(stream);\n            }\n        }\n\n    }, \"__closingMediaStream\");\n\n    /** @private */\n    this.dumpPeerConnectionInfo = function() {\n        var i;\n        for (var peer in peerConns) {\n            if (peerConns.hasOwnProperty(peer)) {\n                var pc = peerConns[peer].pc;\n                var remotes = pc.getRemoteStreams();\n                var remoteIds = [];\n                for (i = 0; i < remotes.length; i++) {\n                    remoteIds.push(remotes[i].id);\n                }\n                var locals = pc.getLocalStreams();\n                var localIds = [];\n                for (i = 0; i < locals.length; i++) {\n                    localIds.push(locals[i].id);\n                }\n\n                logDebug(\"For peer \" + peer);\n                logDebug(\"    \" + JSON.stringify({local: localIds, remote: remoteIds}));\n            }\n        }\n    };\n\n    /** @private */\n    function onRemoteHangup(otherUser) {\n\n        logDebug(\"Saw onRemote hangup event\");\n        clearQueuedMessages(otherUser);\n\n        if (peerConns[otherUser]) {\n\n            if (peerConns[otherUser].pc) {\n                closePeer(otherUser);\n            }\n            else {\n                if (self.callCancelled) {\n                    self.callCancelled(otherUser, true);\n                }\n            }\n\n            if (peerConns[otherUser]) {\n                delete peerConns[otherUser];\n            }\n        }\n        else {\n            if (self.callCancelled) {\n                self.callCancelled(otherUser, true);\n            }\n        }\n    }\n\n    /** @private */\n    //\n    // checks to see if a particular peer is in any room at all.\n    //\n    function isPeerInAnyRoom(id) {\n        var roomName;\n        for (roomName in lastLoggedInList) {\n            if (!lastLoggedInList.hasOwnProperty(roomName)) {\n                continue;\n            }\n            if (lastLoggedInList[roomName][id]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks to see if a particular peer is present in any room.\n     * If it isn't, we assume it's logged out.\n     * @param {string} easyrtcid the easyrtcId of the peer.\n     */\n    this.isPeerInAnyRoom = function(easyrtcid) {\n         return isPeerInAnyRoom(easyrtcid);\n    };\n\n    /** @private */\n    function processLostPeers(peersInRoom) {\n        var id;\n        //\n        // check to see the person is still in at least one room. If not, we'll hangup\n        // on them. This isn't the correct behavior, but it's the best we can do without\n        // changes to the server.\n        //\n        for (id in peerConns) {\n            if (peerConns.hasOwnProperty(id) &&\n                    typeof peersInRoom[id] === 'undefined') {\n                if (!isPeerInAnyRoom(id)) {\n                    if (peerConns[id].pc || peerConns[id].isInitiator) {\n                        onRemoteHangup(id);\n                    }\n                    delete offersPending[id];\n                    delete acceptancePending[id];\n                    clearQueuedMessages(id);\n                }\n            }\n        }\n\n        for (id in offersPending) {\n            if (offersPending.hasOwnProperty(id) && !isPeerInAnyRoom(id)) {\n                onRemoteHangup(id);\n                clearQueuedMessages(id);\n                delete offersPending[id];\n                delete acceptancePending[id];\n            }\n        }\n\n        for (id in acceptancePending) {\n            if (acceptancePending.hasOwnProperty(id) && !isPeerInAnyRoom(id)) {\n                onRemoteHangup(id);\n                clearQueuedMessages(id);\n                delete acceptancePending[id];\n            }\n        }\n    }\n\n    /**\n     * The idea of aggregating timers is that there are events that convey state and these can fire more frequently\n     * than desired. Aggregating timers allow a bunch of events to be collapsed into one by only firing the last\n     * event.\n     * @private\n     */\n    var aggregatingTimers = {};\n\n    /**\n     * This function sets a timeout for a function to be called with the feature that if another\n     * invocation comes along within a particular interval (with the same key), the second invocation\n     * replaces the first. To prevent a continuous stream of events from preventing a callback from ever\n     * firing, we'll collapse no more than 20 events.\n     * @param {String} key A key used to identify callbacks that should be aggregated.\n     * @param {Function} callback The callback to invoke.\n     * @param {Number} period The aggregating period in milliseconds.\n     * @private\n     */\n    function addAggregatingTimer(key, callback, period) {\n        if( !period) {\n            period = 100; // 0.1 second\n        }\n        var counter = 0;\n        if( aggregatingTimers[key]) {\n            clearTimeout(aggregatingTimers[key].timer);\n            counter = aggregatingTimers[key].counter;\n        }\n        if( counter > 20) {\n            delete aggregatingTimers[key];\n            callback();\n        }\n        else {\n            aggregatingTimers[key] = {counter: counter +1};\n            aggregatingTimers[key].timer = setTimeout(function () {\n                delete aggregatingTimers[key];\n                callback();\n            }, period);\n        }\n    }\n\n    /** @private */\n    //\n    // this function gets called for each room when there is a room update.\n    //\n    function processOccupantList(roomName, occupantList) {\n        var myInfo = null;\n        var reducedList = {};\n\n        var id;\n        for (id in occupantList) {\n            if (occupantList.hasOwnProperty(id)) {\n                if (id === self.myEasyrtcid) {\n                    myInfo = occupantList[id];\n                }\n                else {\n                    reducedList[id] = occupantList[id];\n                }\n            }\n        }\n        //\n        // processLostPeers detects peers that have gone away and performs\n        // house keeping accordingly.\n        //\n        processLostPeers(reducedList);\n        //\n        //\n        //\n        addAggregatingTimer(\"roomOccupants&\" + roomName, function(){\n            if (roomOccupantListener) {\n                roomOccupantListener(roomName, reducedList, myInfo);\n            }\n            self.emitEvent(\"roomOccupants\", {roomName:roomName, occupants:lastLoggedInList});\n        }, 100);\n    }\n\n    /** @private */\n    function onChannelMsg(msg, ackAcceptorFunc) {\n\n        var targeting = {};\n        if (ackAcceptorFunc) {\n            ackAcceptorFunc(self.ackMessage);\n        }\n        if (msg.targetEasyrtcid) {\n            targeting.targetEasyrtcid = msg.targetEasyrtcid;\n        }\n        if (msg.targetRoom) {\n            targeting.targetRoom = msg.targetRoom;\n        }\n        if (msg.targetGroup) {\n            targeting.targetGroup = msg.targetGroup;\n        }\n        if (msg.senderEasyrtcid) {\n            self.receivePeerDistribute(msg.senderEasyrtcid, msg, targeting);\n        }\n        else {\n            if (receiveServerCB) {\n                receiveServerCB(msg.msgType, msg.msgData, targeting);\n            }\n            else {\n                logDebug(\"Unhandled server message \" + JSON.stringify(msg));\n            }\n        }\n    }\n\n    /** @private */\n    function processUrl(url) {\n        var ipAddress;\n        if (url.indexOf('turn:') === 0 || url.indexOf('turns:') === 0) {\n            ipAddress = url.split(/[@:&]/g)[1];\n            self._turnServers[ipAddress] = true;\n        } else if (url.indexOf('stun:') === 0 || url.indexOf('stuns:') === 0) {\n            ipAddress = url.split(/[@:&]/g)[1];\n            self._stunServers[ipAddress] = true;\n        }\n    }\n\n    /** @private */\n    function processIceConfig(iceConfig) {\n\n        var i, j, item;\n\n        pc_config = {\n            iceServers: []\n        };\n\n        self._turnServers = {};\n        self._stunServers = {};\n\n        if (\n            !iceConfig ||\n                !iceConfig.iceServers ||\n                    typeof iceConfig.iceServers.length === \"undefined\"\n        ) {\n            self.showError(\n                self.errCodes.DEVELOPER_ERR,\n                \"iceConfig received from server didn't have an array called iceServers, ignoring it\"\n            );\n        } else {\n            pc_config = {\n                iceServers: iceConfig.iceServers\n            };\n        }\n\n        for (i = 0; i < iceConfig.iceServers.length; i++) {\n            item = iceConfig.iceServers[i];\n            if( item.urls && item.urls.length ) {\n               for( j = 0; j < item.urls.length; j++ ) {\n                  processUrl(item.urls[j]);\n               }\n            }\n            else if( item.url ) {\n               processUrl(item.url);\n            }\n         }\n    }\n\n    /** @private */\n    function processSessionData(sessionData) {\n        if (sessionData) {\n            if (sessionData.easyrtcsid) {\n                self.easyrtcsid = sessionData.easyrtcsid;\n            }\n            if (sessionData.field) {\n                sessionFields = sessionData.field;\n            }\n        }\n    }\n\n    /** @private */\n    function processRoomData(roomData) {\n        self.roomData = roomData;\n\n        var k, roomName,\n            stuffToRemove, stuffToAdd,\n            id, removeId;\n\n        for (roomName in self.roomData) {\n            if (!self.roomData.hasOwnProperty(roomName)) {\n                continue;\n            }\n            if (roomData[roomName].roomStatus === \"join\") {\n                if (!(self.roomJoin[roomName])) {\n                    self.roomJoin[roomName] = roomData[roomName];\n                }\n                var mediaIds = buildMediaIds();\n                if (mediaIds !== {}) {\n                    self.setRoomApiField(roomName, \"mediaIds\", mediaIds);\n                }\n            }\n            else if (roomData[roomName].roomStatus === \"leave\") {\n                if (self.roomEntryListener) {\n                    self.roomEntryListener(false, roomName);\n                }\n                delete self.roomJoin[roomName];\n                delete lastLoggedInList[roomName];\n                continue;\n            }\n\n            if (roomData[roomName].clientList) {\n                lastLoggedInList[roomName] = roomData[roomName].clientList;\n            }\n            else if (roomData[roomName].clientListDelta) {\n                stuffToAdd = roomData[roomName].clientListDelta.updateClient;\n                if (stuffToAdd) {\n                    for (id in stuffToAdd) {\n                        if (!stuffToAdd.hasOwnProperty(id)) {\n                            continue;\n                        }\n                        if (!lastLoggedInList[roomName]) {\n                            lastLoggedInList[roomName] = [];\n                        }\n                        if( !lastLoggedInList[roomName][id] ) {\n                           lastLoggedInList[roomName][id] = stuffToAdd[id];\n                        }\n                        for( k in stuffToAdd[id] ) {\n                           if( k === \"apiField\" || k === \"presence\") {\n                              lastLoggedInList[roomName][id][k] = stuffToAdd[id][k];\n                           }\n                        }\n                    }\n                }\n                stuffToRemove = roomData[roomName].clientListDelta.removeClient;\n                if (stuffToRemove && lastLoggedInList[roomName]) {\n                    for (removeId in stuffToRemove) {\n                        if (stuffToRemove.hasOwnProperty(removeId)) {\n                            delete lastLoggedInList[roomName][removeId];\n                        }\n                    }\n                }\n            }\n            if (self.roomJoin[roomName] && roomData[roomName].field) {\n                fields.rooms[roomName] = roomData[roomName].field;\n            }\n            if (roomData[roomName].roomStatus === \"join\") {\n                if (self.roomEntryListener) {\n                    self.roomEntryListener(true, roomName);\n                }\n            }\n            processOccupantList(roomName, lastLoggedInList[roomName]);\n        }\n        self.emitEvent(\"roomOccupant\", lastLoggedInList);\n    }\n\n    /** @private */\n    function onChannelCmd(msg, ackAcceptorFn) {\n\n        var caller = msg.senderEasyrtcid;\n        var msgType = msg.msgType;\n        var msgData = msg.msgData;\n        var pc;\n\n        logDebug('received message of type ' + msgType);\n\n\n        if (typeof queuedMessages[caller] === \"undefined\") {\n            clearQueuedMessages(caller);\n        }\n\n        var processCandidateBody = function(caller, msgData) {\n            var candidate = null;\n\n            if( iceCandidateFilter ) {\n               msgData = iceCandidateFilter(msgData, true);\n               if( !msgData ) {\n                  return;\n               }\n            }\n\n            candidate = new RTCIceCandidate({\n                sdpMLineIndex: msgData.label,\n                candidate: msgData.candidate\n            });\n            pc = peerConns[caller].pc;\n\n            function iceAddSuccess() {\n                logDebug(\"iceAddSuccess: \" +\n                    JSON.stringify(candidate));\n                processCandicate(msgData.candidate);\n            }\n\n            function iceAddFailure(domError) {\n                self.showError(self.errCodes.ICECANDIDATE_ERR, \"bad ice candidate (\" + domError.name + \"): \" +\n                    JSON.stringify(candidate));\n            }\n\n            pc.addIceCandidate(candidate, iceAddSuccess, iceAddFailure);\n        };\n\n        var flushCachedCandidates = function(caller) {\n            var i;\n            if (queuedMessages[caller]) {\n                for (i = 0; i < queuedMessages[caller].candidates.length; i++) {\n                    processCandidateBody(caller, queuedMessages[caller].candidates[i]);\n                }\n                delete queuedMessages[caller];\n            }\n        };\n\n        var processOffer = function(caller, msgData) {\n\n            var helper = function(wasAccepted, streamNames) {\n\n                if (streamNames) {\n                    if (typeof streamNames === \"string\") {\n                        streamNames = [streamNames];\n                    }\n                    else if (streamNames.length === undefined) {\n                        self.showError(self.errCodes.DEVELOPER_ERR, \"accept callback passed invalid streamNames\");\n                        return;\n                    }\n                }\n\n                logDebug(\"offer accept=\" + wasAccepted);\n\n                delete offersPending[caller];\n\n                if (wasAccepted) {\n                    if (!self.supportsPeerConnections()) {\n                        self.showError(self.errCodes.CALL_ERR, self.getConstantString(\"noWebrtcSupport\"));\n                        return;\n                    }\n                    doAnswer(caller, msgData, streamNames);\n                    flushCachedCandidates(caller);\n                }\n                else {\n                    sendSignalling(caller, \"reject\", null, null, null);\n                    clearQueuedMessages(caller);\n                }\n            };\n            //\n            // There is a very rare case of two callers sending each other offers\n            // before receiving the others offer. In such a case, the caller with the\n            // greater valued easyrtcid will delete its pending call information and do a\n            // simple answer to the other caller's offer.\n            //\n            if (acceptancePending[caller] && caller < self.myEasyrtcid) {\n                delete acceptancePending[caller];\n                if (queuedMessages[caller]) {\n                    delete queuedMessages[caller];\n                }\n                if (peerConns[caller]) {\n                    if (peerConns[caller].wasAcceptedCB) {\n                        peerConns[caller].wasAcceptedCB(true, caller);\n                    }\n                    delete peerConns[caller];\n                }\n                helper(true);\n                return;\n            }\n\n            offersPending[caller] = msgData;\n            if (!self.acceptCheck) {\n                helper(true);\n            }\n            else {\n                self.acceptCheck(caller, helper);\n            }\n        };\n\n        function processReject(caller) {\n            delete acceptancePending[caller];\n            if (queuedMessages[caller]) {\n                delete queuedMessages[caller];\n            }\n            if (peerConns[caller]) {\n                if (peerConns[caller].wasAcceptedCB) {\n                    peerConns[caller].wasAcceptedCB(false, caller);\n                }\n                delete peerConns[caller];\n            }\n        }\n\n        function processAnswer(caller, msgData) {\n\n            delete acceptancePending[caller];\n\n            //\n            // if we've discarded the peer connection, ignore the answer.\n            //\n            if (!peerConns[caller]) {\n                return;\n            }\n            peerConns[caller].connectionAccepted = true;\n\n\n\n            if (peerConns[caller].wasAcceptedCB) {\n                peerConns[caller].wasAcceptedCB(true, caller);\n            }\n\n            var onSignalSuccess = function() {\n\n            };\n            var onSignalFailure = function(errorCode, errorText) {\n                if (peerConns[caller]) {\n                    delete peerConns[caller];\n                }\n                self.showError(errorCode, errorText);\n            };\n            // peerConns[caller].startedAV = true;\n            sendQueuedCandidates(caller, onSignalSuccess, onSignalFailure);\n            pc = peerConns[caller].pc;\n            var sd = new RTCSessionDescription(msgData);\n            if (!sd) {\n                throw \"Could not create the RTCSessionDescription\";\n            }\n\n            logDebug(\"about to call initiating setRemoteDescription\");\n\n            try {\n                if (sdpRemoteFilter) {\n                    sd.sdp = sdpRemoteFilter(sd.sdp);\n                }\n                pc.setRemoteDescription(sd, function() {\n                    if (pc.connectDataConnection) {\n                        logDebug(\"calling connectDataConnection(5001,5002)\");\n\n                        pc.connectDataConnection(5001, 5002); // these are like ids for data channels\n                    }\n                }, function(message){\n                     logDebug(\"setRemoteDescription failed \", message);\n                 });\n            } catch (smdException) {\n                logDebug(\"setRemoteDescription failed \", smdException);\n            }\n            flushCachedCandidates(caller);\n        }\n\n        function processCandidateQueue(caller, msgData) {\n\n            if (peerConns[caller] && peerConns[caller].pc) {\n                processCandidateBody(caller, msgData);\n            }\n            else {\n                if (!peerConns[caller]) {\n                    queuedMessages[caller] = {\n                        candidates: []\n                    };\n                }\n                queuedMessages[caller].candidates.push(msgData);\n            }\n        }\n\n        switch (msgType) {\n            case \"sessionData\":\n                processSessionData(msgData.sessionData);\n                break;\n            case \"roomData\":\n                processRoomData(msgData.roomData);\n                break;\n            case \"iceConfig\":\n                processIceConfig(msgData.iceConfig);\n                break;\n            case \"forwardToUrl\":\n                if (msgData.newWindow) {\n                    window.open(msgData.forwardToUrl.url);\n                }\n                else {\n                    window.location.href = msgData.forwardToUrl.url;\n                }\n                break;\n            case \"offer\":\n                processOffer(caller, msgData);\n                break;\n            case \"reject\":\n                processReject(caller);\n                break;\n            case \"answer\":\n                processAnswer(caller, msgData);\n                break;\n            case \"candidate\":\n                processCandidateQueue(caller, msgData);\n                break;\n            case \"hangup\":\n                onRemoteHangup(caller);\n                clearQueuedMessages(caller);\n                break;\n            case \"error\":\n                self.showError(msgData.errorCode, msgData.errorText);\n                break;\n            default:\n                self.showError(self.errCodes.DEVELOPER_ERR, \"received unknown message type from server, msgType is \" + msgType);\n                return;\n        }\n\n        if (ackAcceptorFn) {\n            ackAcceptorFn(self.ackMessage);\n        }\n    }\n\n    /**\n     * Sets the presence state on the server.\n     * @param {String} state - one of 'away','chat','dnd','xa'\n     * @param {String} statusText - User configurable status string. May be length limited.\n     * @example   easyrtc.updatePresence('dnd', 'sleeping');\n     */\n    this.updatePresence = function(state, statusText) {\n\n        self.presenceShow = state;\n        self.presenceStatus = statusText;\n\n        if (self.webSocketConnected) {\n            sendSignalling(null, 'setPresence', {\n                setPresence: {\n                    'show': self.presenceShow,\n                    'status': self.presenceStatus\n                }\n            }, null);\n        }\n    };\n\n    /**\n     * Fetch the collection of session fields as a map. The map has the structure:\n     *  {key1: {\"fieldName\": key1, \"fieldValue\": value1}, ...,\n     *   key2: {\"fieldName\": key2, \"fieldValue\": value2}\n     *  }\n     * @returns {Object}\n     */\n    this.getSessionFields = function() {\n        return sessionFields;\n    };\n\n    /**\n     * Fetch the value of a session field by name.\n     * @param {String} name - name of the session field to be fetched.\n     * @returns the field value (which can be anything). Returns undefined if the field does not exist.\n     */\n    this.getSessionField = function(name) {\n        if (sessionFields[name]) {\n            return sessionFields[name].fieldValue;\n        }\n        else {\n            return undefined;\n        }\n    };\n\n    /**\n     * Returns an array of easyrtcid's of peers in a particular room.\n     * @param roomName\n     * @returns {Array} of easyrtcids or null if the client is not in the room.\n     * @example\n     *     var occupants = easyrtc.getRoomOccupants(\"default\");\n     *     var i;\n     *     for( i = 0; i < occupants.length; i++ ) {\n     *         console.log( occupants[i] + \" is in the room\");\n     *     }\n     */\n    this.getRoomOccupantsAsArray = function(roomName) {\n        if (!lastLoggedInList[roomName]) {\n            return null;\n        }\n        else {\n            return Object.keys(lastLoggedInList[roomName]);\n        }\n    };\n\n    /**\n     * Returns a map of easyrtcid's of peers in a particular room. You should only test elements in the map to see if they are\n     * null; their actual values are not guaranteed to be the same in different releases.\n     * @param roomName\n     * @returns {Object} of easyrtcids or null if the client is not in the room.\n     * @example\n     *      if( easyrtc.getRoomOccupantsAsMap(\"default\")[some_easyrtcid]) {\n     *          console.log(\"yep, \" + some_easyrtcid + \" is in the room\");\n     *      }\n     */\n    this.getRoomOccupantsAsMap = function(roomName) {\n        return lastLoggedInList[roomName];\n    };\n\n    /**\n     * Returns true if the ipAddress parameter was the address of a turn server. This is done by checking against information\n     * collected during peer to peer calls. Don't expect it to work before the first call, or to identify turn servers that aren't\n     * in the ice config.\n     * @param ipAddress\n     * @returns {boolean} true if ip address is known to be that of a turn server, false otherwise.\n     */\n    this.isTurnServer = function(ipAddress) {\n        return !!self._turnServers[ipAddress];\n    };\n\n    /**\n     * Returns true if the ipAddress parameter was the address of a stun server. This is done by checking against information\n     * collected during peer to peer calls. Don't expect it to work before the first call, or to identify turn servers that aren't\n     * in the ice config.\n     * @param {string} ipAddress\n     * @returns {boolean} true if ip address is known to be that of a stun server, false otherwise.\n     */\n    this.isStunServer = function(ipAddress) {\n        return !!self._stunServers[ipAddress];\n    };\n\n    /**\n     * Request fresh ice config information from the server.\n     * This should be done periodically by long running applications.\n     * @param {Function} callback is called with a value of true on success, false on failure.\n     */\n    this.getFreshIceConfig = function(callback) {\n        var dataToShip = {\n            msgType: \"getIceConfig\",\n            msgData: {}\n        };\n        if (!callback) {\n            callback = function() {\n            };\n        }\n        self.webSocket.json.emit(\"easyrtcCmd\", dataToShip,\n                function(ackMsg) {\n                    if (ackMsg.msgType === \"iceConfig\") {\n                        processIceConfig(ackMsg.msgData.iceConfig);\n                        callback(true);\n                    }\n                    else {\n                        self.showError(ackMsg.msgData.errorCode, ackMsg.msgData.errorText);\n                        callback(false);\n                    }\n                }\n        );\n    };\n\n    /**\n     * This method allows you to join a single room. It may be called multiple times to be in\n     * multiple rooms simultaneously. It may be called before or after connecting to the server.\n     * Note: the successCB and failureDB will only be called if you are already connected to the server.\n     * @param {String} roomName the room to be joined.\n     * @param {Object} roomParameters application specific parameters, can be null.\n     * @param {Function} successCB called once, with a roomName as it's argument, once the room is joined.\n     * @param {Function} failureCB called if the room can not be joined. The arguments of failureCB are errorCode, errorText, roomName.\n     */\n    this.joinRoom = function(roomName, roomParameters, successCB, failureCB) {\n        if (self.roomJoin[roomName]) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to join room \" + roomName + \" which you are already in.\");\n            return;\n        }\n\n        var newRoomData = {roomName: roomName};\n        if (roomParameters) {\n            try {\n                JSON.stringify(roomParameters);\n            } catch (error) {\n                self.showError(self.errCodes.DEVELOPER_ERR, \"non-jsonable parameter to easyrtc.joinRoom\");\n                throw \"Developer error, see application error messages\";\n            }\n            var parameters = {};\n            for (var key in roomParameters) {\n                if (roomParameters.hasOwnProperty(key)) {\n                    parameters[key] = roomParameters[key];\n                }\n            }\n            newRoomData.roomParameter = parameters;\n        }\n        var msgData = {\n            roomJoin: {}\n        };\n        var roomData;\n        var signallingSuccess, signallingFailure;\n        if (self.webSocket) {\n\n            msgData.roomJoin[roomName] = newRoomData;\n            signallingSuccess = function(msgType, msgData) {\n\n                roomData = msgData.roomData;\n                self.roomJoin[roomName] = newRoomData;\n                if (successCB) {\n                    successCB(roomName);\n                }\n\n                processRoomData(roomData);\n            };\n            signallingFailure = function(errorCode, errorText) {\n                if (failureCB) {\n                    failureCB(errorCode, errorText, roomName);\n                }\n                else {\n                    self.showError(errorCode, self.format(self.getConstantString(\"unableToEnterRoom\"), roomName, errorText));\n                }\n            };\n            sendSignalling(null, \"roomJoin\", msgData, signallingSuccess, signallingFailure);\n        }\n        else {\n            self.roomJoin[roomName] = newRoomData;\n        }\n\n    };\n\n    /**\n     * This function allows you to leave a single room. Note: the successCB and failureDB\n     *  arguments are optional and will only be called if you are already connected to the server.\n     * @param {String} roomName\n     * @param {Function} successCallback - A function which expects a roomName.\n     * @param {Function} failureCallback - A function which expects the following arguments: errorCode, errorText, roomName.\n     * @example\n     *    easyrtc.leaveRoom(\"freds_room\");\n     *    easyrtc.leaveRoom(\"freds_room\", function(roomName){ console.log(\"left the room\")},\n     *                       function(errorCode, errorText, roomName){ console.log(\"left the room\")});\n     */\n    this.leaveRoom = function(roomName, successCallback, failureCallback) {\n        var roomItem;\n        if (self.roomJoin[roomName]) {\n            if (!self.webSocket) {\n                delete self.roomJoin[roomName];\n            }\n            else {\n                roomItem = {};\n                roomItem[roomName] = {roomName: roomName};\n                sendSignalling(null, \"roomLeave\", {roomLeave: roomItem},\n                function(msgType, msgData) {\n                    var roomData = msgData.roomData;\n                    processRoomData(roomData);\n                    if (successCallback) {\n                        successCallback(roomName);\n                    }\n                },\n                        function(errorCode, errorText) {\n                            if (failureCallback) {\n                                failureCallback(errorCode, errorText, roomName);\n                            }\n                        });\n            }\n        }\n    };\n\n    /** Get a list of the rooms you are in. You must be connected to call this function.\n     * @returns {Object} A map whose keys are the room names\n     */\n    this.getRoomsJoined = function() {\n        var roomsIn = {};\n        var key;\n        for (key in self.roomJoin) {\n            if (self.roomJoin.hasOwnProperty(key)) {\n                roomsIn[key] = true;\n            }\n        }\n        return roomsIn;\n    };\n\n    /** Get server defined fields associated with a particular room. Only valid\n     * after a connection has been made.\n     * @param {String} roomName - the name of the room you want the fields for.\n     * @returns {Object} A dictionary containing entries of the form {key:{'fieldName':key, 'fieldValue':value1}} or undefined\n     * if you are not connected to the room.\n     */\n    this.getRoomFields = function(roomName) {\n        return (!fields || !fields.rooms || !fields.rooms[roomName]) ?\n                    undefined : fields.rooms[roomName];\n    };\n\n    /** Get server defined fields associated with the current application. Only valid\n     * after a connection has been made.\n     * @returns {Object} A dictionary containing entries of the form {key:{'fieldName':key, 'fieldValue':value1}}\n     */\n    this.getApplicationFields = function() {\n        return fields.application;\n    };\n\n    /** Get server defined fields associated with the connection. Only valid\n     * after a connection has been made.\n     * @returns {Object} A dictionary containing entries of the form {key:{'fieldName':key, 'fieldValue':value1}}\n     */\n    this.getConnectionFields = function() {\n        return fields.connection;\n    };\n\n    /**\n     * Supply a socket.io connection that will be used instead of allocating a new socket.\n     * The expected usage is that you allocate a websocket, assign options to it, call\n     * easyrtc.useThisSocketConnection, followed by easyrtc.connect or easyrtc.easyApp. Easyrtc will not attempt to\n     * close sockets that were supplied with easyrtc.useThisSocketConnection.\n     * @param {Object} alreadyAllocatedSocketIo A value allocated with the connect method of socket.io.\n     */\n    this.useThisSocketConnection = function(alreadyAllocatedSocketIo) {\n        preallocatedSocketIo = alreadyAllocatedSocketIo;\n    };\n\n    /** @private */\n    function processToken(msg) {\n        var msgData = msg.msgData;\n        logDebug(\"entered process token\");\n\n        if (msgData.easyrtcid) {\n            self.myEasyrtcid = msgData.easyrtcid;\n        }\n        if (msgData.field) {\n            fields.connection = msgData.field;\n        }\n        if (msgData.iceConfig) {\n            processIceConfig(msgData.iceConfig);\n        }\n\n        if (msgData.sessionData) {\n            processSessionData(msgData.sessionData);\n        }\n        if (msgData.roomData) {\n            processRoomData(msgData.roomData);\n        }\n        if (msgData.application.field) {\n            fields.application = msgData.application.field;\n        }\n    }\n\n    /** @private */\n    function sendAuthenticate(successCallback, errorCallback) {\n        //\n        // find our easyrtcsid\n        //\n        var cookies, target, i;\n        var easyrtcsid = null;\n\n        if (self.cookieId && document.cookie) {\n            cookies = document.cookie.split(/[; ]/g);\n            target = self.cookieId + \"=\";\n            for (i = 0; i < cookies.length; i++) {\n                if (cookies[i].indexOf(target) === 0) {\n                    easyrtcsid = cookies[i].substring(target.length);\n                }\n            }\n        }\n\n        var msgData = {\n            apiVersion: self.apiVersion,\n            applicationName: self.applicationName,\n            setUserCfg: collectConfigurationInfo(true)\n        };\n\n        if (!self.roomJoin) {\n            self.roomJoin = {};\n        }\n        if (self.presenceShow) {\n            msgData.setPresence = {\n                show: self.presenceShow,\n                status: self.presenceStatus\n            };\n        }\n        if (self.username) {\n            msgData.username = self.username;\n        }\n        if (self.roomJoin && !isEmptyObj(self.roomJoin)) {\n            msgData.roomJoin = self.roomJoin;\n        }\n        if (easyrtcsid) {\n            msgData.easyrtcsid = easyrtcsid;\n        }\n        if (credential) {\n            msgData.credential = credential;\n        }\n\n        self.webSocket.json.emit(\n            \"easyrtcAuth\",\n            {\n                msgType: \"authenticate\",\n                msgData: msgData\n            },\n            function(msg) {\n                var room;\n                if (msg.msgType === \"error\") {\n                    errorCallback(msg.msgData.errorCode, msg.msgData.errorText);\n                    self.roomJoin = {};\n                }\n                else {\n                    processToken(msg);\n                    if (self._roomApiFields) {\n                        for (room in self._roomApiFields) {\n                            if (self._roomApiFields.hasOwnProperty(room)) {\n                                enqueueSendRoomApi(room);\n                            }\n                        }\n                    }\n\n                    if (successCallback) {\n                        successCallback(self.myEasyrtcid);\n                    }\n                }\n            }\n        );\n    }\n\n    /** @private */\n    function connectToWSServer(successCallback, errorCallback) {\n        var i;\n        if (preallocatedSocketIo) {\n            self.webSocket = preallocatedSocketIo;\n        }\n        else if (!self.webSocket) {\n            try {\n               self.webSocket = io.connect(serverPath, connectionOptions);\n\n                if (!self.webSocket) {\n                    throw \"io.connect failed\";\n                }\n\n            } catch(socketErr) {\n                self.webSocket = 0;\n                errorCallback( self.errCodes.SYSTEM_ERROR, socketErr.toString());\n\n               return;\n            }\n        }\n        else {\n            for (i in self.websocketListeners) {\n                if (!self.websocketListeners.hasOwnProperty(i)) {\n                    continue;\n                }\n                self.webSocket.removeEventListener(self.websocketListeners[i].event,\n                        self.websocketListeners[i].handler);\n            }\n        }\n\n        self.websocketListeners = [];\n\n        function addSocketListener(event, handler) {\n            self.webSocket.on(event, handler);\n            self.websocketListeners.push({event: event, handler: handler});\n        }\n\n        addSocketListener(\"close\", function(event) {\n            logDebug(\"the web socket closed\");\n        });\n\n        addSocketListener('error', function(event) {\n            function handleErrorEvent() {\n                if (self.myEasyrtcid) {\n                    //\n                    // socket.io version 1 got rid of the socket member, moving everything up one level.\n                    //\n                    if (isSocketConnected(self.webSocket)) {\n                        self.showError(self.errCodes.SIGNAL_ERR, self.getConstantString(\"miscSignalError\"));\n                    }\n                    else {\n                        /* socket server went down. this will generate a 'disconnect' event as well, so skip this event */\n                        errorCallback(self.errCodes.CONNECT_ERR, self.getConstantString(\"noServer\"));\n                    }\n                }\n                else {\n                    errorCallback(self.errCodes.CONNECT_ERR, self.getConstantString(\"noServer\"));\n                }\n            }\n            handleErrorEvent();\n        });\n\n        function connectHandler(event) {\n            self.webSocketConnected = true;\n            if (!self.webSocket) {\n                self.showError(self.errCodes.CONNECT_ERR, self.getConstantString(\"badsocket\"));\n            }\n\n            logDebug(\"saw socket-server onconnect event\");\n\n            if (self.webSocketConnected) {\n                sendAuthenticate(successCallback, errorCallback);\n            }\n            else {\n                errorCallback(self.errCodes.SIGNAL_ERR, self.getConstantString(\"icf\"));\n            }\n        }\n\n        if (isSocketConnected(preallocatedSocketIo)) {\n            connectHandler(null);\n        }\n        else {\n            addSocketListener(\"connect\", connectHandler);\n        }\n\n        addSocketListener(\"easyrtcMsg\", onChannelMsg);\n        addSocketListener(\"easyrtcCmd\", onChannelCmd);\n        addSocketListener(\"disconnect\", function(/* code, reason, wasClean */) {\n\n            self.webSocketConnected = false;\n            updateConfigurationInfo = function() {}; // dummy update function\n            oldConfig = {};\n            disconnectBody();\n\n            if (self.disconnectListener) {\n                self.disconnectListener();\n            }\n        });\n    }\n\n    /**\n     * Connects to the EasyRTC signaling server. You must connect before trying to\n     * call other users.\n     * @param {String} applicationName is a string that identifies the application so that different applications can have different\n     *        lists of users. Note that the server configuration specifies a regular expression that is used to check application names\n     *        for validity. The default pattern is that of an identifier, spaces are not allowed.\n     * @param {Function} successCallback (easyrtcId, roomOwner) - is called on successful connect. easyrtcId is the\n     *   unique name that the client is known to the server by. A client usually only needs it's own easyrtcId for debugging purposes.\n     *       roomOwner is true if the user is the owner of a room. It's value is random if the user is in multiple rooms.\n     * @param {Function} errorCallback (errorCode, errorText) - is called on unsuccessful connect. if null, an alert is called instead.\n     *  The errorCode takes it's value from easyrtc.errCodes.\n     * @example\n     *   easyrtc.connect(\"my_chat_app\",\n     *                   function(easyrtcid, roomOwner){\n     *                       if( roomOwner){ console.log(\"I'm the room owner\"); }\n     *                       console.log(\"my id is \" + easyrtcid);\n     *                   },\n     *                   function(errorText){\n     *                       console.log(\"failed to connect \", erFrText);\n     *                   });\n     */\n    this.connect = function(applicationName, successCallback, errorCallback) {\n\n        // Detect invalid or missing socket.io\n        if (!io) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Your HTML has not included the socket.io.js library\");\n        }\n\n        if (!preallocatedSocketIo && self.webSocket) {\n            self.showError(self.errCodes.DEVELOPER_ERR, \"Attempt to connect when already connected to socket server\");\n            return;\n        }\n        pc_config = {};\n        closedChannel = null;\n        oldConfig = {}; // used internally by updateConfiguration\n        queuedMessages = {};\n        self.applicationName = applicationName;\n        fields = {\n            rooms: {},\n            application: {},\n            connection: {}\n        };\n\n        logDebug(\"attempt to connect to WebRTC signalling server with application name=\" + applicationName);\n\n        if (errorCallback === null) {\n            errorCallback = function(errorCode, errorText) {\n                self.showError(errorCode, errorText);\n            };\n        }\n\n        connectToWSServer(successCallback, errorCallback);\n    };\n};\n\nreturn new Easyrtc();\n\n})); \n\n/* global define, module, require, console */\n/*!\n  Script: easyrtc_app.js\n\n    Provides support file and data transfer support to easyrtc.\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define('easyrtc_app',['easyrtc'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory(require('easyrtc'));\n    } else {\n        //Vanilla JS, ensure dependencies are loaded correctly\n        if (typeof window.easyrtc !== 'object' || !window.easyrtc) {\n            throw new Error(\"easyrtc_app requires easyrtc\");\n        }\n        root.easyrtc = factory(window.easyrtc);\n  }\n}(this, function (easyrtc, undefined) {\n\n    \"use strict\";\n\n    /**\n     * This file adds additional methods to Easyrtc for simplifying the \n     * management of video-mediastream assignment.\n     * @class Easyrtc_App\n     */\n\n    /** @private */\n    var autoAddCloseButtons = true;\n\n    /** By default, the easyApp routine sticks a \"close\" button on top of each caller\n     * video object that it manages. Call this function(before calling easyApp) to disable that particular feature.\n     * @function\n     * @memberOf Easyrtc_App\n     * @example\n     *    easyrtc.dontAddCloseButtons();\n     */\n    easyrtc.dontAddCloseButtons = function() {\n        autoAddCloseButtons = false;\n    };\n\n    /**\n     * This is a helper function for the easyApp method. It manages the assignment of video streams\n     * to video objects. It assumes\n     * @param {String} monitorVideoId is the id of the mirror video tag.\n     * @param {Array} videoIds is an array of ids of the caller video tags.\n     * @private\n     */\n    function easyAppBody(monitorVideoId, videoIds) {\n\n        var videoIdsP = videoIds || [],\n            numPEOPLE = videoIds.length,\n            videoIdToCallerMap = {},\n            onCall = null, \n            onHangup = null;\n\n        /**\n         * Validates that the video ids correspond to dom objects.\n         * @param {String} monitorVideoId\n         * @param {Array} videoIds\n         * @returns {Boolean}\n         * @private\n         */\n        function validateVideoIds(monitorVideoId, videoIds) {\n            var i;\n            // verify that video ids were not typos.\n            if (monitorVideoId && !document.getElementById(monitorVideoId)) {\n                easyrtc.showError(easyrtc.errCodes.DEVELOPER_ERR, \"The monitor video id passed to easyApp was bad, saw \" + monitorVideoId);\n                return false;\n            }\n    \n            for (i in videoIds) {\n                if (!videoIds.hasOwnProperty(i)) {\n                    continue;\n                }\n                var name = videoIds[i];\n                if (!document.getElementById(name)) {\n                    easyrtc.showError(easyrtc.errCodes.DEVELOPER_ERR, \"The caller video id '\" + name + \"' passed to easyApp was bad.\");\n                    return false;\n                }\n            }\n            return true;\n        }\n\n\n        function getCallerOfVideo(videoObject) {\n            return videoIdToCallerMap[videoObject.id];\n        }\n\n        function setCallerOfVideo(videoObject, callerEasyrtcId) {\n            videoIdToCallerMap[videoObject.id] = callerEasyrtcId;\n        }\n\n        function videoIsFree(obj) {\n            var caller = getCallerOfVideo(obj);\n            return (caller === \"\" || caller === null || caller === undefined);\n        }\n\n        function getIthVideo(i) {\n            if (videoIdsP[i]) {\n                return document.getElementById(videoIdsP[i]);\n            }\n            else {\n                return null;\n            }\n        }\n\n        function showVideo(video, stream) {\n            easyrtc.setVideoObjectSrc(video, stream);\n            if (video.style.visibility) {\n                video.style.visibility = 'visible';\n            }\n        }\n\n        function hideVideo(video) {\n            easyrtc.setVideoObjectSrc(video, \"\");\n            video.style.visibility = \"hidden\";\n        }\n\n        if (!validateVideoIds(monitorVideoId, videoIdsP)) {\n            throw \"bad video element id\";\n        }\n\n        if (monitorVideoId) {\n            document.getElementById(monitorVideoId).muted = \"muted\";\n        }\n\n        easyrtc.addEventListener(\"roomOccupants\", \n            function(eventName, eventData) {\n                var i;\n                for (i = 0; i < numPEOPLE; i++) {\n                    var video = getIthVideo(i);\n                    if (!videoIsFree(video)) {\n                if( !easyrtc.isPeerInAnyRoom(getCallerOfVideo(video))){\n                           if( onHangup ) {\n                               onHangup(getCallerOfVideo(video), i);\n                           }\n                           setCallerOfVideo(video, null);\n                        }\n                    }\n                }\n            }\n        );\n\n        /** Sets an event handler that gets called when an incoming MediaStream is assigned \n         * to a video object. The name is poorly chosen and reflects a simpler era when you could\n         * only have one media stream per peer connection.\n         * @function\n         * @memberOf Easyrtc_App\n         * @param {Function} cb has the signature function(easyrtcid, slot){}\n         * @example\n         *   easyrtc.setOnCall( function(easyrtcid, slot){\n         *      console.log(\"call with \" + easyrtcid + \"established\");\n         *   });\n         */\n        easyrtc.setOnCall = function(cb) {\n            onCall = cb;\n        };\n\n        /** Sets an event handler that gets called when a call is ended.\n         * it's only purpose (so far) is to support transitions on video elements.\n         x     * this function is only defined after easyrtc.easyApp is called.\n         * The slot is parameter is the index into the array of video ids.\n         * Note: if you call easyrtc.getConnectionCount() from inside your callback\n         * it's count will reflect the number of connections before the hangup started.\n         * @function\n         * @memberOf Easyrtc_App\n         * @param {Function} cb has the signature function(easyrtcid, slot){}\n         * @example\n         *   easyrtc.setOnHangup( function(easyrtcid, slot){\n         *      console.log(\"call with \" + easyrtcid + \"ended\");\n         *   });\n         */\n        easyrtc.setOnHangup = function(cb) {\n            onHangup = cb;\n        };\n\n        /** \n          * Get the easyrtcid of the ith caller, starting at 0.\n          * @function\n          * @memberOf Easyrtc_App\n          * @param {number} i\n          * @returns {String}\n          */\n        easyrtc.getIthCaller = function(i) {\n            if (i < 0 || i >= videoIdsP.length) {\n                return null;\n            }\n            var vid = getIthVideo(i);\n            return getCallerOfVideo(vid);\n        };\n\n        /** \n          * This is the complement of getIthCaller. Given an easyrtcid,\n          * it determines which slot the easyrtc is in.\n          * @function\n          * @memberOf Easyrtc_App\n          * @param {string} easyrtcid \n          * @returns {number} or -1 if the easyrtcid is not a caller.\n          */\n        easyrtc.getSlotOfCaller = function(easyrtcid) {\n            var i;\n            for (i = 0; i < numPEOPLE; i++) {\n                if (easyrtc.getIthCaller(i) === easyrtcid) {\n                    return i;\n                }\n            }\n            return -1; // caller not connected\n        };\n\n        easyrtc.setOnStreamClosed(function(caller) {\n            var i;\n            for (i = 0; i < numPEOPLE; i++) {\n                var video = getIthVideo(i);\n                if (getCallerOfVideo(video) === caller) {\n                    hideVideo(video);\n                    setCallerOfVideo(video, \"\");\n                    if (onHangup) {\n                        onHangup(caller, i);\n                    }\n                }\n            }\n        });\n\n        //\n        // Only accept incoming calls if we have a free video object to display\n        // them in.\n        //\n        easyrtc.setAcceptChecker(function(caller, helper) {\n            var i;\n            for (i = 0; i < numPEOPLE; i++) {\n                var video = getIthVideo(i);\n                if (videoIsFree(video)) {\n                    helper(true);\n                    return;\n                }\n            }\n            helper(false);\n        });\n\n        easyrtc.setStreamAcceptor(function(caller, stream) {\n            var i;\n            if (easyrtc.debugPrinter) {\n                easyrtc.debugPrinter(\"stream acceptor called\");\n            }\n\n            var video;\n\n            for (i = 0; i < numPEOPLE; i++) {\n                video = getIthVideo(i);\n                if (getCallerOfVideo(video) === caller) {\n                    showVideo(video, stream);\n                    if (onCall) {\n                        onCall(caller, i);\n                    }\n                    return;\n                }\n            }\n\n            for (i = 0; i < numPEOPLE; i++) {\n                video = getIthVideo(i);\n                if (videoIsFree(video)) {\n                    setCallerOfVideo(video, caller);\n                    if (onCall) {\n                        onCall(caller, i);\n                    }\n                    showVideo(video, stream);\n                    return;\n                }\n            }\n            //\n            // no empty slots, so drop whatever caller we have in the first slot and use that one.\n            //\n            video = getIthVideo(0);\n            if (video) {\n                easyrtc.hangup(getCallerOfVideo(video));\n                showVideo(video, stream);\n                if (onCall) {\n                    onCall(caller, 0);\n                }\n            }\n\n            setCallerOfVideo(video, caller);\n        });\n\n        var addControls, parentDiv, closeButton, i;\n        if (autoAddCloseButtons) {\n\n            addControls = function(video) {\n                parentDiv = video.parentNode;\n                setCallerOfVideo(video, \"\");\n                closeButton = document.createElement(\"div\");\n                closeButton.className = \"easyrtc_closeButton\";\n                closeButton.onclick = function() {\n                    if (getCallerOfVideo(video)) {\n                        easyrtc.hangup(getCallerOfVideo(video));\n                        hideVideo(video);\n                        setCallerOfVideo(video, \"\");\n                    }\n                };\n                parentDiv.appendChild(closeButton);\n            };\n\n            for (i = 0; i < numPEOPLE; i++) {\n                addControls(getIthVideo(i));\n            }\n        }\n\n        var monitorVideo = null;\n        if (easyrtc.videoEnabled && monitorVideoId !== null) {\n            monitorVideo = document.getElementById(monitorVideoId);\n            if (!monitorVideo) {\n                console.error(\"Programmer error: no object called \" + monitorVideoId);\n                return;\n            }\n            monitorVideo.muted = \"muted\";\n            monitorVideo.defaultMuted = true;\n        }\n    }\n\n    /**\n     * Provides a layer on top of the easyrtc.initMediaSource and easyrtc.connect, assign the local media stream to\n     * the video object identified by monitorVideoId, assign remote video streams to\n     * the video objects identified by videoIds, and then call onReady. One of it's\n     * side effects is to add hangup buttons to the remote video objects, buttons\n     * that only appear when you hover over them with the mouse cursor. This method will also add the\n     * easyrtcMirror class to the monitor video object so that it behaves like a mirror.\n     * @function\n     * @memberOf Easyrtc_App\n     *  @param {String} applicationName - name of the application.\n     *  @param {String} monitorVideoId - the id of the video object used for monitoring the local stream.\n     *  @param {Array} videoIds - an array of video object ids (strings)\n     *  @param {Function} onReady - a callback function used on success. It is called with the easyrtcId this peer is known to the server as.\n     *  @param {Function} onFailure - a callback function used on failure (failed to get local media or a connection of the signaling server).\n     *  @example\n     *     easyrtc.easyApp('multiChat', 'selfVideo', ['remote1', 'remote2', 'remote3'],\n     *              function(easyrtcId){\n     *                  console.log(\"successfully connected, I am \" + easyrtcId);\n     *              },\n     *              function(errorCode, errorText){\n     *                  console.log(errorText);\n     *              });\n     */\n    easyrtc.easyApp = function(applicationName, monitorVideoId, videoIds, onReady, onFailure) {\n        \n        var gotMediaCallback = null,\n            gotConnectionCallback = null;\n\n        easyAppBody(monitorVideoId, videoIds);\n\n        easyrtc.setGotMedia = function(gotMediaCB) {\n            gotMediaCallback = gotMediaCB;\n        };\n\n        //\n        // try to restablish broken connections that weren't caused by a hangup\n        //\n        easyrtc.setPeerClosedListener( function(easyrtcid) {\n           setTimeout( function() {\n               if( easyrtc.getSlotOfCaller(easyrtcid)  >= 0 && easyrtc.isPeerInAnyRoom(easyrtcid)) {\n                    easyrtc.call(easyrtcid, function(){}, function() {}, function(){});\n               }\n           }, 1000);\n        });\n\n        /** Sets an event handler that gets called when a connection to the signaling\n         * server has or has not been made. Can only be called after calling easyrtc.easyApp.\n         * @function\n         * @memberOf Easyrtc_App\n         * @param {Function} gotConnectionCB has the signature (gotConnection, errorText)\n         * @example\n         *    easyrtc.setGotConnection( function(gotConnection, errorText){\n         *        if( gotConnection ){\n         *            console.log(\"Successfully connected to signaling server\");\n         *        }\n         *        else{\n         *            console.log(\"Failed to connect to signaling server because: \" + errorText);\n         *        }\n         *    });\n         */\n        easyrtc.setGotConnection = function(gotConnectionCB) {\n            gotConnectionCallback = gotConnectionCB;\n        };\n        \n        function nextInitializationStep(/* token */) {\n            if (gotConnectionCallback) {\n                gotConnectionCallback(true, \"\");\n            }\n            onReady(easyrtc.myEasyrtcid);\n        }\n\n        function postGetUserMedia() {\n            if (gotMediaCallback) {\n                gotMediaCallback(true, null);\n            }\n            if (monitorVideoId !== null) {\n                easyrtc.setVideoObjectSrc(document.getElementById(monitorVideoId), easyrtc.getLocalStream());\n            }\n            function connectError(errorCode, errorText) {\n                if (gotConnectionCallback) {\n                    gotConnectionCallback(false, errorText);\n                }\n                else if (onFailure) {\n                    onFailure(easyrtc.errCodes.CONNECT_ERR, errorText);\n                }\n                else {\n                    easyrtc.showError(easyrtc.errCodes.CONNECT_ERR, errorText);\n                }\n            }\n\n            easyrtc.connect(applicationName, nextInitializationStep, connectError);\n        }\n\n        var stream = easyrtc.getLocalStream(null);\n        if (stream) {\n            postGetUserMedia();\n        }\n        else {\n            easyrtc.initMediaSource(\n                    postGetUserMedia,\n                    function(errorCode, errorText) {\n                        if (gotMediaCallback) {\n                            gotMediaCallback(false, errorText);\n                        }\n                        else if (onFailure) {\n                            onFailure(easyrtc.errCodes.MEDIA_ERR, errorText);\n                        }\n                        else {\n                            easyrtc.showError(easyrtc.errCodes.MEDIA_ERR, errorText);\n                        }\n                    },\n                    null // default stream\n                );\n        }\n    };\n\nreturn easyrtc;\n\n})); // end of module wrapper\n;\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/easyrtc_lang.js":"/* global define, module, require */\r\n/*!\r\n  Script: easyrtc_lang.js\r\n\r\n    Provides lang file.\r\n\r\n  About: License\r\n\r\n    Copyright (c) 2016, Priologic Software Inc.\r\n    All rights reserved.\r\n\r\n    Redistribution and use in source and binary forms, with or without\r\n    modification, are permitted provided that the following conditions are met:\r\n\r\n        * Redistributions of source code must retain the above copyright notice,\r\n          this list of conditions and the following disclaimer.\r\n        * Redistributions in binary form must reproduce the above copyright\r\n          notice, this list of conditions and the following disclaimer in the\r\n          documentation and/or other materials provided with the distribution.\r\n\r\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n    POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        //RequireJS (AMD) build system\r\n        define(factory);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        //CommonJS build system\r\n        module.exports = factory();\r\n    } else {\r\n        root.easyrtc_lang = factory();\r\n  }\r\n}(this, function (undefined) {\r\n\r\n  \"use strict\";\r\n\r\nreturn {\r\n  \"unableToEnterRoom\":\"Unable to enter room {0} because {1}\" ,\r\n  \"resolutionWarning\": \"Requested video size of {0}x{1} but got size of {2}x{3}\",\r\n  \"badUserName\": \"Illegal username {0}\",\r\n  \"localMediaError\": \"Error getting local media stream: {0}\",\r\n  \"miscSignalError\": \"Miscellaneous error from signalling server. It may be ignorable.\",\r\n  \"noServer\": \"Unable to reach the EasyRTC signalling server.\",\r\n  \"badsocket\": \"Socket.io connect event fired with bad websocket.\",\r\n  \"icf\": \"Internal communications failure\",\r\n  \"statsNotSupported\":\"call statistics not supported by this browser, try Chrome.\",\r\n   \"noWebrtcSupport\":\"Your browser doesn't appear to support WebRTC.\",\r\n   \"gumFailed\":\"Failed to get access to local media. Error code was {0}.\",\r\n   \"requireAudioOrVideo\":\"At least one of audio and video must be provided\"   \r\n};\r\n\r\n}));","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/labs/desktop_capture_iframe_version.js":"\n//  This file is a modification of Muaz Khan's getScreenId.js. It uses loads an iframe \n//  pointed at Muaz Khan's page, and then communicates with that Iframe. You can also point\n//  it at other urls.\n//  \n//  Technically, it is possible to desktop capture without iframes and for a production system.\n//  However, this solution get will get you running with the minimal effort on your side.\n//  \n//  //\n//  \n// // Last time updated at July 29, 2014, 08:32:23\n// Latest file can be found here: https://cdn.webrtc-experiment.com/getScreenId.js\n\n// Muaz Khan         - www.MuazKhan.com\n// MIT License       - www.WebRTC-Experiment.com/licence\n// Documentation     - https://github.com/muaz-khan/WebRTC-Experiment/tree/master/getScreenId.js\n// Modified by Eric Davies Sept 1/ 2014.\n// \n// ______________\n// getScreenId.js\n\n/**\n * Provides a method for window/screen capture using an iframe.\n * This requires that your users install Muah Khans desktop extension.\n * Read the source code for more details.\n * @class Easyrtc_IframeCapture\n */\n\n\n\n(function() {\n   /** Create a local media stream for desktop capture.\n     * This will fail if a desktop capture extension is not installed.\n     * not granting permission.\n     * @function\n     * @memberOf Easyrtc_IframeCapture\n     * @param {function(Object)} successCallback - will be called with localmedia stream on success. \n     * @param {function(String,String)} errorCallback - is called with an error code and error description.\n     * @param {String} streamName - an optional name for the media source so you can use multiple cameras and screen share simultaneously.\n     * @param {String} iframeUrl - an optional url for the iframe. The default is to use Muaz Khan's.\n     * @example\n     *       easyrtc.initMediaSource(\n     *          function(mediastream){\n     *              easyrtc.setVideoObjectSrc( document.getElementById(\"mirrorVideo\"), mediastream);\n     *          },\n     *          function(errorCode, errorText){\n     *               easyrtc.showError(errorCode, errorText);\n     *          });\n     *\n     */\n    var iframeUrl =  'https://www.webrtc-experiment.com/getSourceId/';\n\n    easyrtc.initDesktopStream= function(successCallback, failureCallback, streamName) {\n        // for Firefox:\n        // sourceId == 'firefox'\n        // screen_constraints = {...}\n        \n        \n        \n        if (!!navigator.mozGetUserMedia) {\n            easyrtc._presetMediaConstraints = {\n                video: {\n                    mozMediaSource: 'window',\n                    mediaSource: 'window',\n                    maxWidth: 1920,\n                    maxHeight: 1080,\n                    minAspectRatio: 1.77\n                },\n                audio: false\n                };\n            easyrtc.initMediaSource(successCallback, failureCallback, streamName);\n            return;\n        }\n\n        postMessage();\n\n        var cb = function(event) {\n            if (!event.data) return;\n\n            if (event.data.chromeMediaSourceId) {\n                window.removeEventListener(\"message\", cb);\n                if (event.data.chromeMediaSourceId === 'PermissionDeniedError') {\n                    failureCallback(easyrtc.errCodes.MEDIA_ERR, 'permission-denied');\n                } else {\n                    easyrtc._presetMediaConstraints = {\n                        video: {\n                            mandatory: {\n                                chromeMediaSource:'desktop',\n                                chromeMediaSourceId: event.data.chromeMediaSourceId,\n                                maxWidth: 1920,\n                                maxHeight: 1080,\n                                minAspectRatio: 1.77\n                            }\n                        },\n                        audio: false\n                    }\n                    easyrtc.initMediaSource(successCallback, failureCallback, streamName);\n                }\n            }\n\n            if (event.data.chromeExtensionStatus) {\n                console.log(\"extension status is \", event.data.chromeExtensionStatus);  \n            }\n        };\n        easyrtc.desktopCaptureInstalled = null;\n        window.addEventListener('message', cb);\n    };\n\n\n    var iframe = document.createElement('iframe');\n    \n    function postMessage() {\n        if (!iframe.isLoaded) {\n            setTimeout(postMessage, 100);\n            return;\n        }\n\n        iframe.contentWindow.postMessage({\n            captureSourceId: true\n        }, '*');\n    }\n\n    iframe.onload = function() {\n        iframe.isLoaded = true;\n    };\n\n    iframe.src = iframeUrl;\n\n    iframe.style.display = 'none';\n    (document.body || document.documentElement).appendChild(iframe);\n})();\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/labs/desktop_capture_no_iframe_version.js":"//\n// This code was taken from: https://github.com/muaz-khan/WebRTC-Experiment/tree/master/Pluginfree-Screen-Sharing\n// and modified to fit with EasyRTC.\n//\n\n// todo: need to check exact chrome browser because opera/node-webkit also uses chromium framework\nvar isChrome = !!navigator.webkitGetUserMedia;\n\n// DetectRTC.js - github.com/muaz-khan/WebRTC-Experiment/tree/master/DetectRTC\n// Below code is taken from RTCMultiConnection-v1.8.js (http://www.rtcmulticonnection.org/changes-log/#v1.8)\n// and modified.\nvar DetectRTC = {};\n\n\n(function() {\n\n/**\n * Provides a method for window/screen capture using an iframe.\n * Please read the comments in the source code about setting the \n * chrome extension that this requires to be installed in each browser.\n * @class Easyrtc_No_IframeCapture\n */\n\n    var screenCallback;\n\n    DetectRTC.screen = {\n        supported: false,\n        getSourceId: function(callback) {\n            if (!callback)\n                throw '\"callback\" parameter is mandatory.';\n            screenCallback = callback;\n            window.postMessage('desktopcapture-get-sourceId', '*');\n        },\n        isChromeExtensionAvailable: function(callback) {\n            if (!callback) {\n                return;\n            }\n\n            if (DetectRTC.screen.supported) {\n                callback(true);\n            }\n\n            // ask extension if it is available\n            window.postMessage('desktopcapture-are-you-there', '*');\n\n            setTimeout(function() {\n                callback(DetectRTC.screen.supported);\n            }, 2000);\n        },\n        onMessageCallback: function(data) {\n            // \"cancel\" button is clicked\n            if (data == 'PermissionDeniedError') {\n                DetectRTC.screen.chromeMediaSource = 'PermissionDeniedError';\n                if (screenCallback) {\n                   return screenCallback('PermissionDeniedError');\n                }\n                else {\n                    throw new Error('PermissionDeniedError');\n                }\n            }\n\n            // extension notified his presence\n            if (data == 'desktopcapture-loaded') {\n                DetectRTC.screen.supported = true;\n            }\n\n            // extension shared temp sourceId\n            if (data.sourceId) {\n                DetectRTC.screen.sourceId = data.sourceId;\n                if (screenCallback) {\n                    screenCallback(null);\n                }\n            }\n        }\n    };\n\n    // check if desktop-capture extension installed.\n    if (window.postMessage && isChrome) {\n        DetectRTC.screen.isChromeExtensionAvailable(function(){});\n    }\n})();\n\nwindow.addEventListener('message', function(event) {\n    if (event.origin != window.location.origin) {\n        return;\n    }\n\n    DetectRTC.screen.onMessageCallback(event.data);\n});\n\n/**\n  * Check if desktop capture installed\n  * @function\n  * @memberOf Easyrtc_No_IframeCapture\n  * @return boolean\n  */ \neasyrtc.isDesktopCaptureInstalled = function() {\n    return DetectRTC.screen.supported;\n}\n\n  /** Create a local media stream for desktop capture.\n     * This will fail if a desktop capture extension is not installed.\n     * not granting permission.\n     * @function\n     * @memberOf Easyrtc_No_IframeCapture\n     * @param {function(HTMLMediaStream)} successCallback - will be called with localmedia stream on success.\n     * @param {function(String,String)} errorCallback - is called with an error code and error description.\n     * @param {String} streamName - an optional name for the media source so you can use multiple cameras and screen share simultaneously.\n     * @param {String} iframeUrl - an optional url for the iframe. The default is to use Muaz Khan's.\n     * @example\n     *       easyrtc.initDesktopStream(\n     *          function(mediastream){\n     *              easyrtc.setVideoObjectSrc( document.getElementById(\"mirrorVideo\"), mediastream);\n     *          },\n     *          function(errorCode, errorText){\n     *               easyrtc.showError(errorCode, errorText);\n     *          });\n     *\n     */\neasyrtc.initDesktopStream = function(successCallback, failureCallback, streamName) {\n    if (!easyrtc.isDesktopCaptureInstalled()) {\n        failureCallback(easyrtc.errCodes.DEVELOPER_ERR, \"Desktop capture plugin not installed\").\n                return;\n    }\n\n    DetectRTC.screen.getSourceId(function(error) {\n        if( error) {\n            failureCallback(easyrtc.errCodes.MEDIA_ERR, error);\n        }\n        else if (DetectRTC.screen.sourceId) {\n            easyrtc._presetMediaConstraints = {\n                video: {\n                    mandatory: {\n                        chromeMediaSource: 'desktop',\n                        chromeMediaSourceId: DetectRTC.screen.sourceId,\n                        maxWidth: 1920,\n                        maxHeight: 1080,\n                        minAspectRatio: 1.77\n                    }\n                },\n                audio: false\n            }\n            easyrtc.initMediaSource(successCallback, failureCallback, streamName);\n        }\n        else {\n            failureCallback(easyrtc.errCodes.MEDIA_CANCELLED, \"Desktop capture plugin not installed\");\n        }\n    });\n}\n\n/**\n * This method builds a function that can be attached to a button to install an extension.\n * The install will only work on a {@link https://support.google.com/webmasters/answer/34592?hl=en|Google Verified Website}\n * with a `link` tag pointing to the extension, which is required by chrome for\n * {@link https://developer.chrome.com/webstore/inline_installation|Inline Installations}.\n *\n * @function\n * @memberOf Easyrtc_No_IframeCapture\n * @example\n *\n * <link rel=\"chrome-webstore-item\" href=\"https://chrome.google.com/webstore/detail/bemabaogbdfpbkkganibcmhbgjogabfj\" id=\"custom-app-id\" />\n *\n * easyrtc.chromeInstall(\"custom-app_id\", function() {\n *         // success\n *     },\n *     function(errorCode, errorText) {\n *         // failure\n *     });\n *\n * @param  {String} extensionId The id of the `link` tag pointing to your extension.\n * @param  {Function} successCallback Function to call on success.\n * @param  {Function} failureCallback Function to call on failure.  Will pass argument `errorCode` and `errorMessage`.\n */\neasyrtc.chromeInstaller = function(extensionId, successCallback, failureCallback) {\n    return function() {\n        var el, url;\n        if( !navigator.webkitGetUserMedia ||\n            !window.chrome ||\n            !chrome.webstore ||\n            !chrome.webstore.install ) {\n            failureCallback(easyrtc.errCodes.DEVELOPER_ERR, \"Can't install plugin on non-chrome browsers\");\n        }\n        else {\n            try {\n                var el = document.querySelector('head link#' + extensionId);\n\n                if ( ! el) throw new Error(\"Can't find a `link` element in `head` with id `\"+extensionId+\"`\");\n\n                // get the chrome extension url from the link's href attribute\n                var url = el.attributes.href.value;\n\n                chrome.webstore.install(url, successCallback, function(error) {\n                    failureCallback(easyrtc.errCodes.DEVELOPER_ERR, error);\n                });\n\n            }\n            catch (error) {\n                failureCallback(easyrtc.errCodes.DEVELOPER_ERR, error.message);\n            }\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/labs/easyrtc_rates.js":"/* global define, module, require, console */\n/*!\n  Script: easyrtc_rates.js\n\n    This code builds sdp filter functions\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define(['easyrtc'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory(require('easyrtc'));\n    } else {\n        //Vanilla JS, ensure dependencies are loaded correctly\n        if (typeof window.easyrtc !== 'object' || !window.easyrtc) {\n            throw new Error(\"easyrtc_rates requires easyrtc\");\n        }\n        root.easyrtc = factory(window.easyrtc);\n  }\n}(this, function (easyrtc, undefined) {\n\n\"use strict\";\n    /**\n     * Provides methods for building SDP filters. SDP filters can be used\n     * to control bit rates.\n     * @class Easyrtc_Rates\n     */\n\n    function buildSdpFilter(options, isLocal) {\n\n        var audioSendBitrate = options.audioSendBitrate;\n        var audioRecvBitrate = options.audioRecvBitrate;\n        var videoRecvBitrate = options.videoRecvBitrate;\n        var videoSendBitrate = options.videoSendBitrate;\n        var videoSendInitialBitrate = options.videoSendInitialBitrate;\n        var audioSendCodec = options.audioSendCodec || '';\n        var audioRecvCodec = options.audioRecvCodec || '';\n        var videoSendCodec = options.videoSendCodec || '';\n        var videoRecvCodec = options.videoRecvCodec || '';\n        var stereo = options.stereo;\n        function trace(arg) {\n            console.log(\"trace:\" + arg);\n        }\n        // these functions were cribbed from the google apprtc.appspot.com demo.\n\n        function findLineInRange(sdpLines, startLine, endLine, prefix, substr) {\n            var realEndLine = endLine !== -1 ? endLine : sdpLines.length;\n            for (var i = startLine; i < realEndLine; ++i) {\n                if (sdpLines[i].indexOf(prefix) === 0) {\n                    if (!substr || sdpLines[i].toLowerCase().indexOf(substr.toLowerCase()) !== -1) {\n                        return i;\n                    }\n                }\n            }\n            return null;\n        }\n\n        function findLine(sdpLines, prefix, substr) {\n            return findLineInRange(sdpLines, 0, -1, prefix, substr);\n        }\n\n        function preferBitRate(sdp, bitrate, mediaType) {\n            var sdpLines = sdp.split('\\r\\n');\n            var mLineIndex = findLine(sdpLines, 'm=', mediaType);\n            if (mLineIndex === null) {\n                trace('Failed to add bandwidth line to sdp, as no m-line found');\n                return sdp;\n            }\n            var nextMLineIndex = findLineInRange(sdpLines, mLineIndex + 1, -1, 'm=');\n            if (nextMLineIndex === null) {\n                nextMLineIndex = sdpLines.length;\n            }\n            var cLineIndex = findLineInRange(sdpLines, mLineIndex + 1, nextMLineIndex, 'c=');\n            if (cLineIndex === null) {\n                trace('Failed to add bandwidth line to sdp, as no c-line found');\n                return sdp;\n            }\n            var bLineIndex = findLineInRange(sdpLines, cLineIndex + 1, nextMLineIndex, 'b=AS');\n            if (bLineIndex) {\n                sdpLines.splice(bLineIndex, 1);\n            }\n            var bwLine = 'b=AS:' + bitrate;\n            sdpLines.splice(cLineIndex + 1, 0, bwLine);\n            sdp = sdpLines.join('\\r\\n');\n            return sdp;\n        }\n\n        function setDefaultCodec(mLine, payload) {\n            var elements = mLine.split(' ');\n            var newLine = [];\n            var index = 0;\n            for (var i = 0; i < elements.length; i++) {\n                if (index === 3) {\n                    newLine[index++] = payload;\n                }\n                if (elements[i] !== payload) {\n                    newLine[index++] = elements[i];\n                }\n            }\n            return newLine.join(' ');\n        }\n\n        function maybeSetAudioSendBitRate(sdp) {\n            if (!audioSendBitrate) {\n                return sdp;\n            }\n            trace('Prefer audio send bitrate: ' + audioSendBitrate);\n            return preferBitRate(sdp, audioSendBitrate, 'audio');\n        }\n\n        function maybeSetAudioReceiveBitRate(sdp) {\n            if (!audioRecvBitrate) {\n                return sdp;\n            }\n            trace('Prefer audio receive bitrate: ' + audioRecvBitrate);\n            return preferBitRate(sdp, audioRecvBitrate, 'audio');\n        }\n\n        function maybeSetVideoSendBitRate(sdp) {\n            if (!videoSendBitrate) {\n                return sdp;\n            }\n            trace('Prefer video send bitrate: ' + videoSendBitrate);\n            return preferBitRate(sdp, videoSendBitrate, 'video');\n        }\n\n        function maybeSetVideoReceiveBitRate(sdp) {\n            if (!videoRecvBitrate) {\n                return sdp;\n            }\n            trace('Prefer video receive bitrate: ' + videoRecvBitrate);\n            return preferBitRate(sdp, videoRecvBitrate, 'video');\n        }\n        \n        function getCodecPayloadType(sdpLine) {\n            var pattern = new RegExp('a=rtpmap:(\\\\d+) \\\\w+\\\\/\\\\d+');\n            var result = sdpLine.match(pattern);\n            return (result && result.length === 2) ? result[1] : null;\n        }\n\n        function maybeSetVideoSendInitialBitRate(sdp) {\n            if (!videoSendInitialBitrate) {\n                return sdp;\n            }\n            var maxBitrate = videoSendInitialBitrate;\n            if (videoSendBitrate) {\n                if (videoSendInitialBitrate > videoSendBitrate) {\n                    trace('Clamping initial bitrate to max bitrate of ' + videoSendBitrate + ' kbps.');\n                    videoSendInitialBitrate = videoSendBitrate;\n                }\n                maxBitrate = videoSendBitrate;\n            }\n            var sdpLines = sdp.split('\\r\\n');\n            var mLineIndex = findLine(sdpLines, 'm=', 'video');\n            if (mLineIndex === null) {\n                trace('Failed to find video m-line');\n                return sdp;\n            }\n            var vp8RtpmapIndex = findLine(sdpLines, 'a=rtpmap', 'VP8/90000');\n            var vp8Payload = getCodecPayloadType(sdpLines[vp8RtpmapIndex]);\n            var vp8Fmtp = 'a=fmtp:' + vp8Payload + ' x-google-min-bitrate=' + videoSendInitialBitrate.toString() + '; x-google-max-bitrate=' + maxBitrate.toString();\n            sdpLines.splice(vp8RtpmapIndex + 1, 0, vp8Fmtp);\n            return sdpLines.join('\\r\\n');\n        }\n\n        function preferCodec(sdp, codec, codecType){\n            var sdpLines = sdp.split('\\r\\n');\n            var mLineIndex = findLine(sdpLines, 'm=', codecType);\n            if (mLineIndex === null) {\n                return sdp;\n            }\n            //\n            // there are two m= lines in the sdp, one for audio, one for video.\n            // the audio one comes first. when we search for codecs for audio, we\n            // want stop before we enter the section for video, hence we'll hunt \n            // for that subsequent m= line before we look for codecs. Otherwise,\n            // you could ask for a audio codec of VP9.\n            //\n            var mBottom = findLineInRange(sdpLines, mLineIndex+1, -1, \"m=\") || -1;\n\n            var codecIndex = findLineInRange(sdpLines, mLineIndex, mBottom, 'a=rtpmap', codec);\n            if (codecIndex) {\n                var payload = getCodecPayloadType(sdpLines[codecIndex]);\n                if (payload) {\n                    sdpLines[mLineIndex] = setDefaultCodec(sdpLines[mLineIndex], payload);\n                }\n            }\n            sdp = sdpLines.join('\\r\\n');\n            return sdp;\n        } \n\n        function maybePreferVideoSendCodec(sdp) {\n            if (videoSendCodec === '') {\n                trace('No preference on video send codec.');\n                return sdp;\n            }\n            trace('Prefer video send codec: ' + videoSendCodec);\n            return preferCodec(sdp, videoSendCodec, 'video');\n        }\n\n        function maybePreferVideoReceiveCodec(sdp) {\n            if (videoRecvCodec === '') {\n                trace('No preference on video receive codec.');\n                return sdp;\n            }\n            trace('Prefer video receive codec: ' + videoRecvCodec);\n            return preferCodec(sdp, videoRecvCodec,'video');\n        } \n\n        function maybePreferAudioSendCodec(sdp) {\n            if (audioSendCodec === '') {\n                trace('No preference on audio send codec.');\n                return sdp;\n            }\n            trace('Prefer audio send codec: ' + audioSendCodec);\n            return preferCodec(sdp, audioSendCodec, 'audio');\n        }\n\n        function maybePreferAudioReceiveCodec(sdp) {\n            if (audioRecvCodec === '') {\n                trace('No preference on audio receive codec.');\n                return sdp;\n            }\n            trace('Prefer audio receive codec: ' + audioRecvCodec);\n            return preferCodec(sdp, audioRecvCodec, 'audio');\n        } \n\n        function addStereo(sdp) {\n            var sdpLines = sdp.split('\\r\\n');\n            var opusIndex = findLine(sdpLines, 'a=rtpmap', 'opus/48000');\n            var opusPayload;\n            if (opusIndex) {\n                opusPayload = getCodecPayloadType(sdpLines[opusIndex]);\n            }\n            var fmtpLineIndex = findLine(sdpLines, 'a=fmtp:' + opusPayload.toString());\n            if (fmtpLineIndex === null) {\n                return sdp;\n            }\n            sdpLines[fmtpLineIndex] = sdpLines[fmtpLineIndex].concat('; stereo=1');\n            sdp = sdpLines.join('\\r\\n');\n            return sdp;\n        }\n\n        if( isLocal ) {\n            return function(insdp) {\n                console.log(\"modifying local sdp\");\n                var sdp;\n                sdp = maybePreferAudioReceiveCodec(insdp);\n                sdp = maybePreferVideoReceiveCodec(insdp);\n                sdp = maybeSetAudioReceiveBitRate(sdp);\n                sdp = maybeSetVideoReceiveBitRate(sdp);\n                //if( sdp != insdp ) {\n                //    console.log(\"changed the sdp from \\n\" + insdp + \"\\nto\\n\" + sdp);\n                //}\n                return sdp;\n            };\n        }\n        else {\n            return function(insdp) {\n                console.log(\"modifying remote sdp\");\n                var sdp = maybePreferAudioSendCodec(insdp);\n                var sdp = maybePreferVideoSendCodec(insdp);\n                sdp = maybeSetAudioSendBitRate(sdp);\n                sdp = maybeSetVideoSendBitRate(sdp);\n                sdp = maybeSetVideoSendInitialBitRate(sdp);\n                if (stereo) {\n                    sdp = addStereo(sdp);\n                }\n                //if( sdp != insdp ) {\n                //    console.log(\"changed the sdp from \\n\" + insdp + \"\\nto\\n\" + sdp);\n                //}\n                return sdp;\n            };\n        }\n    }\n\n    /**\n     *  This function returns an sdp filter function.\n     * @function\n     * @memberOf Easyrtc_Rates\n     * @param options A map that optionally includes values for the following keys: audioRecvCodec, audioRecvBitrate, videoRecvBitrate, videoRecvCodec\n     * @returns {Function} which takes an SDP string and returns a modified SDP string.\n     */\n    easyrtc.buildLocalSdpFilter = function (options) {\n        return buildSdpFilter(options, true);\n    };\n\n    /**\n     * This function returns an sdp filter function.\n     * @function\n     * @memberOf Easyrtc_Rates\n     * @param options A map that optionally includes values for the following keys: stereo, audioSendCodec, audioSendBitrate, videoSendBitrate, videoSendInitialBitRate, videoRecvCodec\n     * @returns {Function} which takes an SDP string and returns a modified SDP string.\n     */\n    easyrtc.buildRemoteSdpFilter = function(options) {\n        return buildSdpFilter(options, false);\n    };\n\nreturn easyrtc;\n\n}));\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/labs/easyrtc_recorder.js":"/* global define, module, require, console */\n/*!\n  Script: easyrtc_recorder.js\n\n    This code demonstrate recording of local and remote streams.\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\"use strict\";\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define(['easyrtc'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory(require('easyrtc'));\n    } else {\n        //Vanilla JS, ensure dependencies are loaded correctly\n        if (typeof window.easyrtc !== 'object' || !window.easyrtc) {\n            throw new Error(\"easyrtc_recorder requires easyrtc\");\n        }\n        root.easyrtc = factory(window.easyrtc);\n  }\n}(this, function (easyrtc, undefined) {\n\n    /**\n     * Provides methods for building MediaStream recorders.\n     * @class Easyrtc_Recorder\n     */\n\n\n   /**\n     * Determines if recording is supported by the browser. \n     * @function\n     * @memberOf Easyrtc_Recorder\n     * @returns true if recording is supported.\n     */\n   easyrtc.supportsRecording = function() {\n        return (typeof MediaRecorder !== \"undefined\" && navigator.getUserMedia );\n   };\n\n   /**\n    * Check if a particular codec can be used for recording.\n    * @function\n    * @memberOf Easyrtc_Recorder\n    * @param {String} codecName, either \"vp8\" or \"vp9 or \"h264\"\n    * @returns true if the type can be used, or if the browser doesn't\n    *  support a method to find out.\n    */ \n   easyrtc.isRecordingTypeSupported = function(videoCodecName) {\n       var mimeType = \"video/webm;codecs=\" + videoCodecName;\n       if( MediaRecorder.isTypeSupported ) {\n           // chrome definitely, maybe firefox\n           return MediaRecorder.isTypeSupported(mimeType);\n       }\n       else if( MediaRecorder.isMimeTypeSupported ) {\n           // maybe firefox\n           return MediaRecorder.isMimeTypeSupported(mimeType);\n       }\n       else {\n          if( typeof easyrtc.hasNoRecordTypeCheck === \"undefined\") {\n             easyrtc.hasNoRecordTypeCheck = true;\n             window.alert(\"This browser doesn't know what media types it supports. Assuming all types.\");\n          }\n          return true;\n       }\n   };\n\n   var mimeType;\n\n   /**\n     * Set the desired codec for the video encoding. \n     * @function\n     * @memberOf Easyrtc_Recorder\n     * @param {String} codecName, either \"vp8\" or \"vp9 or \"h264\"\n     * @returns true if the type can be used.\n     */ \n   easyrtc.setRecordingVideoCodec = function(videoCodecName) {\n       if( !easyrtc.supportsRecording ) {\n           return false;\n       }\n       if(easyrtc.isRecordingTypeSupported(videoCodecName)) {\n           mimeType = \"video/webm;codecs=\" + videoCodecName;\n           return true;\n       }\n       else {\n          return false;\n       }\n   };\n\n   if( easyrtc.supportsRecording()) {\n       easyrtc.setRecordingVideoCodec(\"vp8\");\n   }\n\n   /**\n     * Create a recording object and attach a media stream to it.\n     * @function\n     * @memberOf Easyrtc_Recorder\n     * @param  {HTMLMediaStream} mediaStream \n     * @returns a recorder object or null if recording not supported.\n     */\n    function startRecording( mediaStream) {\n\n        if( !easyrtc.supportsRecording ) {\n           console.log(\"recording not supported by your browser\");\n           return null;\n        }\n\n        var mediaRecorder = new MediaRecorder(mediaStream, {mimeType: mimeType});\n        if( !mediaRecorder ) {\n           console.log(\"no media recorder\");\n           return;\n        }\n        mediaRecorder.start();\n\n        mediaRecorder.onerror = function(e) {\n           console.log(\"Media recording error:\", e);\n        }\n\n        mediaRecorder.onwarning = function(e) {\n           console.log(\"Media recording error:\", e);\n        }\n    \n        mediaRecorder.onstart = function(e) {\n           console.log(\"Media recording started\");\n        }\n\n        mediaRecorder.onstop = function(e) {\n           console.log(\"Media recording stopped\");\n        }\n\n        return mediaRecorder;\n   };\n\n   /** This method creates a media recorder and populates it's ondataavailable\n     * method so that your own callback gets called with the data.\n     * Use the media recorder's start(), stop(), pause() and resume() methods\n     * on the returned object.\n     * @function\n     * @memberOf Easyrtc_Recorder\n     * @param {HTMLMediaStream} mediaStream a local or remote media stream.\n     * @param {Function} dataCallback a function to receive the webm data from.\n     */\n   easyrtc.recordToCallback = function (mediaStream, dataCallback) {\n       var mediaRecorder = startRecording(mediaStream);\n       if( !mediaRecorder) {\n           return null;\n       }\n       mediaRecorder.ondataavailable = function(e) {\n           dataCallback(e.data);\n       }\n       return mediaRecorder;\n   };\n\n   /** This method creates a media recorder that builds a blob \n    * Use the media recorder's start(), stop(), pause() and resume() methods\n    * on the returned object.\n    * @function\n    * @memberOf Easyrtc_Recorder\n    * @param  {HTMLMediaStream} mediaStream a local or remote media stream.\n    * @param {Function} blobCallback a callback function that gets called with a\n    *    blob once you invoke the stop method.\n    **/\n   easyrtc.recordToBlob = function(mediaStream, blobCallback) {\n       var chunks = [];\n\n       function dataConsumer(chunk) {\n          chunks.push(chunk);\n       }\n\n       var mediaRecorder = easyrtc.recordToCallback(mediaStream,\n              dataConsumer);\n\n       if( !mediaRecorder) {\n           return null;\n       }\n\n       mediaRecorder.onstop = function() {\n            blobCallback( new Blob(chunks, {type:\"video/webm\"}));\n            chunks = [];\n       }\n       return mediaRecorder;\n   };\n\n   /** This method creates a media recorder that builds a file.\n    * Use the media recorder's start(), stop(), pause() and resume() methods\n    * on the returned object.\n    * @function\n    * @memberOf Easyrtc_Recorder\n    * @param {HTMLMediaStream} a local or remote media stream.\n    * @param {Object} downloadLink an anchor tag to attach the file to.\n    * @param {String} basename the name of the file. A .webm will be appended\n    *    to the file if its not already present. The file doesn't get written\n    *    until you call the mediaRecorder's stop method.\n    **/\n   easyrtc.recordToFile = function(mediaStream, downloadLink, basename) {\n       function blobCallback( blob ) {\n           var videoURL = window.URL.createObjectURL(blob);\n          \n           downloadLink.href = videoURL;\n           downloadLink.appendChild(document.createTextNode(basename));\n    \n           var name = basename + ((basename.indexOf(\".webm\")>0)?\"\": \".webm\") ;\n           downloadLink.setAttribute( \"download\", name);\n           downloadLink.setAttribute( \"name\", name);\n       }\n\n       downloadLink.innerHTML = \"\";\n       var mediaRecorder = easyrtc.recordToBlob(mediaStream, blobCallback);\n       return mediaRecorder;\n   };\n\nreturn easyrtc;\n\n}));\n\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/api/labs/easyrtc_sc.js":"/* global define, module, require */\n/*!\n  Script: easyrtc_sc.js\n\n    Patch easyrtc media constraints for sharing screen Chrome using \n    the experimental chromeMediaSource and chromeMediaSourceId\n    properties.\n\n  About: License\n\n    Copyright (c) 2016, Priologic Software Inc.\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n        * Redistributions of source code must retain the above copyright notice,\n          this list of conditions and the following disclaimer.\n        * Redistributions in binary form must reproduce the above copyright\n          notice, this list of conditions and the following disclaimer in the\n          documentation and/or other materials provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n    POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //RequireJS (AMD) build system\n        define(['easyrtc'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        //CommonJS build system\n        module.exports = factory(require('easyrtc'));\n    } else {\n        //Vanilla JS, ensure dependencies are loaded correctly\n        if (typeof window.easyrtc !== 'object' || !window.easyrtc) {\n            throw new Error(\"easyrtc_sc requires easyrtc\");\n        }\n        root.easyrtc_sc = factory(window.easyrtc);\n  }\n}(this, function (easyrtc, undefined) {\n\n\"use strict\";\n\n    var easyrtc_sc;\n\n    var getUserMediaConstraints = easyrtc.getUserMediaConstraints;\n    easyrtc.getUserMediaConstraints = function () {\n\n        var constraints = getUserMediaConstraints();\n\n        // Apply screen constraints\n        if ( \n            constraints.video &&\n                constraints.video.mandatory &&\n                    constraints.video.mandatory.chromeMediaSource === 'screen' &&\n                        easyrtc_sc.chromeMediaSource === 'desktop'\n        ) {\n            constraints.video.mandatory.chromeMediaSource = easyrtc_sc.chromeMediaSource;\n            constraints.video.mandatory.chromeMediaSourceId = easyrtc_sc.chromeMediaSourceId;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * EasyRTC Sceen Capture api.\n     * @note Require EasyRTC Chome Extension (see easyrtc_sc/README.md dir)\n     */\n    easyrtc_sc = {\n\n        // chromeMedia extension prop\n        chromeMedia: null,           // Chrome Extention listener\n        chromeMediaExtention: null,  // Chrome Extention availability\n        chromeMediaSource: 'screen', // constraint value for video chromeMediaSource \n        chromeMediaSourceId: null,   // constraint value for video chromeMediaSourceId \n\n        /**\n         * Request screenshare stream via EasyRTC chrome extension if available or \n         * fallback on chrome experimental screen share feature then fail if not avaialble.\n         * @param {function(Object)} successCallback - will be called with localmedia stream on success. \n         * @param {function(String,String)} errorCallback - is called with an error code and error description.\n         *\n         * @example\n         * easyrtc_sc.getUserScreen(\n         *      function () {\n         *          console.log('ok', arguments);\n         *      },\n         *      function (error) {\n         *          console.log('error', error);\n         *      }\n         *  );\n         */\n        getUserScreen: function (onSuccess, onFailure) {\n\n            function requestUserScreen() {\n\n                easyrtc.enableAudio(false);\n                easyrtc.enableVideo(true);\n                easyrtc.setScreenCapture();\n                \n                easyrtc.initMediaSource(\n                    onSuccess,\n                    onFailure\n                );\n            }\n\n            function requestUserScreenId() {\n\n                // Handle Permission Denied Errore\n                if (easyrtc_sc.chromeMediaSource === 'PermissionDeniedError') {\n                    onFailure('PermissionDeniedError');\n\n                } else if (easyrtc_sc.chromeMediaSourceId) {\n                    requestUserScreen();\n\n                } else {\n\n                    // Request extension chromeMediaSourceId value\n                    if (easyrtc_sc.chromeMediaSourceId === null) {\n                        window.postMessage('get-sourceId', '*');\n                        easyrtc_sc.chromeMediaSourceId = false;\n                    }\n\n                    setTimeout(requestUserScreenId, 1000);\n                }\n            }\n\n\n            if (!easyrtc.supportsGetUserMedia()) {\n\n                onFailure(\"Do not support getUserMedia\");\n\n            } else if (easyrtc.localScreenStream) {\n\n                if (onSuccess) {\n                \t// Make it async anyway\n                    setTimeout(function () {\n                        onSuccess(easyrtc_sc.localScreenStream);\n                    });\n                }\n\n            } else {\n\n                easyrtc_sc.isChromeExtensionAvailable(function (isAvailable) {\n                    if (isAvailable) {\n                        requestUserScreenId();\n                    } else {\n                        requestUserScreen();\n                    }\n                });\n            }\n        },\n\n        /**\n         * Install a chrome exention using appid.\n         * - Need to be inside a click event\n         * - App host need to be whitelisted inside appstore.\n         *\n         * @param {String} appid - google chrome webstore unique app id.\n         * @param {function(Object)} successCallback - will be called with localmedia stream on success. \n         * @param {function(String,String)} errorCallback - is called with an error code and error description.\n         *\n         * @example\n         *\n         * document.body.addEventListener('click', function () {\n         *     easyrtc_sc.installChromeExtension(\n         *          'hpmoipogpkhegoblaoomcmjiijipjnfg',\n         *          function () {\n         *              console.log('ok', arguments);\n         *          },\n         *          function (error) {\n         *              console.log('error', error);\n         *          }\n         *      );\n         *  });\n         */\n        installChromeExtension: function (appid, onSucess, onFailure) {\n\n            window.chrome.webstore.install(\n                'https://chrome.google.com/webstore/detail/'+ appid, \n                onSucess, \n                onFailure\n            );\n        },\n\n        /**\n         * Check if easyRTC Chrome version is valid and support chrome extension.\n         * @return bool true if valid else false.\n         */\n    \tisChrome: function () {\n            return window.navigator.webkitGetUserMedia && window.chrome &&\n                    window.chrome.webstore && window.chrome.webstore.install;\n        },\n\n        /**\n         * Check if easyRTC Chrome extension is available.\n         * @param {String} callback gets boolean, true if Chrome extension is available.\n         */\n        isChromeExtensionAvailable: function (callback) {\n\n            callback = callback || function () {};\n\n            if (!easyrtc_sc.isChrome()) {\n\n                callback(false);\n\n            // Init postMessage listener\n            } else {\n\n                if (!easyrtc_sc.chromeMedia) {\n\n                    // Save listener for future CG\n                    easyrtc_sc.chromeMedia = easyrtc_sc.chromeExtentionListener.bind(easyrtc_sc);\n                    window.addEventListener('message', easyrtc_sc.chromeMedia);\n                }\n\n                // Check cache\n                if (easyrtc_sc.chromeMediaExtention) {\n                    callback(true);\n\n                // Send message to extension\n                } else {\n\n                    // ask extension if it is available\n                   \twindow.postMessage('is-extension-loaded', '*');\n\n                    // Under 2000 ms may create failure due chrome exention response delay.\n                    setTimeout(function () {\n                        easyrtc_sc.chromeMediaExtention = easyrtc_sc.chromeMediaSource === 'desktop';\n                        callback(easyrtc_sc.chromeMediaExtention);\n                    }, 2000); \n                }                \n            }\n        },\n\n        chromeExtentionListener: function (event) {\n\n            if (event.origin !== window.location.origin) {\n                return;\n            }\n\n            // \"cancel\" button is clicked\n            if (event.data === 'PermissionDeniedError') {\n                easyrtc_sc.chromeMediaSource = 'PermissionDeniedError';\n            \n            // extension notified his presence\n            } else if (event.data === 'extension-loaded') {\n                easyrtc_sc.chromeMediaSource = 'desktop';\n            \n            // extension shared temp sourceId\n            } else if (event.data.chromeMediaSourceId) {\n                easyrtc_sc.chromeMediaSourceId = event.data.chromeMediaSourceId;\n\n    \t        // Remove listener\n    \t        window.removeEventListener('message', easyrtc_sc.chromeMedia);\n                easyrtc_sc.chromeMedia = null;\n            }\n        }\n    };\n\nreturn easyrtc_sc;\n\n}));\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo4.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\n\r\n\r\nfunction connect() {\r\n    easyrtc.enableDebug(false);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.easyApp(\"easyrtc.demo4\", \"selfVideo\",\r\n       [\"callerVideo\", \"callerVideo2\", \"callerVideo3\"], loginSuccess, loginFailure);\r\n}\r\n\r\n\r\nfunction clearConnectList() {\r\n    otherClientDiv = document.getElementById('otherClients');\r\n    while (otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\r\n    }\r\n}\r\n\r\n\r\nfunction convertListToButtons (roomName, occupants, isPrimary) {\r\n    clearConnectList();\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    for(var easyrtcid in occupants) {\r\n        var button = document.createElement('button');\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                performCall(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n\r\n        var label = document.createTextNode(easyrtcid);\r\n        button.appendChild(label);\r\n        otherClientDiv.appendChild(button);\r\n    }\r\n}\r\n\r\n\r\nfunction performCall(otherEasyrtcid) {\r\n    var acceptedCB = function(accepted, easyrtcid) {\r\n        if( !accepted ) {\r\n            alert(\"Sorry, your call to \" + easyrtcid + \" was rejected\");\r\n        }\r\n    };\r\n    var successCB = function() {};\r\n    var failureCB = function() {};\r\n    easyrtc.call(otherEasyrtcid, successCB, failureCB, acceptedCB);\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n\r\n\r\n// Sets calls so they are automatically accepted (this is default behaviour)\r\neasyrtc.setAcceptChecker(function(easyrtcid, callback) {\r\n    callback(true);\r\n} );\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_audio_only.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\n\r\nfunction disable(domId) {\r\n    document.getElementById(domId).disabled = \"disabled\";\r\n}\r\n\r\n\r\nfunction enable(domId) {\r\n    document.getElementById(domId).disabled = \"\";\r\n}\r\n\r\n\r\nfunction connect() {\r\n    console.log(\"Initializing.\");\r\n    easyrtc.enableVideo(false);\r\n    easyrtc.enableVideoReceive(false);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.initMediaSource(\r\n        function(){        // success callback\r\n            easyrtc.connect(\"easyrtc.audioOnly\", loginSuccess, loginFailure);\r\n        },\r\n        function(errorCode, errmesg){\r\n            easyrtc.showError(errorCode, errmesg);\r\n        }  // failure callback\r\n        );\r\n}\r\n\r\n\r\nfunction terminatePage() {\r\n    easyrtc.disconnect();\r\n}\r\n\r\n\r\nfunction hangup() {\r\n    easyrtc.hangupAll();\r\n    disable('hangupButton');\r\n}\r\n\r\n\r\nfunction clearConnectList() {\r\n    otherClientDiv = document.getElementById('otherClients');\r\n    while (otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction convertListToButtons (roomName, occupants, isPrimary) {\r\n    clearConnectList();\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    for(var easyrtcid in occupants) {\r\n        var button = document.createElement('button');\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                performCall(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n\r\n        var label = document.createElement('text');\r\n        label.innerHTML = easyrtc.idToName(easyrtcid);\r\n        button.appendChild(label);\r\n        otherClientDiv.appendChild(button);\r\n    }\r\n}\r\n\r\n\r\nfunction performCall(otherEasyrtcid) {\r\n    easyrtc.hangupAll();\r\n    var acceptedCB = function(accepted, caller) {\r\n        if( !accepted ) {\r\n            easyrtc.showError(\"CALL-REJECTED\", \"Sorry, your call to \" + easyrtc.idToName(caller) + \" was rejected\");\r\n            enable('otherClients');\r\n        }\r\n    };\r\n    var successCB = function() {\r\n        enable('hangupButton');\r\n    };\r\n    var failureCB = function() {\r\n        enable('otherClients');\r\n    };\r\n    easyrtc.call(otherEasyrtcid, successCB, failureCB, acceptedCB);\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    disable(\"connectButton\");\r\n    // enable(\"disconnectButton\");\r\n    enable('otherClients');\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtcid;\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n\r\n\r\nfunction disconnect() {\r\n    document.getElementById(\"iam\").innerHTML = \"logged out\";\r\n    easyrtc.disconnect();\r\n    console.log(\"disconnecting from server\");\r\n    enable(\"connectButton\");\r\n    // disable(\"disconnectButton\");\r\n    clearConnectList();\r\n}\r\n\r\n\r\neasyrtc.setStreamAcceptor( function(easyrtcid, stream) {\r\n    var audio = document.getElementById('callerAudio');\r\n    easyrtc.setVideoObjectSrc(audio,stream);\r\n    enable(\"hangupButton\");\r\n});\r\n\r\n\r\neasyrtc.setOnStreamClosed( function (easyrtcid) {\r\n    easyrtc.setVideoObjectSrc(document.getElementById('callerAudio'), \"\");\r\n    disable(\"hangupButton\");\r\n});\r\n\r\n\r\neasyrtc.setAcceptChecker(function(easyrtcid, callback) {\r\n    document.getElementById('acceptCallBox').style.display = \"block\";\r\n    if( easyrtc.getConnectionCount() > 0 ) {\r\n        document.getElementById('acceptCallLabel').textContent = \"Drop current call and accept new from \" + easyrtcid + \" ?\";\r\n    }\r\n    else {\r\n        document.getElementById('acceptCallLabel').textContent = \"Accept incoming call from \" + easyrtcid + \" ?\";\r\n    }\r\n    var acceptTheCall = function(wasAccepted) {\r\n        document.getElementById('acceptCallBox').style.display = \"none\";\r\n        if( wasAccepted && easyrtc.getConnectionCount() > 0 ) {\r\n            easyrtc.hangupAll();\r\n        }\r\n        callback(wasAccepted);\r\n    };\r\n    document.getElementById(\"callAcceptButton\").onclick = function() {\r\n        acceptTheCall(true);\r\n    };\r\n    document.getElementById(\"callRejectButton\").onclick =function() {\r\n        acceptTheCall(false);\r\n    };\r\n} );\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_audio_video.js":"//\n//Copyright (c) 2016, Skedans Systems, Inc.\n//All rights reserved.\n//\n//Redistribution and use in source and binary forms, with or without\n//modification, are permitted provided that the following conditions are met:\n//\n//    * Redistributions of source code must retain the above copyright notice,\n//      this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n//\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n//POSSIBILITY OF SUCH DAMAGE.\n//\nvar selfEasyrtcid = \"\";\nvar haveSelfVideo = false;\n\nfunction disable(domId) {\n    document.getElementById(domId).disabled = \"disabled\";\n}\n\n\nfunction enable(domId) {\n    document.getElementById(domId).disabled = \"\";\n}\n\nvar onceOnly = true;\n\n\nfunction connect() {\t\n  easyrtc.enableAudio(document.getElementById(\"shareAudio\").checked);\n  easyrtc.enableVideo(document.getElementById(\"shareVideo\").checked);\n  easyrtc.enableDataChannels(true);\n  easyrtc.setRoomOccupantListener( convertListToButtons);    \n  easyrtc.connect(\"easyrtc.audioVideo\", loginSuccess, loginFailure);\t\t\t  \n  if( onceOnly ) {\n      easyrtc.getAudioSinkList( function(list) {\n         for(let ele of list ) {\n             addSinkButton(ele.label, ele.deviceId);\n         }\n      });\n      onceOnly = false;\n  }\n} \n\n\nfunction addSinkButton(label, deviceId){\n   let button = document.createElement(\"button\");\n   button.innerText = label?label:deviceId;\n   button.onclick = function() {\n      easyrtc.setAudioOutput( document.getElementById(\"callerVideo\"), deviceId);\n   }\n   document.getElementById(\"audioSinkButtons\").appendChild(button);\n}\n\n\nfunction hangup() {\n    easyrtc.hangupAll();\n    disable('hangupButton');\n}\n\n\n\n\n\nfunction clearConnectList() {\n    var otherClientDiv = document.getElementById('otherClients');\n    while (otherClientDiv.hasChildNodes()) {\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\n    }\n}\n\n\nfunction convertListToButtons (roomName, occupants, isPrimary) {\n    clearConnectList();\n    var otherClientDiv = document.getElementById('otherClients');\n    for(var easyrtcid in occupants) {\n        var button = document.createElement('button');\n        button.onclick = function(easyrtcid) {\n            return function() {\n                performCall(easyrtcid);\n            };\n        }(easyrtcid);\n\n        var label = document.createTextNode(\"Call \" + easyrtc.idToName(easyrtcid));\n        button.appendChild(label);\n        otherClientDiv.appendChild(button);\n    }\n}\n\n\nfunction setUpMirror() {\n    if( !haveSelfVideo) {\n        var selfVideo = document.getElementById(\"selfVideo\");\n        easyrtc.setVideoObjectSrc(selfVideo, easyrtc.getLocalStream());\n        selfVideo.muted = true;\n        haveSelfVideo = true;\n    }\n}\n\nfunction performCall(otherEasyrtcid) {\n    easyrtc.hangupAll();\n    var acceptedCB = function(accepted, easyrtcid) {\n        if( !accepted ) {\n            easyrtc.showError(\"CALL-REJECTEd\", \"Sorry, your call to \" + easyrtc.idToName(easyrtcid) + \" was rejected\");\n            enable('otherClients');\n        }\n    };\n\n    var successCB = function() {\n        if( easyrtc.getLocalStream()) {\n            setUpMirror();\n        }\n        enable('hangupButton');\n    };\n    var failureCB = function() {\n        enable('otherClients');\n    };\n    easyrtc.call(otherEasyrtcid, successCB, failureCB, acceptedCB);\n    enable('hangupButton');\n}\n\n\nfunction loginSuccess(easyrtcid) {\n    disable(\"connectButton\");\n    enable(\"disconnectButton\");\n    enable('otherClients');\n    selfEasyrtcid = easyrtcid;\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\n    easyrtc.showError(\"noerror\", \"logged in\");\n}\n\n\nfunction loginFailure(errorCode, message) {\n    easyrtc.showError(errorCode, message);\n}\n\nfunction disconnect() {\n  easyrtc.disconnect();\t\t\t  \n  document.getElementById(\"iam\").innerHTML = \"logged out\";\n  enable(\"connectButton\");\n  disable(\"disconnectButton\"); \n  easyrtc.clearMediaStream( document.getElementById('selfVideo'));\n  easyrtc.setVideoObjectSrc(document.getElementById(\"selfVideo\"),\"\");\n  easyrtc.closeLocalMediaStream();\n  easyrtc.setRoomOccupantListener( function(){});  \n  clearConnectList();\n} \n\n\neasyrtc.setStreamAcceptor( function(easyrtcid, stream) {\n    setUpMirror();\n    var video = document.getElementById('callerVideo');\n    easyrtc.setVideoObjectSrc(video,stream);\n    enable(\"hangupButton\");\n});\n\n\n\neasyrtc.setOnStreamClosed( function (easyrtcid) {\n    easyrtc.setVideoObjectSrc(document.getElementById('callerVideo'), \"\");\n    disable(\"hangupButton\");\n});\n\n\nvar callerPending = null;\n\neasyrtc.setCallCancelled( function(easyrtcid){\n    if( easyrtcid === callerPending) {\n        document.getElementById('acceptCallBox').style.display = \"none\";\n        callerPending = false;\n    }\n});\n\n\neasyrtc.setAcceptChecker(function(easyrtcid, callback) {\n    document.getElementById('acceptCallBox').style.display = \"block\";\n    callerPending = easyrtcid;\n    if( easyrtc.getConnectionCount() > 0 ) {\n        document.getElementById('acceptCallLabel').innerHTML = \"Drop current call and accept new from \" + easyrtc.idToName(easyrtcid) + \" ?\";\n    }\n    else {\n        document.getElementById('acceptCallLabel').innerHTML = \"Accept incoming call from \" + easyrtc.idToName(easyrtcid) + \" ?\";\n    }\n    var acceptTheCall = function(wasAccepted) {\n        document.getElementById('acceptCallBox').style.display = \"none\";\n        if( wasAccepted && easyrtc.getConnectionCount() > 0 ) {\n            easyrtc.hangupAll();\n        }\n        callback(wasAccepted);\n        callerPending = null;\n    };\n    document.getElementById(\"callAcceptButton\").onclick = function() {\n        acceptTheCall(true);\n    };\n    document.getElementById(\"callRejectButton\").onclick =function() {\n        acceptTheCall(false);\n    };\n} );\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_audio_video_simple_hd.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\n\r\n\r\nfunction connect() {\r\n    easyrtc.setVideoDims(1280,720);\r\n    easyrtc.enableDebug(false);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.easyApp(\"easyrtc.videoChatHd\", \"selfVideo\", [\"callerVideo\"], loginSuccess, loginFailure);\r\n}\r\n\r\n\r\nfunction clearConnectList() {\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    while (otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\r\n    }\r\n}\r\n\r\n\r\nfunction convertListToButtons (roomName, data, isPrimary) {\r\n    clearConnectList();\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    for(var easyrtcid in data) {\r\n        var button = document.createElement('button');\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                performCall(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n\r\n        var label = document.createTextNode(easyrtc.idToName(easyrtcid));\r\n        button.appendChild(label);\r\n        button.className = \"callbutton\";\r\n        otherClientDiv.appendChild(button);\r\n    }\r\n}\r\n\r\n\r\nfunction performCall(otherEasyrtcid) {\r\n    easyrtc.hangupAll();\r\n    var acceptedCB = function(accepted, caller) {\r\n        if( !accepted ) {\r\n            easyrtc.showError(\"CALL-REJECTED\", \"Sorry, your call to \" + easyrtc.idToName(caller) + \" was rejected\");\r\n        }\r\n    };\r\n    var successCB = function() {};\r\n    var failureCB = function() {};\r\n    easyrtc.call(otherEasyrtcid, successCB, failureCB, acceptedCB);\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n\r\n\r\n// Sets calls so they are automatically accepted (this is default behaviour)\r\neasyrtc.setAcceptChecker(function(caller, cb) {\r\n    cb(true);\r\n} );\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_audio_video_simple.js":"var selfEasyrtcid = \"\";\r\n\r\n\r\nfunction connect() {\r\n    easyrtc.setVideoDims(640,480);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.easyApp(\"easyrtc.audioVideoSimple\", \"selfVideo\", [\"callerVideo\"], loginSuccess, loginFailure);\r\n }\r\n\r\n\r\nfunction clearConnectList() {\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    while (otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\r\n    }\r\n}\r\n\r\n\r\nfunction convertListToButtons (roomName, data, isPrimary) {\r\n    clearConnectList();\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    for(var easyrtcid in data) {\r\n        var button = document.createElement('button');\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                performCall(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n\r\n        var label = document.createTextNode(easyrtc.idToName(easyrtcid));\r\n        button.appendChild(label);\r\n        otherClientDiv.appendChild(button);\r\n    }\r\n}\r\n\r\n\r\nfunction performCall(otherEasyrtcid) {\r\n    easyrtc.hangupAll();\r\n\r\n    var successCB = function() {};\r\n    var failureCB = function() {};\r\n    easyrtc.call(otherEasyrtcid, successCB, failureCB);\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_connector.js":"var selfEasyrtcid = \"\";\r\n\r\n\r\nfunction connect() {\r\n    easyrtc.setVideoDims(640,480);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.easyApp(\"easyrtc.audioVideoSimple\", \"selfVideo\", [\"callerVideo\"], loginSuccess, loginFailure);\r\n }\r\n\r\n\r\nfunction clearConnectList() {\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    while (otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\r\n    }\r\n}\r\n\r\n\r\nfunction convertListToButtons (roomName, data, isPrimary) {\r\n    clearConnectList();\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    for(var easyrtcid in data) {\r\n        var button = document.createElement('button');\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                performCall(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n\r\n        var label = document.createTextNode(easyrtc.idToName(easyrtcid));\r\n        button.appendChild(label);\r\n        otherClientDiv.appendChild(button);\r\n    }\r\n}\r\n\r\n\r\nfunction performCall(otherEasyrtcid) {\r\n    easyrtc.hangupAll();\r\n\r\n    var successCB = function() {};\r\n    var failureCB = function() {};\r\n    easyrtc.call(otherEasyrtcid, successCB, failureCB);\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_data_channel_filesharing.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\nvar peers = {};\r\n\r\nfunction buildPeerBlockName(easyrtcid) {\r\n    return \"peerzone_\" + easyrtcid;\r\n}\r\n\r\nfunction buildDragNDropName(easyrtcid) {\r\n    return \"dragndrop_\" + easyrtcid;\r\n}\r\n\r\nfunction buildReceiveAreaName(easyrtcid) {\r\n    return \"receivearea_\" + easyrtcid;\r\n}\r\n\r\n\r\nfunction connect() {\r\n    var otherClientsDiv = document.getElementById('otherClients');\r\n\r\n    easyrtc.enableDataChannels(true);\r\n    easyrtc.enableVideo(false);\r\n    easyrtc.enableAudio(false);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n\r\n    easyrtc.setAcceptChecker(function(easyrtcid, responsefn) {\r\n        responsefn(true);\r\n        document.getElementById(\"connectbutton_\" + easyrtcid).style.visibility = \"hidden\";\r\n    });\r\n\r\n    easyrtc.setDataChannelOpenListener(function(easyrtcid, usesPeer) {\r\n        var obj = document.getElementById(buildDragNDropName(easyrtcid));\r\n        if (!obj) {\r\n            console.log(\"no such object \");\r\n        }\r\n        jQuery(obj).addClass(\"connected\");\r\n        jQuery(obj).removeClass(\"notConnected\");\r\n    });\r\n\r\n    easyrtc.setDataChannelCloseListener(function(easyrtcid) {\r\n        jQuery(buildDragNDropName(easyrtcid)).addClass(\"notConnected\");\r\n        jQuery(buildDragNDropName(easyrtcid)).removeClass(\"connected\");\r\n    });\r\n\r\n    easyrtc.connect(\"easyrtc.dataFileTransfer\", loginSuccess, loginFailure);\r\n}\r\n\r\n\r\nfunction removeIfPresent(parent, childname) {\r\n    var item = document.getElementById(childname);\r\n    if (item) {\r\n        parent.removeChild(item);\r\n    }\r\n    else {\r\n        console.log(\"didn't see item \" + childname + \" for delete eh\");\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction convertListToButtons(roomName, occupants, isPrimary) {\r\n    var peerZone = document.getElementById('peerZone');\r\n    for (var oldPeer in  peers) {\r\n        if (!occupants[oldPeer]) {\r\n            removeIfPresent(peerZone, buildPeerBlockName(oldPeer));\r\n            delete peers[oldPeer];\r\n        }\r\n    }\r\n\r\n\r\n    function buildDropDiv(easyrtcid) {\r\n        var statusDiv = document.createElement(\"div\");\r\n        statusDiv.className = \"dragndropStatus\";\r\n\r\n        var dropArea = document.createElement(\"div\");\r\n        var connectButton = document.createElement(\"button\");\r\n        connectButton.appendChild(document.createTextNode(\"Connect\"));\r\n        connectButton.className = \"connectButton\";\r\n        connectButton.id = \"connectbutton_\" + easyrtcid;\r\n        connectButton.onclick = function() {\r\n            statusDiv.innerHTML = \"Waiting for connection to be established\";\r\n            easyrtc.call(easyrtcid,\r\n                    function(caller, mediatype) {\r\n                        statusDiv.innerHTML = \"Connection established\";\r\n                        dropArea.className = \"dragndrop connected\";\r\n                        connectButton.style.visibility = \"hidden\";\r\n                    },\r\n                    function(errorCode, errorText) {\r\n                        dropArea.className = \"dragndrop connected\";\r\n                        statusDiv.innerHTML = \"Connection failed\";\r\n                        connectButton.style.visibility = \"hidden\";\r\n                        noDCs[easyrtcid] = true;\r\n                    },\r\n                    function wasAccepted(yup) {\r\n                    }\r\n            );\r\n        }\r\n\r\n        dropArea.id = buildDragNDropName(easyrtcid);\r\n        dropArea.className = \"dragndrop notConnected\";\r\n        dropArea.innerHTML = \"File drop area\";\r\n\r\n\r\n        function updateStatusDiv(state) {\r\n            switch (state.status) {\r\n                case \"waiting\":\r\n                    statusDiv.innerHTML = \"waiting for other party<br\\>to accept transmission\";\r\n                    break;\r\n                case \"started_file\":\r\n                    statusDiv.innerHTML = \"started file: \" + state.name;\r\n                case \"working\":\r\n                    statusDiv.innerHTML = state.name + \":\" + state.position + \"/\" + state.size + \"(\" + state.numFiles + \" files)\";\r\n                    break;\r\n                case \"rejected\":\r\n                    statusDiv.innerHTML = \"cancelled\";\r\n                    setTimeout(function() {\r\n                        statusDiv.innerHTML = \"\";\r\n                    }, 2000);\r\n                    break;\r\n                case \"done\":\r\n                    statusDiv.innerHTML = \"done\";\r\n                    setTimeout(function() {\r\n                        statusDiv.innerHTML = \"\";\r\n                    }, 3000);\r\n                    break;\r\n            }\r\n            return true;\r\n        }\r\n\r\n\r\n        var noDCs = {}; // which users don't support data channels\r\n\r\n        var fileSender = null;\r\n        function filesHandler(files) {\r\n            // if we haven't eastablished a connection to the other party yet, do so now,\r\n            // and on completion, send the files. Otherwise send the files now.\r\n            var timer = null;\r\n            if (easyrtc.getConnectStatus(easyrtcid) === easyrtc.NOT_CONNECTED && noDCs[easyrtcid] === undefined) {\r\n                //\r\n                // calls between firefrox and chrome ( version 30) have problems one way if you\r\n                // use data channels.\r\n                //\r\n\r\n            }\r\n            else if (easyrtc.getConnectStatus(easyrtcid) === easyrtc.IS_CONNECTED || noDCs[easyrtcid]) {\r\n                if (!fileSender) {\r\n                    fileSender = easyrtc_ft.buildFileSender(easyrtcid, updateStatusDiv);\r\n                }\r\n                fileSender(files, true /* assume binary */);\r\n            }\r\n            else {\r\n                easyrtc.showError(\"user-error\", \"Wait for the connection to complete before adding more files!\");\r\n            }\r\n        }\r\n        easyrtc_ft.buildDragNDropRegion(dropArea, filesHandler);\r\n        var container = document.createElement(\"div\");\r\n        container.appendChild(connectButton);\r\n        container.appendChild(dropArea);\r\n        container.appendChild(statusDiv);\r\n        return container;\r\n    }\r\n\r\n\r\n    function buildReceiveDiv(i) {\r\n        var div = document.createElement(\"div\");\r\n        div.id = buildReceiveAreaName(i);\r\n        div.className = \"receiveBlock\";\r\n        div.style.display = \"none\";\r\n        return div;\r\n    }\r\n\r\n\r\n    for (var easyrtcid in occupants) {\r\n        if (!peers[easyrtcid]) {\r\n            var peerBlock = document.createElement(\"div\");\r\n            peerBlock.id = buildPeerBlockName(easyrtcid);\r\n            peerBlock.className = \"peerblock\";\r\n            peerBlock.appendChild(document.createTextNode(\" For peer \" + easyrtcid));\r\n            peerBlock.appendChild(document.createElement(\"br\"));\r\n            peerBlock.appendChild(buildDropDiv(easyrtcid));\r\n            peerBlock.appendChild(buildReceiveDiv(easyrtcid));\r\n            peerZone.appendChild(peerBlock);\r\n            peers[easyrtcid] = true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction acceptRejectCB(otherGuy, fileNameList, wasAccepted) {\r\n\r\n    var receiveBlock = document.getElementById(buildReceiveAreaName(otherGuy));\r\n    jQuery(receiveBlock).empty();\r\n    receiveBlock.style.display = \"inline-block\";\r\n\r\n    //\r\n    // list the files being offered\r\n    //\r\n    receiveBlock.appendChild(document.createTextNode(\"Files offered\"));\r\n    receiveBlock.appendChild(document.createElement(\"br\"));\r\n    for (var i = 0; i < fileNameList.length; i++) {\r\n        receiveBlock.appendChild(\r\n                document.createTextNode(\"  \" + fileNameList[i].name + \"(\" + fileNameList[i].size + \" bytes)\"));\r\n        receiveBlock.appendChild(document.createElement(\"br\"));\r\n    }\r\n    //\r\n    // provide accept/reject buttons\r\n    //\r\n    var button = document.createElement(\"button\");\r\n    button.appendChild(document.createTextNode(\"Accept\"));\r\n    button.onclick = function() {\r\n        jQuery(receiveBlock).empty();\r\n        wasAccepted(true);\r\n    };\r\n    receiveBlock.appendChild(button);\r\n\r\n    button = document.createElement(\"button\");\r\n    button.appendChild(document.createTextNode(\"Reject\"));\r\n    button.onclick = function() {\r\n        wasAccepted(false);\r\n        receiveBlock.style.display = \"none\";\r\n    };\r\n    receiveBlock.appendChild(button);\r\n}\r\n\r\n\r\nfunction receiveStatusCB(otherGuy, msg) {\r\n    var receiveBlock = document.getElementById(buildReceiveAreaName(otherGuy));\r\n    if( !receiveBlock) return;\r\n\r\n    switch (msg.status) {\r\n        case \"started\":\r\n            break;\r\n        case \"eof\":\r\n            receiveBlock.innerHTML = \"Finished file\";\r\n            break;\r\n        case \"done\":\r\n            receiveBlock.innerHTML = \"Stopped because \" +msg.reason;\r\n            setTimeout(function() {\r\n                receiveBlock.style.display = \"none\";\r\n            }, 1000);\r\n            break;\r\n        case \"started_file\":\r\n            receiveBlock.innerHTML = \"Beginning receive of \" + msg.name;\r\n            break;\r\n        case \"progress\":\r\n            receiveBlock.innerHTML = msg.name + \" \" + msg.received + \"/\" + msg.size;\r\n            break;\r\n        default:\r\n            console.log(\"strange file receive cb message = \", JSON.stringify(msg));\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction blobAcceptor(otherGuy, blob, filename) {\r\n    easyrtc_ft.saveAs(blob, filename);\r\n}\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtcid;\r\n    easyrtc_ft.buildFileReceiver(acceptRejectCB, blobAcceptor, receiveStatusCB);\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_data_channel_messaging.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\nvar connectList = {};\r\nvar channelIsActive = {}; // tracks which channels are active\r\n\r\n\r\nfunction connect() {\r\n    easyrtc.enableDebug(false);\r\n    easyrtc.enableDataChannels(true);\r\n    easyrtc.enableVideo(false);\r\n    easyrtc.enableAudio(false);\r\n    easyrtc.enableVideoReceive(false);\r\n    easyrtc.enableAudioReceive(false);\r\n    easyrtc.setDataChannelOpenListener(openListener);\r\n    easyrtc.setDataChannelCloseListener(closeListener);\r\n    easyrtc.setPeerListener(addToConversation);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.connect(\"easyrtc.dataMessaging\", loginSuccess, loginFailure);\r\n}\r\n\r\n\r\nfunction addToConversation(who, msgType, content) {\r\n    // Escape html special characters, then add linefeeds.\r\n    content = content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n    content = content.replace(/\\n/g, '<br />');\r\n    document.getElementById('conversation').innerHTML +=\r\n            \"<b>\" + who + \":</b>&nbsp;\" + content + \"<br />\";\r\n}\r\n\r\n\r\nfunction openListener(otherParty) {\r\n    channelIsActive[otherParty] = true;\r\n    updateButtonState(otherParty);\r\n}\r\n\r\n\r\nfunction closeListener(otherParty) {\r\n    channelIsActive[otherParty] = false;\r\n    updateButtonState(otherParty);\r\n}\r\n\r\nfunction convertListToButtons(roomName, occupantList, isPrimary) {\r\n    connectList = occupantList;\r\n\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    while (otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\r\n    }\r\n\r\n    var label, button;\r\n    for (var easyrtcid in connectList) {\r\n        var rowGroup = document.createElement(\"span\");\r\n        var rowLabel = document.createTextNode(easyrtc.idToName(easyrtcid));\r\n        rowGroup.appendChild(rowLabel);\r\n\r\n        button = document.createElement('button');\r\n        button.id = \"connect_\" + easyrtcid;\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                startCall(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n        label = document.createTextNode(\"Connect\");\r\n        button.appendChild(label);\r\n        rowGroup.appendChild(button);\r\n\r\n        button = document.createElement('button');\r\n        button.id = \"send_\" + easyrtcid;\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                sendStuffP2P(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n        label = document.createTextNode(\"Send Message\");\r\n        button.appendChild(label);\r\n        rowGroup.appendChild(button);\r\n        otherClientDiv.appendChild(rowGroup);\r\n        updateButtonState(easyrtcid);\r\n    }\r\n    if (!otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.innerHTML = \"<em>Nobody else logged in to talk to...</em>\";\r\n    }\r\n}\r\n\r\nfunction updateButtonState(otherEasyrtcid) {\r\n    var isConnected = channelIsActive[otherEasyrtcid];\r\n    if(document.getElementById('connect_' + otherEasyrtcid)) {\r\n        document.getElementById('connect_' + otherEasyrtcid).disabled = isConnected;\r\n    }\r\n    if( document.getElementById('send_' + otherEasyrtcid)) {\r\n        document.getElementById('send_' + otherEasyrtcid).disabled = !isConnected;\r\n    }\r\n}\r\n\r\n\r\nfunction startCall(otherEasyrtcid) {\r\n    if (easyrtc.getConnectStatus(otherEasyrtcid) === easyrtc.NOT_CONNECTED) {\r\n        try {\r\n        easyrtc.call(otherEasyrtcid,\r\n                function(caller, media) { // success callback\r\n                    if (media === 'datachannel') {\r\n                        // console.log(\"made call succesfully\");\r\n                        connectList[otherEasyrtcid] = true;\r\n                    }\r\n                },\r\n                function(errorCode, errorText) {\r\n                    connectList[otherEasyrtcid] = false;\r\n                    easyrtc.showError(errorCode, errorText);\r\n                },\r\n                function(wasAccepted) {\r\n                    // console.log(\"was accepted=\" + wasAccepted);\r\n                }\r\n        );\r\n        }catch( callerror) {\r\n            console.log(\"saw call error \", callerror);\r\n        }\r\n    }\r\n    else {\r\n        easyrtc.showError(\"ALREADY-CONNECTED\", \"already connected to \" + easyrtc.idToName(otherEasyrtcid));\r\n    }\r\n}\r\n\r\nfunction sendStuffP2P(otherEasyrtcid) {\r\n    var text = document.getElementById('sendMessageText').value;\r\n    if (text.replace(/\\s/g, \"\").length === 0) { // Don't send just whitespace\r\n        return;\r\n    }\r\n    if (easyrtc.getConnectStatus(otherEasyrtcid) === easyrtc.IS_CONNECTED) {\r\n        easyrtc.sendDataP2P(otherEasyrtcid, 'msg', text);\r\n    }\r\n    else {\r\n        easyrtc.showError(\"NOT-CONNECTED\", \"not connected to \" + easyrtc.idToName(otherEasyrtcid) + \" yet.\");\r\n    }\r\n\r\n    addToConversation(\"Me\", \"msgtype\", text);\r\n    document.getElementById('sendMessageText').value = \"\";\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtcid;\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, \"failure to login\");\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_ice_filter.js":"var selfEasyrtcid = \"\";\n\n//\n// filter ice candidates according to the ice candidates checkbox.\n//\nfunction iceCandidateFilter( iceCandidate, fromPeer) {\n   var sdp = iceCandidate.candidate;\n   if( sdp.indexOf(\"typ relay\") > 0) { // is turn candidate\n       if( document.getElementById(\"allowTurn\").checked ) {\n           return iceCandidate;\n       }\n       else {\n           return null;\n       }\n   }\n   else if( sdp.indexOf(\"typ srflx\") > 0) { // is turn candidate\n       if( document.getElementById(\"allowStun\").checked ) {\n           return iceCandidate;\n       }\n       else {\n           return null;\n       }\n   }\n   else if( sdp.indexOf(\"typ host\") > 0) { // is turn candidate\n       if( document.getElementById(\"allowLocal\").checked ) {\n           return iceCandidate;\n       }\n       else {\n           return null;\n       }\n   }\n   else {\n      console.log(\"Unrecognized type of ice candidate, passing through: \" + sdp);\n   }\n}\n\nfunction connect() {\n    easyrtc.setRoomOccupantListener(convertListToButtons);\n    easyrtc.setIceCandidateFilter(iceCandidateFilter);\n    easyrtc.easyApp(\"easyrtc.iceFilter\", \"selfVideo\", [\"callerVideo\"], loginSuccess, loginFailure);\n }\n\n\nfunction clearConnectList() {\n    var otherClientDiv = document.getElementById('otherClients');\n    while (otherClientDiv.hasChildNodes()) {\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\n    }\n}\n\n\nfunction convertListToButtons (roomName, data, isPrimary) {\n    clearConnectList();\n    var otherClientDiv = document.getElementById('otherClients');\n    for(var easyrtcid in data) {\n        var button = document.createElement('button');\n        button.onclick = function(easyrtcid) {\n            return function() {\n                performCall(easyrtcid);\n            };\n        }(easyrtcid);\n\n        var label = document.createTextNode(easyrtc.idToName(easyrtcid));\n        button.appendChild(label);\n        otherClientDiv.appendChild(button);\n    }\n}\n\n\nfunction performCall(otherEasyrtcid) {\n    easyrtc.hangupAll();\n    easyrtc.setIceUsedInCalls( getModifiedIceList());\n    var successCB = function() {};\n    var failureCB = function() {};\n    easyrtc.call(otherEasyrtcid, successCB, failureCB);\n}\n\n\n\n\n\nvar iceMap = [];\n\nfunction getModifiedIceList(){\n   var iceList = [];\n   var i;\n\n   for( i = 0; i < iceMap.length; i++ ) {\n      if( document.getElementById(\"iscb\" + i).checked ) {\n         iceList.push( iceMap[i]);\n      }\n   }\n   return {iceServers: iceList};\n}\n\n\nfunction loginSuccess(easyrtcid) {\n    var i;\n\n    selfEasyrtcid = easyrtcid;\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\n    var blockentries = \"<h3>Ice entries</h3>\";\n    var iceServers = easyrtc.getServerIce();\n    for(i = 0; i < iceServers.iceServers.length; i++ ) {\n\t    iceMap[i] = iceServers.iceServers[i];\n        var label = \"iscb\" + i;\n        var url = iceServers.iceServers[i].url ||\n                  iceServers.iceServers[i].urls || \"no url\";\n\t    blockentries += '<div style=\"width:100%;overflow:hidden;text-align:left\"><input type=\"checkbox\" id=\"' + label + '\" + checked=\"checked\" style=\"float:left /> <label for=\"' + label + '\">' + url + '</label></div>';\n\n    }\n    document.getElementById(\"iceEntries\").innerHTML = blockentries;\n\n}\n\n\nfunction loginFailure(errorCode, message) {\n    easyrtc.showError(errorCode, message);\n}\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_instant_messaging.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\nfunction addToConversation(who, msgType, content) {\r\n    // Escape html special characters, then add linefeeds.\r\n    content = content.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\r\n    content = content.replace(/\\n/g, '<br />');\r\n    document.getElementById('conversation').innerHTML +=\r\n    \"<b>\" + who + \":</b>&nbsp;\" + content + \"<br />\";\r\n}\r\n\r\n\r\nfunction connect() {\r\n    easyrtc.setPeerListener(addToConversation);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.connect(\"easyrtc.instantMessaging\", loginSuccess, loginFailure);\r\n}\r\n\r\n\r\nfunction convertListToButtons (roomName, occupants, isPrimary) {\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    while (otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\r\n    }\r\n\r\n    for(var easyrtcid in occupants) {\r\n        var button = document.createElement('button');\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                sendStuffWS(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n        var label = document.createTextNode(\"Send to \" + easyrtc.idToName(easyrtcid));\r\n        button.appendChild(label);\r\n\r\n        otherClientDiv.appendChild(button);\r\n    }\r\n    if( !otherClientDiv.hasChildNodes() ) {\r\n        otherClientDiv.innerHTML = \"<em>Nobody else logged in to talk to...</em>\";\r\n    }\r\n}\r\n\r\n\r\nfunction sendStuffWS(otherEasyrtcid) {\r\n    var text = document.getElementById('sendMessageText').value;\r\n    if(text.replace(/\\s/g, \"\").length === 0) { // Don't send just whitespace\r\n        return;\r\n    }\r\n\r\n    easyrtc.sendDataWS(otherEasyrtcid, \"message\",  text);\r\n    addToConversation(\"Me\", \"message\", text);\r\n    document.getElementById('sendMessageText').value = \"\";\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtcid;\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_instant_messaging_rooms.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\nvar waitingForRoomList = true;\r\nvar isConnected = false;\r\n\r\nfunction initApp() {\r\n    document.getElementById(\"main\").className = \"notconnected\";\r\n}\r\n\r\nfunction addToConversation(who, msgType, content, targeting) {\r\n    // Escape html special characters, then add linefeeds.\r\n    if( !content) {\r\n        content = \"**no body**\";\r\n    }\r\n    content = content.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n    content = content.replace(/\\n/g, '<br />');\r\n    var targetingStr = \"\";\r\n    if (targeting) {\r\n        if (targeting.targetEasyrtcid) {\r\n            targetingStr += \"user=\" + targeting.targetEasyrtcid;\r\n        }\r\n        if (targeting.targetRoom) {\r\n            targetingStr += \" room=\" + targeting.targetRoom;\r\n        }\r\n        if (targeting.targetGroup) {\r\n            targetingStr += \" group=\" + targeting.targetGroup;\r\n        }\r\n    }\r\n    document.getElementById('conversation').innerHTML +=\r\n            \"<b>\" + who + \" sent \" + targetingStr + \":</b>&nbsp;\" + content + \"<br />\";\r\n}\r\n\r\nfunction genRoomDivName(roomName) {\r\n    return \"roomblock_\" + roomName;\r\n}\r\n\r\nfunction genRoomOccupantName(roomName) {\r\n    return \"roomOccupant_\" + roomName;\r\n}\r\n\r\nfunction setCredential(event, value) {\r\n    if (event.keyCode === 13) {\r\n        easyrtc.setCredential(value);\r\n    }\r\n}\r\n\r\n\r\nfunction addRoom(roomName, parmString, userAdded) {\r\n    if (!roomName) {\r\n        roomName = document.getElementById(\"roomToAdd\").value;\r\n        parmString = document.getElementById(\"optRoomParms\").value;\r\n    }\r\n    var roomid = genRoomDivName(roomName);\r\n    if (document.getElementById(roomid)) {\r\n        return;\r\n    }\r\n    function addRoomButton() {\r\n\r\n        var roomButtonHolder = document.getElementById('rooms');\r\n        var roomdiv = document.createElement(\"div\");\r\n        roomdiv.id = roomid;\r\n        roomdiv.className = \"roomDiv\";\r\n\r\n        var roomButton = document.createElement(\"button\");\r\n        roomButton.onclick = function() {\r\n            sendMessage(null, roomName);\r\n        };\r\n        var roomLabel = (document.createTextNode(roomName));\r\n        roomButton.appendChild(roomLabel);\r\n\r\n        roomdiv.appendChild(roomButton);\r\n        roomButtonHolder.appendChild(roomdiv);\r\n        var roomOccupants = document.createElement(\"div\");\r\n        roomOccupants.id = genRoomOccupantName(roomName);\r\n        roomOccupants.className = \"roomOccupants\";\r\n        roomdiv.appendChild(roomOccupants);\r\n        $(roomdiv).append(\" -<a href=\\\"javascript:\\leaveRoom('\" + roomName + \"')\\\">leave</a>\");\r\n    }\r\n\r\n    var roomParms = null;\r\n    if (parmString && parmString !== \"\") {\r\n        try {\r\n            roomParms = JSON.parse(parmString);\r\n        } catch (error) {\r\n            roomParms = null;\r\n            easyrtc.showError(easyrtc.errCodes.DEVELOPER_ERR, \"Room Parameters must be an object containing key/value pairs. eg: {\\\"fruit\\\":\\\"banana\\\",\\\"color\\\":\\\"yellow\\\"}\");\r\n            return;\r\n        }\r\n    }\r\n    if (!isConnected || !userAdded) {\r\n        addRoomButton();\r\n        console.log(\"adding gui for room \" + roomName);\r\n    }\r\n    else {\r\n        console.log(\"not adding gui for room \" + roomName + \" because already connected and it's a user action\");\r\n    }\r\n    if (userAdded) {\r\n        console.log(\"calling joinRoom(\" + roomName + \") because it was a user action \");\r\n\r\n        easyrtc.joinRoom(roomName, roomParms,\r\n                function() {\r\n                   /* we'll geta room entry event for the room we were actually added to */\r\n                },\r\n                function(errorCode, errorText, roomName) {\r\n                    easyrtc.showError(errorCode, errorText + \": room name was(\" + roomName + \")\");\r\n                });\r\n    }\r\n}\r\n\r\n\r\nfunction leaveRoom(roomName) {\r\n    if (!roomName) {\r\n        roomName = document.getElementById(\"roomToAdd\").value;\r\n    }\r\n    var entry = document.getElementById(genRoomDivName(roomName));\r\n    var roomButtonHolder = document.getElementById('rooms');\r\n    easyrtc.leaveRoom(roomName, null);\r\n    roomButtonHolder.removeChild(entry);\r\n}\r\n\r\n\r\nfunction roomEntryListener(entered, roomName) {\r\n    if (entered) { // entered a room\r\n        console.log(\"saw add of room \" + roomName);\r\n        addRoom(roomName, null, false);\r\n    }\r\n    else {\r\n        var roomNode = document.getElementById(genRoomDivName(roomName));\r\n        if (roomNode) {\r\n            document.getElementById('#rooms').removeChildNode(roomNode);\r\n        }\r\n    }\r\n    refreshRoomList();\r\n}\r\n\r\n\r\nfunction refreshRoomList() {\r\n    if( isConnected) {\r\n        easyrtc.getRoomList(addQuickJoinButtons, null);\r\n    }\r\n}\r\n\r\n\r\nfunction peerListener(who, msgType, content, targeting) {\r\n    addToConversation(who, msgType, content, targeting);\r\n}\r\n\r\nfunction connect() {\r\n    easyrtc.setPeerListener(peerListener);\r\n    easyrtc.setRoomOccupantListener(occupantListener);\r\n    easyrtc.setRoomEntryListener(roomEntryListener);\r\n    easyrtc.setDisconnectListener(function() {\r\n        jQuery('#rooms').empty();\r\n        document.getElementById(\"main\").className = \"notconnected\";\r\n        console.log(\"disconnect listener fired\");\r\n    });\r\n    updatePresence();\r\n    var username = document.getElementById(\"userNameField\").value;\r\n    var password = document.getElementById(\"credentialField\").value;\r\n    if (username) {\r\n        easyrtc.setUsername(username);\r\n    }\r\n    if (password) {\r\n        easyrtc.setCredential({password: password});\r\n    }\r\n    easyrtc.connect(\"easyrtc.instantMessaging\", loginSuccess, loginFailure);\r\n}\r\n\r\nfunction disconnect() {\r\n    easyrtc.disconnect();\r\n}\r\n\r\nfunction addQuickJoinButtons(roomList) {\r\n    var quickJoinBlock = document.getElementById(\"quickJoinBlock\");\r\n    var n = quickJoinBlock.childNodes.length;\r\n    for (var i = n - 1; i >= 0; i--) {\r\n        quickJoinBlock.removeChild(quickJoinBlock.childNodes[i]);\r\n    }\r\n    function addQuickJoinButton(roomname, numberClients) {\r\n        var checkid = \"roomblock_\" + roomname;\r\n        if (document.getElementById(checkid)) {\r\n            return; // already present so don't add again\r\n        }\r\n        var id = \"quickjoin_\" + roomname;\r\n        var div = document.createElement(\"div\");\r\n        div.id = id;\r\n        div.className = \"quickJoin\";\r\n        var parmsField = document.getElementById(\"optRoomParms\");\r\n        var button = document.createElement(\"button\");\r\n        button.onclick = function() {\r\n            addRoom(roomname, parmsField.value, true);\r\n            refreshRoomList();\r\n        };\r\n        button.appendChild(document.createTextNode(\"Join \" + roomname + \"(\" + numberClients + \")\"));\r\n        div.appendChild(button);\r\n        quickJoinBlock.appendChild(div);\r\n\r\n    }\r\n    if( !roomList[\"room1\"]) {\r\n        roomList[\"room1\"] = { numberClients:0};\r\n    }\r\n    if( !roomList[\"room2\"]) {\r\n        roomList[\"room2\"] = { numberClients:0};\r\n    }\r\n    if( !roomList[\"room3\"]) {\r\n        roomList[\"room3\"] = { numberClients:0};\r\n    }\r\n    for (var roomName in roomList) {\r\n        addQuickJoinButton(roomName, roomList[roomName].numberClients);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction occupantListener(roomName, occupants, isPrimary) {\r\n    if (roomName === null) {\r\n        return;\r\n    }\r\n    var roomId = genRoomOccupantName(roomName);\r\n    var roomDiv = document.getElementById(roomId);\r\n    if (!roomDiv) {\r\n        addRoom(roomName, \"\", false);\r\n        roomDiv = document.getElementById(roomId);\r\n    }\r\n    else {\r\n        jQuery(roomDiv).empty();\r\n    }\r\n    for (var easyrtcid in occupants) {\r\n        var button = document.createElement(\"button\");\r\n        button.onclick = (function(roomname, easyrtcid) {\r\n            return function() {\r\n                sendMessage(easyrtcid, roomName);\r\n            };\r\n        })(roomName, easyrtcid);\r\n        var presenceText = \"\";\r\n        if (occupants[easyrtcid].presence) {\r\n            presenceText += \"(\";\r\n            if (occupants[easyrtcid].presence.show) {\r\n                presenceText += \"show=\" + occupants[easyrtcid].presence.show + \" \";\r\n            }\r\n            if (occupants[easyrtcid].presence.status) {\r\n                presenceText += \"status=\" + occupants[easyrtcid].presence.status;\r\n            }\r\n            presenceText += \")\";\r\n        }\r\n        var label = document.createTextNode(easyrtc.idToName(easyrtcid) + presenceText);\r\n        button.appendChild(label);\r\n        roomDiv.appendChild(button);\r\n    }\r\n    refreshRoomList();\r\n}\r\n\r\n\r\n\r\nfunction getGroupId() {\r\n        return null;\r\n}\r\n\r\n\r\nfunction sendMessage(destTargetId, destRoom) {\r\n    var text = document.getElementById('sendMessageText').value;\r\n    if (text.replace(/\\s/g, \"\").length === 0) { // Don't send just whitespace\r\n        return;\r\n    }\r\n    var dest;\r\n    var destGroup = getGroupId();\r\n    if (destRoom || destGroup) {\r\n        dest = {};\r\n        if (destRoom) {\r\n            dest.targetRoom = destRoom;\r\n        }\r\n        if (destGroup) {\r\n            dest.targetGroup = destGroup;\r\n        }\r\n        if (destTargetId) {\r\n            dest.targetEasyrtcid = destTargetId;\r\n        }\r\n    }\r\n    else if (destTargetId) {\r\n        dest = destTargetId;\r\n    }\r\n    else {\r\n        easyrtc.showError(\"user error\", \"no destination selected\");\r\n        return;\r\n    }\r\n\r\n    if( text === \"empty\") {\r\n         easyrtc.sendPeerMessage(dest, \"message\");\r\n    }\r\n    else {\r\n    easyrtc.sendDataWS(dest, \"message\", text, function(reply) {\r\n        if (reply.msgType === \"error\") {\r\n            easyrtc.showError(reply.msgData.errorCode, reply.msgData.errorText);\r\n        }\r\n    });\r\n    }\r\n    addToConversation(\"Me\", \"message\", text);\r\n    document.getElementById('sendMessageText').value = \"\";\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtcid;\r\n    refreshRoomList();\r\n    isConnected = true;\r\n    displayFields();\r\n    document.getElementById(\"main\").className = \"connected\";\r\n}\r\n\r\n\r\nfunction displayFields() {\r\n\r\n    var outstr = \"Application fields<div style='margin-left:1em'>\";\r\n    outstr += JSON.stringify(easyrtc.getApplicationFields());\r\n    outstr += \"</div><br>\";\r\n\r\n    outstr += \"Session fields<div style='margin-left:1em'>\";\r\n    outstr += JSON.stringify(easyrtc.getSessionFields());\r\n    outstr += \"</div><br>\";\r\n\r\n    outstr += \"Connection fields<div style='margin-left:1em'>\";\r\n    outstr += JSON.stringify(easyrtc.getConnectionFields());\r\n    outstr += \"</div><br>\";\r\n\r\n    var roomlist = easyrtc.getRoomsJoined();\r\n    for (var roomname in roomlist) {\r\n        var roomfields = easyrtc.getRoomFields(roomname);\r\n        if (roomfields != null) {\r\n            outstr += \"Room \" + roomname + \" fields<div style='margin-left:1em'>\";\r\n            outstr += JSON.stringify(roomfields);\r\n            outstr += \"</div><br>\";\r\n        }\r\n    }\r\n    document.getElementById('fields').innerHTML = outstr;\r\n}\r\n\r\n\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(\"LOGIN-FAILURE\", message);\r\n    document.getElementById('connectButton').disabled = false;\r\n    jQuery('#rooms').empty();\r\n}\r\n\r\nvar currentShowState = 'chat';\r\nvar currentShowText = '';\r\n\r\nfunction setPresence(value) {\r\n    currentShowState = value;\r\n    updatePresence();\r\n}\r\n\r\nfunction updatePresenceStatus(value) {\r\n    currentShowText = value;\r\n    updatePresence();\r\n}\r\n\r\nfunction updatePresence()\r\n{\r\n    easyrtc.updatePresence(currentShowState, currentShowText);\r\n}\r\n\r\nfunction queryRoomNames() {\r\n    var roomName = document.getElementById(\"queryRoom\").value;\r\n    if( !roomName ) {\r\n        roomName = \"default\";\r\n    }\r\n    if( roomName ) {\r\n        console.log(\"getRoomOccupantsAsArray(\"+ roomName + \")=\" + JSON.stringify(easyrtc.getRoomOccupantsAsArray(roomName)));\r\n        console.log(\"getRoomOccupantsAsMap(\" + roomName + \")=\" + JSON.stringify(easyrtc.getRoomOccupantsAsMap(roomName)));\r\n    }\r\n}\r\nfunction addApiField() {\r\n    var roomName = document.getElementById(\"apiroomname\").value;\r\n    var fieldname = document.getElementById(\"apifieldname\").value;\r\n    var fieldvaluetext = document.getElementById(\"apifieldvalue\").value;\r\n    var fieldvalue;\r\n    if(fieldvaluetext.indexOf(\"{\") >= 0) {\r\n        fieldvalue = JSON.parse(fieldvaluetext);\r\n    }\r\n    else {\r\n        fieldvalue = fieldvaluetext;\r\n    }\r\n    easyrtc.setRoomApiField(roomName, fieldname, fieldvalue);\r\n}\r\n\r\n\r\nfunction getIdsOfName() {\r\n   var name = document.getElementById(\"targetName\").value;\r\n   var ids = easyrtc.usernameToIds(name);\r\n   document.getElementById(\"foundIds\").innerHTML = JSON.stringify(ids);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_instant_messaging_selfconnect.js":"//\n//Copyright (c) 2016, Skedans Systems, Inc.\n//All rights reserved.\n//\n//Redistribution and use in source and binary forms, with or without\n//modification, are permitted provided that the following conditions are met:\n//\n//    * Redistributions of source code must retain the above copyright notice,\n//      this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n//\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n//POSSIBILITY OF SUCH DAMAGE.\n//\nvar selfEasyrtcid = \"\";\nfunction addToConversation(who, msgType, content) {\n    // Escape html special characters, then add linefeeds.\n    content = content.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n    content = content.replace(/\\n/g, '<br />');\n    document.getElementById('conversation').innerHTML +=\n    \"<b>\" + who + \":</b>&nbsp;\" + content + \"<br />\";\n}\n\n\n\nfunction connect(immediateMode) {\n    easyrtc.setPeerListener(addToConversation);\n    easyrtc.setRoomOccupantListener(convertListToButtons);\n    \n    var mysocket = io.connect(null, {\n                'connect timeout': 10000,\n                'force new connection': true\n            });\n            \n          \n    if (!mysocket) {\n        throw \"io.connect failed\";\n    }\n    else {\n        console.log(\"application allocated socket \", mysocket);\n        easyrtc.useThisSocketConnection(mysocket);\n    }\n    if( immediateMode) {\n        easyrtc.connect(\"easyrtc.reconnect\", loginSuccess, loginFailure);\n    }\n    else {\n        setTimeout(function() {\n            easyrtc.connect(\"easyrtc.reconnect\", loginSuccess, loginFailure);\n        }, 10*1000);\n    }\n}\n\n\nfunction convertListToButtons (roomName, occupants, isPrimary) {\n    var otherClientDiv = document.getElementById('otherClients');\n    while (otherClientDiv.hasChildNodes()) {\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\n    }\n\n    for(var easyrtcid in occupants) {\n        var button = document.createElement('button');\n        button.onclick = function(easyrtcid) {\n            return function() {\n                sendStuffWS(easyrtcid);\n            };\n        }(easyrtcid);\n        var label = document.createTextNode(\"Send to \" + easyrtc.idToName(easyrtcid));\n        button.appendChild(label);\n\n        otherClientDiv.appendChild(button);\n    }\n    if( !otherClientDiv.hasChildNodes() ) {\n        otherClientDiv.innerHTML = \"<em>Nobody else logged in to talk to...</em>\";\n    }\n}\n\n\nfunction sendStuffWS(otherEasyrtcid) {\n    var text = document.getElementById('sendMessageText').value;\n    if(text.replace(/\\s/g, \"\").length === 0) { // Don't send just whitespace\n        return;\n    }\n\n    easyrtc.sendDataWS(otherEasyrtcid, \"message\",  text);\n    addToConversation(\"Me\", \"message\", text);\n    document.getElementById('sendMessageText').value = \"\";\n}\n\n\nfunction loginSuccess(easyrtcid) {\n    selfEasyrtcid = easyrtcid;\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtcid;\n    document.getElementById(\"buttonImmediate\").enabled = false;\n    document.getElementById(\"buttonDelayed\").enabled = false;\n}\n\n\nfunction loginFailure(errorCode, message) {\n    easyrtc.showError(errorCode, message);\n}\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_lowbandwidth.js":"var selfEasyrtcid = \"\";\n\n\nfunction connect() {\n\n    var localFilter = easyrtc.buildLocalSdpFilter( {\n        audioRecvBitrate:20, videoRecvBitrate:30\n    });\n    var remoteFilter = easyrtc.buildRemoteSdpFilter({\n        audioSendBitrate: 20, videoSendBitrate:30\n    });\n    easyrtc.setSdpFilters(localFilter, remoteFilter);\n    easyrtc.setRoomOccupantListener(convertListToButtons);\n    easyrtc.easyApp(\"easyrtc.lowbandwidth\", \"selfVideo\", [\"callerVideo\"], loginSuccess, loginFailure);\n }\n\n\nfunction clearConnectList() {\n    var otherClientDiv = document.getElementById('otherClients');\n    while (otherClientDiv.hasChildNodes()) {\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\n    }\n}\n\n\nfunction convertListToButtons (roomName, data, isPrimary) {\n    clearConnectList();\n    var otherClientDiv = document.getElementById('otherClients');\n    for(var easyrtcid in data) {\n        var button = document.createElement('button');\n        button.onclick = function(easyrtcid) {\n            return function() {\n                performCall(easyrtcid);\n            };\n        }(easyrtcid);\n\n        var label = document.createTextNode(easyrtc.idToName(easyrtcid));\n        button.appendChild(label);\n        otherClientDiv.appendChild(button);\n    }\n}\n\n\nfunction performCall(otherEasyrtcid) {\n    easyrtc.hangupAll();\n\n    var successCB = function() {};\n    var failureCB = function() {};\n    easyrtc.call(otherEasyrtcid, successCB, failureCB);\n}\n\n\nfunction loginSuccess(easyrtcid) {\n    selfEasyrtcid = easyrtcid;\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\n}\n\n\nfunction loginFailure(errorCode, message) {\n    easyrtc.showError(errorCode, message);\n}\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_multiparty.js":"\r\n\r\nvar activeBox = -1;  // nothing selected\r\nvar aspectRatio = 4/3;  // standard definition video aspect ratio\r\nvar maxCALLERS = 3;\r\nvar numVideoOBJS = maxCALLERS+1;\r\nvar layout;\r\n\r\n\r\neasyrtc.dontAddCloseButtons(true);\r\n\r\nfunction getIdOfBox(boxNum) {\r\n    return \"box\" + boxNum;\r\n}\r\n\r\n\r\nfunction reshapeFull(parentw, parenth) {\r\n    return {\r\n        left:0,\r\n        top:0,\r\n        width:parentw,\r\n        height:parenth\r\n    };\r\n}\r\n\r\nfunction reshapeTextEntryBox(parentw, parenth) {\r\n    return {\r\n        left:parentw/4,\r\n        top:parenth/4,\r\n        width:parentw/2,\r\n        height: parenth/4\r\n    }\r\n}\r\n\r\nfunction reshapeTextEntryField(parentw, parenth) {\r\n    return {\r\n        width:parentw -40\r\n    }\r\n}\r\n\r\nvar margin = 20;\r\n\r\nfunction reshapeToFullSize(parentw, parenth) {\r\n    var left, top, width, height;\r\n    var margin= 20;\r\n\r\n    if( parentw < parenth*aspectRatio){\r\n        width = parentw -margin;\r\n        height = width/aspectRatio;\r\n    }\r\n    else {\r\n        height = parenth-margin;\r\n        width = height*aspectRatio;\r\n    }\r\n    left = (parentw - width)/2;\r\n    top = (parenth - height)/2;\r\n    return {\r\n        left:left,\r\n        top:top,\r\n        width:width,\r\n        height:height\r\n    };\r\n}\r\n\r\n//\r\n// a negative percentLeft is interpreted as setting the right edge of the object\r\n// that distance from the right edge of the parent.\r\n// Similar for percentTop.\r\n//\r\nfunction setThumbSizeAspect(percentSize, percentLeft, percentTop, parentw, parenth, aspect) {\r\n\r\n    var width, height;\r\n    if( parentw < parenth*aspectRatio){\r\n        width = parentw * percentSize;\r\n        height = width/aspect;\r\n    }\r\n    else {\r\n        height = parenth * percentSize;\r\n        width = height*aspect;\r\n    }\r\n    var left;\r\n    if( percentLeft < 0) {\r\n        left = parentw - width;\r\n    }\r\n    else {\r\n        left = 0;\r\n    }\r\n    left += Math.floor(percentLeft*parentw);\r\n    var top = 0;\r\n    if( percentTop < 0) {\r\n        top = parenth - height;\r\n    }\r\n    else {\r\n        top = 0;\r\n    }\r\n    top += Math.floor(percentTop*parenth);\r\n    return {\r\n        left:left,\r\n        top:top,\r\n        width:width,\r\n        height:height\r\n    };\r\n}\r\n\r\n\r\nfunction setThumbSize(percentSize, percentLeft, percentTop, parentw, parenth) {\r\n    return setThumbSizeAspect(percentSize, percentLeft, percentTop, parentw, parenth, aspectRatio);\r\n}\r\n\r\nfunction setThumbSizeButton(percentSize, percentLeft, percentTop, parentw, parenth, imagew, imageh) {\r\n    return setThumbSizeAspect(percentSize, percentLeft, percentTop, parentw, parenth, imagew/imageh);\r\n}\r\n\r\n\r\nvar sharedVideoWidth  = 1;\r\nvar sharedVideoHeight = 1;\r\n\r\nfunction reshape1of2(parentw, parenth) {\r\n    if( layout== 'p' ) {\r\n        return {\r\n            left: (parentw-sharedVideoWidth)/2,\r\n            top:  (parenth -sharedVideoHeight*2)/3,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        };\r\n    }\r\n    else {\r\n        return{\r\n            left: (parentw-sharedVideoWidth*2)/3,\r\n            top:  (parenth -sharedVideoHeight)/2,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction reshape2of2(parentw, parenth){\r\n    if( layout== 'p' ) {\r\n        return {\r\n            left: (parentw-sharedVideoWidth)/2,\r\n            top:  (parenth -sharedVideoHeight*2)/3 *2 + sharedVideoHeight,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        };\r\n    }\r\n    else {\r\n        return{\r\n            left: (parentw-sharedVideoWidth*2)/3 *2 + sharedVideoWidth,\r\n            top:  (parenth -sharedVideoHeight)/2,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        }\r\n    }\r\n}\r\n\r\nfunction reshape1of3(parentw, parenth) {\r\n    if( layout== 'p' ) {\r\n        return {\r\n            left: (parentw-sharedVideoWidth)/2,\r\n            top:  (parenth -sharedVideoHeight*3)/4 ,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        };\r\n    }\r\n    else {\r\n        return{\r\n            left: (parentw-sharedVideoWidth*2)/3,\r\n            top:  (parenth -sharedVideoHeight*2)/3,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        }\r\n    }\r\n}\r\n\r\nfunction reshape2of3(parentw, parenth){\r\n    if( layout== 'p' ) {\r\n        return {\r\n            left: (parentw-sharedVideoWidth)/2,\r\n            top:  (parenth -sharedVideoHeight*3)/4*2+ sharedVideoHeight,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        };\r\n    }\r\n    else {\r\n        return{\r\n            left: (parentw-sharedVideoWidth*2)/3*2+sharedVideoWidth,\r\n            top:  (parenth -sharedVideoHeight*2)/3,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        }\r\n    }\r\n}\r\n\r\nfunction reshape3of3(parentw, parenth) {\r\n    if( layout== 'p' ) {\r\n        return {\r\n            left: (parentw-sharedVideoWidth)/2,\r\n            top:  (parenth -sharedVideoHeight*3)/4*3+ sharedVideoHeight*2,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        };\r\n    }\r\n    else {\r\n        return{\r\n            left: (parentw-sharedVideoWidth*2)/3*1.5+sharedVideoWidth/2,\r\n            top:  (parenth -sharedVideoHeight*2)/3*2+ sharedVideoHeight,\r\n            width: sharedVideoWidth,\r\n            height: sharedVideoHeight\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction reshape1of4(parentw, parenth) {\r\n    return {\r\n        left: (parentw - sharedVideoWidth*2)/3,\r\n        top: (parenth - sharedVideoHeight*2)/3,\r\n        width: sharedVideoWidth,\r\n        height: sharedVideoHeight\r\n    }\r\n}\r\n\r\nfunction reshape2of4(parentw, parenth) {\r\n    return {\r\n        left: (parentw - sharedVideoWidth*2)/3*2+ sharedVideoWidth,\r\n        top: (parenth - sharedVideoHeight*2)/3,\r\n        width: sharedVideoWidth,\r\n        height: sharedVideoHeight\r\n    }\r\n}\r\nfunction reshape3of4(parentw, parenth) {\r\n    return {\r\n        left: (parentw - sharedVideoWidth*2)/3,\r\n        top: (parenth - sharedVideoHeight*2)/3*2 + sharedVideoHeight,\r\n        width: sharedVideoWidth,\r\n        height: sharedVideoHeight\r\n    }\r\n}\r\n\r\nfunction reshape4of4(parentw, parenth) {\r\n    return {\r\n        left: (parentw - sharedVideoWidth*2)/3*2 + sharedVideoWidth,\r\n        top: (parenth - sharedVideoHeight*2)/3*2 + sharedVideoHeight,\r\n        width: sharedVideoWidth,\r\n        height: sharedVideoHeight\r\n    }\r\n}\r\n\r\nvar boxUsed = [true, false, false, false];\r\nvar connectCount = 0;\r\n\r\n\r\nfunction setSharedVideoSize(parentw, parenth) {\r\n    layout = ((parentw /aspectRatio) < parenth)?'p':'l';\r\n    var w, h;\r\n\r\n    function sizeBy(fullsize, numVideos) {\r\n        return (fullsize - margin*(numVideos+1) )/numVideos;\r\n    }\r\n\r\n    switch(layout+(connectCount+1)) {\r\n        case 'p1':\r\n        case 'l1':\r\n            w = sizeBy(parentw, 1);\r\n            h = sizeBy(parenth, 1);\r\n            break;\r\n        case 'l2':\r\n            w = sizeBy(parentw, 2);\r\n            h = sizeBy(parenth, 1);\r\n            break;\r\n        case 'p2':\r\n            w = sizeBy(parentw, 1);\r\n            h = sizeBy(parenth, 2);\r\n            break;\r\n        case 'p4':\r\n        case 'l4':\r\n        case 'l3':\r\n            w = sizeBy(parentw, 2);\r\n            h = sizeBy(parenth, 2);\r\n            break;\r\n        case 'p3':\r\n            w = sizeBy(parentw, 1);\r\n            h = sizeBy(parenth, 3);\r\n            break;\r\n    }\r\n    sharedVideoWidth = Math.min(w, h * aspectRatio);\r\n    sharedVideoHeight = Math.min(h, w/aspectRatio);\r\n}\r\n\r\nvar reshapeThumbs = [\r\n    function(parentw, parenth) {\r\n\r\n        if( activeBox > 0 ) {\r\n            return setThumbSize(0.20, 0.01, 0.01, parentw, parenth);\r\n        }\r\n        else {\r\n            setSharedVideoSize(parentw, parenth)\r\n            switch(connectCount) {\r\n                case 0:return reshapeToFullSize(parentw, parenth);\r\n                case 1:return reshape1of2(parentw, parenth);\r\n                case 2:return reshape1of3(parentw, parenth);\r\n                case 3:return reshape1of4(parentw, parenth);\r\n            }\r\n        }\r\n    },\r\n    function(parentw, parenth) {\r\n        if( activeBox >= 0 || !boxUsed[1]) {\r\n            return setThumbSize(0.20, 0.01, -0.01, parentw, parenth);\r\n        }\r\n        else{\r\n            switch(connectCount) {\r\n                case 1:\r\n                    return reshape2of2(parentw, parenth);\r\n                case 2:\r\n                    return reshape2of3(parentw, parenth);\r\n                case 3:\r\n                    return reshape2of4(parentw, parenth);\r\n            }\r\n        }\r\n    },\r\n    function(parentw, parenth) {\r\n        if( activeBox >= 0 || !boxUsed[2] ) {\r\n            return setThumbSize(0.20, -0.01, 0.01, parentw, parenth);\r\n        }\r\n        else  {\r\n            switch(connectCount){\r\n                case 1:\r\n                    return reshape2of2(parentw, parenth);\r\n                case 2:\r\n                    if( !boxUsed[1]) {\r\n                        return reshape2of3(parentw, parenth);\r\n                    }\r\n                    else {\r\n                        return reshape3of3(parentw, parenth);\r\n                    }\r\n                case 3:\r\n                    return reshape3of4(parentw, parenth);\r\n            }\r\n        }\r\n    },\r\n    function(parentw, parenth) {\r\n        if( activeBox >= 0 || !boxUsed[3]) {\r\n            return setThumbSize(0.20, -0.01, -0.01, parentw, parenth);\r\n        }\r\n        else{\r\n            switch(connectCount){\r\n                case 1:\r\n                    return reshape2of2(parentw, parenth);\r\n                case 2:\r\n                    return reshape3of3(parentw, parenth);\r\n                case 3:\r\n                    return reshape4of4(parentw, parenth);\r\n            }\r\n        }\r\n    },\r\n];\r\n\r\n\r\nfunction killButtonReshaper(parentw, parenth) {\r\n    var imagew = 128;\r\n    var imageh = 128;\r\n    if( parentw < parenth) {\r\n        return setThumbSizeButton(0.1, -.51, -0.01, parentw, parenth, imagew, imageh);\r\n    }\r\n    else {\r\n        return setThumbSizeButton(0.1, -.01, -.51, parentw, parenth, imagew, imageh);\r\n    }\r\n}\r\n\r\n\r\nfunction muteButtonReshaper(parentw, parenth) {\r\n    var imagew = 32;\r\n    var imageh = 32;\r\n    if( parentw < parenth) {\r\n        return setThumbSizeButton(0.10, -.51, 0.01, parentw, parenth, imagew, imageh);\r\n    }\r\n    else {\r\n        return setThumbSizeButton(0.10, 0.01, -.51, parentw, parenth, imagew, imageh);\r\n    }\r\n}\r\n\r\nfunction reshapeTextEntryButton(parentw, parenth) {\r\n    var imagew = 32;\r\n    var imageh = 32;\r\n    if( parentw < parenth) {\r\n        return setThumbSizeButton(0.10, .51, 0.01, parentw, parenth, imagew, imageh);\r\n    }\r\n    else {\r\n        return setThumbSizeButton(0.10, 0.01, .51, parentw, parenth, imagew, imageh);\r\n    }\r\n}\r\n\r\n\r\nfunction handleWindowResize() {\r\n    var fullpage = document.getElementById('fullpage');\r\n    fullpage.style.width = window.innerWidth + \"px\";\r\n    fullpage.style.height = window.innerHeight + \"px\";\r\n    connectCount = easyrtc.getConnectionCount();\r\n\r\n    function applyReshape(obj,  parentw, parenth) {\r\n        var myReshape = obj.reshapeMe(parentw, parenth);\r\n\r\n        if(typeof myReshape.left !== 'undefined' ) {\r\n            obj.style.left = Math.round(myReshape.left) + \"px\";\r\n        }\r\n        if(typeof myReshape.top !== 'undefined' ) {\r\n            obj.style.top = Math.round(myReshape.top) + \"px\";\r\n        }\r\n        if(typeof myReshape.width !== 'undefined' ) {\r\n            obj.style.width = Math.round(myReshape.width) + \"px\";\r\n        }\r\n        if(typeof myReshape.height !== 'undefined' ) {\r\n            obj.style.height = Math.round(myReshape.height) + \"px\";\r\n        }\r\n\r\n        var n = obj.childNodes.length;\r\n        for(var i = 0; i < n; i++ ) {\r\n            var childNode = obj.childNodes[i];\r\n            if( childNode.reshapeMe) {\r\n                applyReshape(childNode, myReshape.width, myReshape.height);\r\n            }\r\n        }\r\n    }\r\n\r\n    applyReshape(fullpage, window.innerWidth, window.innerHeight);\r\n}\r\n\r\n\r\nfunction setReshaper(elementId, reshapeFn) {\r\n    var element = document.getElementById(elementId);\r\n    if( !element) {\r\n        alert(\"Attempt to apply to reshapeFn to non-existent element \" + elementId);\r\n    }\r\n    if( !reshapeFn) {\r\n        alert(\"Attempt to apply misnamed reshapeFn to element \" + elementId);\r\n    }\r\n    element.reshapeMe = reshapeFn;\r\n}\r\n\r\n\r\nfunction collapseToThumbHelper() {\r\n    if( activeBox >= 0) {\r\n        var id = getIdOfBox(activeBox);\r\n        document.getElementById(id).style.zIndex = 2;\r\n        setReshaper(id, reshapeThumbs[activeBox]);\r\n        document.getElementById('muteButton').style.display = \"none\";\r\n        document.getElementById('killButton').style.display = \"none\";\r\n        activeBox = -1;\r\n    }\r\n}\r\n\r\nfunction collapseToThumb() {\r\n    collapseToThumbHelper();\r\n    activeBox = -1;\r\n    updateMuteImage(false);\r\n    handleWindowResize();\r\n\r\n}\r\n\r\nfunction updateMuteImage(toggle) {\r\n    var muteButton = document.getElementById('muteButton');\r\n    if( activeBox > 0) { // no kill button for self video\r\n        muteButton.style.display = \"block\";\r\n        var videoObject = document.getElementById( getIdOfBox(activeBox));\r\n        var isMuted = videoObject.muted?true:false;\r\n        if( toggle) {\r\n            isMuted = !isMuted;\r\n            videoObject.muted = isMuted;\r\n        }\r\n        muteButton.src = isMuted?\"images/button_unmute.png\":\"images/button_mute.png\";\r\n    }\r\n    else {\r\n        muteButton.style.display = \"none\";\r\n    }\r\n}\r\n\r\n\r\nfunction expandThumb(whichBox) {\r\n    var lastActiveBox = activeBox;\r\n    if( activeBox >= 0 ) {\r\n        collapseToThumbHelper();\r\n    }\r\n    if( lastActiveBox != whichBox) {\r\n        var id = getIdOfBox(whichBox);\r\n        activeBox = whichBox;\r\n        setReshaper(id, reshapeToFullSize);\r\n        document.getElementById(id).style.zIndex = 1;\r\n        if( whichBox > 0) {\r\n            document.getElementById('muteButton').style.display = \"block\";\r\n            updateMuteImage();\r\n            document.getElementById('killButton').style.display = \"block\";\r\n        }\r\n    }\r\n    updateMuteImage(false);\r\n    handleWindowResize();\r\n}\r\n\r\nfunction prepVideoBox(whichBox) {\r\n    var id = getIdOfBox(whichBox);\r\n    setReshaper(id, reshapeThumbs[whichBox]);\r\n    document.getElementById(id).onclick = function() {\r\n        expandThumb(whichBox);\r\n    };\r\n}\r\n\r\n\r\nfunction killActiveBox() {\r\n    if( activeBox > 0) {\r\n        var easyrtcid = easyrtc.getIthCaller(activeBox-1);\r\n        collapseToThumb();\r\n        setTimeout( function() {\r\n            easyrtc.hangup(easyrtcid);\r\n        }, 400);\r\n    }\r\n}\r\n\r\n\r\nfunction muteActiveBox() {\r\n    updateMuteImage(true);\r\n}\r\n\r\n\r\n\r\n\r\nfunction callEverybodyElse(roomName, otherPeople) {\r\n\r\n    easyrtc.setRoomOccupantListener(null); // so we're only called once.\r\n\r\n    var list = [];\r\n    var connectCount = 0;\r\n    for(var easyrtcid in otherPeople ) {\r\n        list.push(easyrtcid);\r\n    }\r\n    //\r\n    // Connect in reverse order. Latter arriving people are more likely to have\r\n    // empty slots.\r\n    //\r\n    function establishConnection(position) {\r\n        function callSuccess() {\r\n            connectCount++;\r\n            if( connectCount < maxCALLERS && position > 0) {\r\n                establishConnection(position-1);\r\n            }\r\n        }\r\n        function callFailure(errorCode, errorText) {\r\n            easyrtc.showError(errorCode, errorText);\r\n            if( connectCount < maxCALLERS && position > 0) {\r\n                establishConnection(position-1);\r\n            }\r\n        }\r\n        easyrtc.call(list[position], callSuccess, callFailure);\r\n\r\n    }\r\n    if( list.length > 0) {\r\n        establishConnection(list.length-1);\r\n    }\r\n}\r\n\r\n\r\nfunction loginSuccess() {\r\n    expandThumb(0);  // expand the mirror image initially.\r\n}\r\n\r\n\r\nfunction cancelText() {\r\n    document.getElementById('textentryBox').style.display = \"none\";\r\n    document.getElementById('textEntryButton').style.display = \"block\";\r\n}\r\n\r\n\r\nfunction sendText(e) {\r\n    document.getElementById('textentryBox').style.display = \"none\";\r\n    document.getElementById('textEntryButton').style.display = \"block\";\r\n    var stringToSend = document.getElementById('textentryField').value;\r\n    if( stringToSend && stringToSend != \"\") {\r\n        for(var i = 0; i < maxCALLERS; i++ ) {\r\n            var easyrtcid = easyrtc.getIthCaller(i);\r\n            if( easyrtcid && easyrtcid != \"\") {\r\n                easyrtc.sendPeerMessage(easyrtcid, \"im\",  stringToSend);\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nfunction showTextEntry() {\r\n    document.getElementById('textentryField').value = \"\";\r\n    document.getElementById('textentryBox').style.display = \"block\";\r\n    document.getElementById('textEntryButton').style.display = \"none\";\r\n    document.getElementById('textentryField').focus();\r\n}\r\n\r\n\r\nfunction showMessage(startX, startY, content) {\r\n    var fullPage = document.getElementById('fullpage');\r\n    var fullW = parseInt(fullPage.offsetWidth);\r\n    var fullH = parseInt(fullPage.offsetHeight);\r\n    var centerEndX = .2*startX + .8*fullW/2;\r\n    var centerEndY = .2*startY + .8*fullH/2;\r\n\r\n\r\n    var cloudObject = document.createElement(\"img\");\r\n    cloudObject.src = \"images/cloud.png\";\r\n    cloudObject.style.width = \"1px\";\r\n    cloudObject.style.height = \"1px\";\r\n    cloudObject.style.left = startX + \"px\";\r\n    cloudObject.style.top = startY + \"px\";\r\n    fullPage.appendChild(cloudObject);\r\n\r\n    cloudObject.onload = function() {\r\n        cloudObject.style.left = startX + \"px\";\r\n        cloudObject.style.top = startY + \"px\";\r\n        cloudObject.style.width = \"4px\";\r\n        cloudObject.style.height = \"4px\";\r\n        cloudObject.style.opacity = 0.7;\r\n        cloudObject.style.zIndex = 5;\r\n        cloudObject.className = \"transit boxCommon\";\r\n        var textObject;\r\n        function removeCloud() {\r\n            if( textObject) {\r\n                fullPage.removeChild(textObject);\r\n                fullPage.removeChild(cloudObject);\r\n            }\r\n        }\r\n        setTimeout(function() {\r\n            cloudObject.style.left = centerEndX - fullW/4 + \"px\";\r\n            cloudObject.style.top = centerEndY - fullH/4+ \"px\";\r\n            cloudObject.style.width = (fullW/2) + \"px\";\r\n            cloudObject.style.height = (fullH/2) + \"px\";\r\n        }, 10);\r\n        setTimeout(function() {\r\n            textObject = document.createElement('div');\r\n            textObject.className = \"boxCommon\";\r\n            textObject.style.left = Math.floor(centerEndX-fullW/8) + \"px\";\r\n            textObject.style.top = Math.floor(centerEndY) + \"px\";\r\n            textObject.style.fontSize = \"36pt\";\r\n            textObject.style.width = (fullW*.4) + \"px\";\r\n            textObject.style.height = (fullH*.4) + \"px\";\r\n            textObject.style.zIndex = 6;\r\n            textObject.appendChild( document.createTextNode(content));\r\n            fullPage.appendChild(textObject);\r\n            textObject.onclick = removeCloud;\r\n            cloudObject.onclick = removeCloud;\r\n        }, 1000);\r\n        setTimeout(function() {\r\n            cloudObject.style.left = startX + \"px\";\r\n            cloudObject.style.top = startY + \"px\";\r\n            cloudObject.style.width = \"4px\";\r\n            cloudObject.style.height = \"4px\";\r\n            fullPage.removeChild(textObject);\r\n        }, 9000);\r\n        setTimeout(function(){\r\n            fullPage.removeChild(cloudObject);\r\n        }, 10000);\r\n    }\r\n}\r\n\r\nfunction messageListener(easyrtcid, msgType, content) {\r\n    for(var i = 0; i < maxCALLERS; i++) {\r\n        if( easyrtc.getIthCaller(i) == easyrtcid) {\r\n            var startArea = document.getElementById(getIdOfBox(i+1));\r\n            var startX = parseInt(startArea.offsetLeft) + parseInt(startArea.offsetWidth)/2;\r\n            var startY = parseInt(startArea.offsetTop) + parseInt(startArea.offsetHeight)/2;\r\n            showMessage(startX, startY, content);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction appInit() {\r\n\r\n    // Prep for the top-down layout manager\r\n    setReshaper('fullpage', reshapeFull);\r\n    for(var i = 0; i < numVideoOBJS; i++) {\r\n        prepVideoBox(i);\r\n    }\r\n    setReshaper('killButton', killButtonReshaper);\r\n    setReshaper('muteButton', muteButtonReshaper);\r\n    setReshaper('textentryBox', reshapeTextEntryBox);\r\n    setReshaper('textentryField', reshapeTextEntryField);\r\n    setReshaper('textEntryButton', reshapeTextEntryButton);\r\n\r\n    updateMuteImage(false);\r\n    window.onresize = handleWindowResize;\r\n    handleWindowResize(); //initial call of the top-down layout manager\r\n\r\n\r\n    easyrtc.setRoomOccupantListener(callEverybodyElse);\r\n    easyrtc.easyApp(\"easyrtc.multiparty\", \"box0\", [\"box1\", \"box2\", \"box3\"], loginSuccess);\r\n    easyrtc.setPeerListener(messageListener);\r\n    easyrtc.setDisconnectListener( function() {\r\n        easyrtc.showError(\"LOST-CONNECTION\", \"Lost connection to signaling server\");\r\n    });\r\n    easyrtc.setOnCall( function(easyrtcid, slot) {\r\n        console.log(\"getConnection count=\"  + easyrtc.getConnectionCount() );\r\n        boxUsed[slot+1] = true;\r\n        if(activeBox == 0 ) { // first connection\r\n            collapseToThumb();\r\n            document.getElementById('textEntryButton').style.display = 'block';\r\n        }\r\n        document.getElementById(getIdOfBox(slot+1)).style.visibility = \"visible\";\r\n        handleWindowResize();\r\n    });\r\n\r\n\r\n    easyrtc.setOnHangup(function(easyrtcid, slot) {\r\n        boxUsed[slot+1] = false;\r\n        if(activeBox > 0 && slot+1 == activeBox) {\r\n            collapseToThumb();\r\n        }\r\n        setTimeout(function() {\r\n            document.getElementById(getIdOfBox(slot+1)).style.visibility = \"hidden\";\r\n\r\n            if( easyrtc.getConnectionCount() == 0 ) { // no more connections\r\n                expandThumb(0);\r\n                document.getElementById('textEntryButton').style.display = 'none';\r\n                document.getElementById('textentryBox').style.display = 'none';\r\n            }\r\n            handleWindowResize();\r\n        },20);\r\n    });\r\n}\r\n\r\n\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_multistream_iframe.js":"//\n//Copyright (c) 2016, Skedans Systems, Inc.\n//All rights reserved.\n//\n//Redistribution and use in source and binary forms, with or without\n//modification, are permitted provided that the following conditions are met:\n//\n//    * Redistributions of source code must retain the above copyright notice,\n//      this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n//\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n//POSSIBILITY OF SUCH DAMAGE.\n//\nvar selfEasyrtcid = \"\";\nvar haveSelfVideo = false;\nvar otherEasyrtcid = null;\n\n\nfunction disable(domId) {\n    console.log(\"about to try disabling \" + domId);\n    document.getElementById(domId).disabled = \"disabled\";\n}\n\n\nfunction enable(domId) {\n    console.log(\"about to try enabling \" + domId);\n    document.getElementById(domId).disabled = \"\";\n}\n\n\nfunction createLabelledButton(buttonLabel) {\n    var button = document.createElement(\"button\");\n    button.appendChild(document.createTextNode(buttonLabel));\n    document.getElementById(\"videoSrcBlk\").appendChild(button);\n    return button;\n}\n\n\nfunction addMediaStreamToDiv(divId, stream, streamName, isLocal)\n{\n    var container = document.createElement(\"div\");\n    container.style.marginBottom = \"10px\";\n    var formattedName = streamName.replace(\"(\", \"<br>\").replace(\")\", \"\");\n    var labelBlock = document.createElement(\"div\");\n    labelBlock.style.width = \"220px\";\n    labelBlock.style.cssFloat = \"left\";\n    labelBlock.innerHTML = \"<pre>\" + formattedName + \"</pre><br>\";\n    container.appendChild(labelBlock);\n    var video = document.createElement(\"video\");\n    video.width = 320;\n    video.height = 240;\n    video.muted = isLocal;\n    video.style.verticalAlign = \"middle\";\n    container.appendChild(video);\n    document.getElementById(divId).appendChild(container);\n    video.autoplay = true;\n    easyrtc.setVideoObjectSrc(video, stream);\n    return labelBlock;\n}\n\n\n\nfunction createLocalVideo(stream, streamName) {\n    var labelBlock = addMediaStreamToDiv(\"localVideos\", stream, streamName, true);\n    var closeButton = createLabelledButton(\"close\");\n    closeButton.onclick = function() {\n        easyrtc.closeLocalStream(streamName);\n        labelBlock.parentNode.parentNode.removeChild(labelBlock.parentNode);\n    }\n    labelBlock.appendChild(closeButton);\n}\n\nfunction addSrcButton(buttonLabel, videoId) {\n    var button = createLabelledButton(buttonLabel);\n    button.onclick = function() {\n        easyrtc.setVideoSource(videoId);\n        easyrtc.initMediaSource(\n                function(stream) {\n                    createLocalVideo(stream, buttonLabel);\n                    if (otherEasyrtcid) {\n                        easyrtc.addStreamToCall(otherEasyrtcid, buttonLabel);\n                    }\n                },\n                function(errCode, errText) {\n                    easyrtc.showError(errCode, errText);\n                }, buttonLabel);\n    };\n}\n\nfunction connect() {\n    console.log(\"Initializing.\");\n    easyrtc.setRoomOccupantListener(convertListToButtons);\n    easyrtc.connect(\"easyrtc.multistream\", loginSuccess, loginFailure);\n    easyrtc.setAutoInitUserMedia(false);\n\n    easyrtc.getVideoSourceList(function(videoSrcList) {\n        for (var i = 0; i < videoSrcList.length; i++) {\n            var videoEle = videoSrcList[i];\n            var videoLabel = (videoSrcList[i].label && videoSrcList[i].label.length > 0) ?\n                    (videoSrcList[i].label) : (\"src_\" + i);\n            addSrcButton(videoLabel, videoSrcList[i].deviceId);\n        }\n    });\n    //\n    // add an extra button for screen sharing\n    //\n    var screenShareButton = createLabelledButton(\"Desktop capture/share\");\n    var numScreens = 0;\n\n    screenShareButton.onclick = function() {\n        numScreens++;\n        var streamName = \"screen\" + numScreens;\n        easyrtc.initDesktopStream(\n                function(stream) {\n                    createLocalVideo(stream, streamName);\n                    if (otherEasyrtcid) {\n                        easyrtc.addStreamToCall(otherEasyrtcid, streamName);\n                    }\n                },\n                function(errCode, errText) {\n                    easyrtc.showError(errCode, errText);\n                },\n                streamName);\n    };\n\n}\n\n\nfunction hangup() {\n    easyrtc.hangupAll();\n    disable('hangupButton');\n}\n\n\nfunction clearConnectList() {\n    var otherClientDiv = document.getElementById('otherClients');\n    while (otherClientDiv.hasChildNodes()) {\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\n    }\n}\n\n\nfunction convertListToButtons(roomName, occupants, isPrimary) {\n    clearConnectList();\n    var otherClientDiv = document.getElementById('otherClients');\n    for (var easyrtcid in occupants) {\n        var button = document.createElement('button');\n        button.onclick = function(easyrtcid) {\n            return function() {\n                performCall(easyrtcid);\n            };\n        }(easyrtcid);\n\n        var label = document.createTextNode(\"Call \" + easyrtc.idToName(easyrtcid));\n        button.appendChild(label);\n        otherClientDiv.appendChild(button);\n    }\n}\n\n\nfunction performCall(targetEasyrtcId) {\n    var acceptedCB = function(accepted, easyrtcid) {\n        if (!accepted) {\n            easyrtc.showError(\"CALL-REJECTED\", \"Sorry, your call to \" + easyrtc.idToName(easyrtcid) + \" was rejected\");\n            enable('otherClients');\n        }\n        else {\n            otherEasyrtcid = targetEasyrtcId;\n        }\n    };\n\n    var successCB = function() {\n        enable('hangupButton');\n    };\n    var failureCB = function() {\n        enable('otherClients');\n    };\n    var keys = easyrtc.getLocalMediaIds();\n\n    easyrtc.call(targetEasyrtcId, successCB, failureCB, acceptedCB, keys);\n    enable('hangupButton');\n}\n\n\nfunction loginSuccess(easyrtcid) {\n    disable(\"connectButton\");\n    //  enable(\"disconnectButton\");\n    enable('otherClients');\n    selfEasyrtcid = easyrtcid;\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\n}\n\n\nfunction loginFailure(errorCode, message) {\n    easyrtc.showError(errorCode, message);\n}\n\n\nfunction disconnect() {\n    document.getElementById(\"iam\").innerHTML = \"logged out\";\n    easyrtc.disconnect();\n    enable(\"connectButton\");\n//    disable(\"disconnectButton\");\n    clearConnectList();\n    easyrtc.setVideoObjectSrc(document.getElementById('selfVideo'), \"\");\n}\n\neasyrtc.setStreamAcceptor(function(easyrtcid, stream, streamName) {\n    var labelBlock = addMediaStreamToDiv(\"remoteVideos\", stream, streamName, false);\n    labelBlock.parentNode.id = \"remoteBlock\" + easyrtcid + streamName;\n\n});\n\n\n\neasyrtc.setOnStreamClosed(function(easyrtcid, stream, streamName) {\n    var item = document.getElementById(\"remoteBlock\" + easyrtcid + streamName);\n    item.parentNode.removeChild(item);\n});\n\n\nvar callerPending = null;\n\neasyrtc.setCallCancelled(function(easyrtcid) {\n    if (easyrtcid === callerPending) {\n        document.getElementById('acceptCallBox').style.display = \"none\";\n        callerPending = false;\n    }\n});\n\neasyrtc.setAcceptChecker(function(easyrtcid, callback) {\n    otherEasyrtcid = easyrtcid;\n    if (easyrtc.getConnectionCount() > 0) {\n        easyrtc.hangupAll();\n    }\n    callback(true, easyrtc.getLocalMediaIds());\n});\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_multistream.js":"//\n//Copyright (c) 2016, Skedans Systems, Inc.\n//All rights reserved.\n//\n//Redistribution and use in source and binary forms, with or without\n//modification, are permitted provided that the following conditions are met:\n//\n//    * Redistributions of source code must retain the above copyright notice,\n//      this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n//\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n//POSSIBILITY OF SUCH DAMAGE.\n//\nvar selfEasyrtcid = \"\";\nvar haveSelfVideo = false;\nvar otherEasyrtcid = null;\n\n\nfunction disable(domId) {\n    console.log(\"about to try disabling \"  +domId);\n    document.getElementById(domId).disabled = \"disabled\";\n}\n\n\nfunction enable(domId) {\n    console.log(\"about to try enabling \"  +domId);\n    document.getElementById(domId).disabled = \"\";\n}\n\n\nfunction createLabelledButton(buttonLabel) {\n    var button = document.createElement(\"button\");\n    button.appendChild(document.createTextNode(buttonLabel));\n    document.getElementById(\"videoSrcBlk\").appendChild(button);\n    return button;\n}\n\n\nfunction addMediaStreamToDiv(divId, stream, streamName, isLocal)\n{\n    var container = document.createElement(\"div\");\n    container.style.marginBottom = \"10px\";\n    var formattedName = streamName.replace(\"(\", \"<br>\").replace(\")\", \"\");\n    var labelBlock = document.createElement(\"div\");\n    labelBlock.style.width = \"220px\";\n    labelBlock.style.cssFloat = \"left\";\n    labelBlock.innerHTML = \"<pre>\" + formattedName + \"</pre><br>\";\n    container.appendChild(labelBlock);\n    var video = document.createElement(\"video\");\n    video.width = 320;\n    video.height = 240;\n    video.muted = isLocal;\n    video.style.verticalAlign= \"middle\";\n    container.appendChild(video);\n    document.getElementById(divId).appendChild(container);\n    video.autoplay = true;\n    easyrtc.setVideoObjectSrc(video, stream);\n    return labelBlock;\n}\n\n\n\nfunction createLocalVideo(stream, streamName) {\n    var labelBlock = addMediaStreamToDiv(\"localVideos\", stream, streamName, true);\n    var closeButton = createLabelledButton(\"close\");\n    closeButton.onclick = function() {\n        easyrtc.closeLocalStream(streamName);\n        labelBlock.parentNode.parentNode.removeChild(labelBlock.parentNode);\n    }\n    labelBlock.appendChild(closeButton);\n\n    console.log(\"created local video, stream.streamName = \" + stream.streamName);\n}\n\nfunction addSrcButton(buttonLabel, videoId) {\n    var button = createLabelledButton(buttonLabel);\n    button.onclick = function() {\n        easyrtc.setVideoSource(videoId);\n        easyrtc.initMediaSource(\n                function(stream) {\n                    createLocalVideo(stream, buttonLabel);\n                    if( otherEasyrtcid) {\n                        easyrtc.addStreamToCall(otherEasyrtcid, buttonLabel, function(easyrtcid, streamName){\n                            easyrtc.showError(\"Informational\", \"other party \" + easyrtcid + \" acknowledges receiving \" + streamName);\n                        });\n                    }\n                },\n                function(errCode, errText) {\n                    easyrtc.showError(errCode, errText);\n                }, buttonLabel);\n    };\n}\n\nfunction connect() {\n    console.log(\"Initializing.\");\n    easyrtc.setRoomOccupantListener(convertListToButtons);\n    easyrtc.connect(\"easyrtc.multistream\", loginSuccess, loginFailure);\n    easyrtc.setAutoInitUserMedia(false);\n    easyrtc.getVideoSourceList(function(videoSrcList) {\n        for (var i = 0; i < videoSrcList.length; i++) {\n             var videoEle = videoSrcList[i];\n            var videoLabel = (videoSrcList[i].label &&videoSrcList[i].label.length > 0)?\n\t\t\t(videoSrcList[i].label):(\"src_\" + i);\n            addSrcButton(videoLabel, videoSrcList[i].deviceId);\n        }\n        //\n        // add an extra button for screen sharing\n        //\n        var screenShareButton = createLabelledButton(\"Screen capture/share\");\n        var numScreens = 0;\n        if (!chrome.desktopCapture) {\n            screenShareButton.disabled = true;\n        }\n        else {\n            screenShareButton.onclick = function() {\n                numScreens++;\n                var streamName = \"screen\" + numScreens;\n                easyrtc.initScreenCapture(\n                        function(stream) {\n                            createLocalVideo(stream, streamName);\n                            if( otherEasyrtcid) {\n                                easyrtc.addStreamToCall(otherEasyrtcid, \"screen\");\n                            }\n                        },\n                        function(errCode, errText) {\n                            easyrtc.showError(errCode, errText);\n                        }, streamName);\n            };\n        }\n    });\n}\n\n\nfunction hangup() {\n    easyrtc.hangupAll();\n    disable('hangupButton');\n}\n\n\nfunction clearConnectList() {\n    var otherClientDiv = document.getElementById('otherClients');\n    while (otherClientDiv.hasChildNodes()) {\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\n    }\n}\n\n\nfunction convertListToButtons(roomName, occupants, isPrimary) {\n    clearConnectList();\n    var otherClientDiv = document.getElementById('otherClients');\n    for (var easyrtcid in occupants) {\n        var button = document.createElement('button');\n        button.onclick = function(easyrtcid) {\n            return function() {\n                performCall(easyrtcid);\n            };\n        }(easyrtcid);\n\n        var label = document.createTextNode(\"Call \" + easyrtc.idToName(easyrtcid));\n        button.appendChild(label);\n        otherClientDiv.appendChild(button);\n    }\n}\n\n\nfunction performCall(targetEasyrtcId) {\n    var acceptedCB = function(accepted, easyrtcid) {\n        if (!accepted) {\n            easyrtc.showError(\"CALL-REJECTED\", \"Sorry, your call to \" + easyrtc.idToName(easyrtcid) + \" was rejected\");\n            enable('otherClients');\n        }\n        else {\n            otherEasyrtcid = targetEasyrtcId;\n        }\n    };\n\n    var successCB = function() {\n        enable('hangupButton');\n    };\n    var failureCB = function() {\n        enable('otherClients');\n    };\n    var keys = easyrtc.getLocalMediaIds();\n\n    easyrtc.call(targetEasyrtcId, successCB, failureCB, acceptedCB, keys);\n    enable('hangupButton');\n}\n\n\nfunction loginSuccess(easyrtcid) {\n    disable(\"connectButton\");\n    //  enable(\"disconnectButton\");\n    enable('otherClients');\n    selfEasyrtcid = easyrtcid;\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\n}\n\n\nfunction loginFailure(errorCode, message) {\n    easyrtc.showError(errorCode, message);\n}\n\n\nfunction disconnect() {\n    document.getElementById(\"iam\").innerHTML = \"logged out\";\n    easyrtc.disconnect();\n    enable(\"connectButton\");\n//    disable(\"disconnectButton\");\n    clearConnectList();\n    easyrtc.setVideoObjectSrc(document.getElementById('selfVideo'), \"\");\n}\n\neasyrtc.setStreamAcceptor(function(easyrtcid, stream, streamName) {\n    var labelBlock = addMediaStreamToDiv(\"remoteVideos\", stream, streamName, false);\n    labelBlock.parentNode.id = \"remoteBlock\" + easyrtcid + streamName;\n    console.log(\"accepted incoming stream with name \" + stream.streamName);\n    console.log(\"checking incoming \" + easyrtc.getNameOfRemoteStream(easyrtcid, stream));\n});\n\n\n\neasyrtc.setOnStreamClosed(function(easyrtcid, stream, streamName) {\n    var item = document.getElementById(\"remoteBlock\" + easyrtcid + streamName);\n    item.parentNode.removeChild(item);\n});\n\n\nvar callerPending = null;\n\neasyrtc.setCallCancelled(function(easyrtcid) {\n    if (easyrtcid === callerPending) {\n        document.getElementById('acceptCallBox').style.display = \"none\";\n        callerPending = false;\n    }\n});\n\neasyrtc.setAcceptChecker(function(easyrtcid, callback) {\n    otherEasyrtcid = easyrtcid;\n    if (easyrtc.getConnectionCount() > 0) {\n        easyrtc.hangupAll();\n    }\n    callback(true, easyrtc.getLocalMediaIds());\n});\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_multistream_no_iframe.js":"//\n//Copyright (c) 2016, Skedans Systems, Inc.\n//All rights reserved.\n//\n//Redistribution and use in source and binary forms, with or without\n//modification, are permitted provided that the following conditions are met:\n//\n//    * Redistributions of source code must retain the above copyright notice,\n//      this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n//\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n//POSSIBILITY OF SUCH DAMAGE.\n//\nvar selfEasyrtcid = \"\";\nvar haveSelfVideo = false;\nvar otherEasyrtcid = null;\n\n\nfunction disable(domId) {\n    console.log(\"about to try disabling \" + domId);\n    document.getElementById(domId).disabled = \"disabled\";\n}\n\n\nfunction enable(domId) {\n    console.log(\"about to try enabling \" + domId);\n    document.getElementById(domId).disabled = \"\";\n}\n\n\nfunction createLabelledButton(buttonLabel) {\n    var button = document.createElement(\"button\");\n    button.appendChild(document.createTextNode(buttonLabel));\n    document.getElementById(\"videoSrcBlk\").appendChild(button);\n    return button;\n}\n\n\nfunction addMediaStreamToDiv(divId, stream, streamName, isLocal)\n{\n    var container = document.createElement(\"div\");\n    container.style.marginBottom = \"10px\";\n    var formattedName = streamName.replace(\"(\", \"<br>\").replace(\")\", \"\");\n    var labelBlock = document.createElement(\"div\");\n    labelBlock.style.width = \"220px\";\n    labelBlock.style.cssFloat = \"left\";\n    labelBlock.innerHTML = \"<pre>\" + formattedName + \"</pre><br>\";\n    container.appendChild(labelBlock);\n    var video = document.createElement(\"video\");\n    video.width = 320;\n    video.height = 240;\n    video.muted = isLocal;\n    video.style.verticalAlign = \"middle\";\n    container.appendChild(video);\n    document.getElementById(divId).appendChild(container);\n    video.autoplay = true;\n    easyrtc.setVideoObjectSrc(video, stream);\n    return labelBlock;\n}\n\n\n\nfunction createLocalVideo(stream, streamName) {\n    var labelBlock = addMediaStreamToDiv(\"localVideos\", stream, streamName, true);\n    var closeButton = createLabelledButton(\"close\");\n    closeButton.onclick = function() {\n        easyrtc.closeLocalStream(streamName);\n        labelBlock.parentNode.parentNode.removeChild(labelBlock.parentNode);\n    }\n    labelBlock.appendChild(closeButton);\n}\n\nfunction addSrcButton(buttonLabel, videoId) {\n    var button = createLabelledButton(buttonLabel);\n    button.onclick = function() {\n        easyrtc.setVideoSource(videoId);\n        easyrtc.initMediaSource(\n                function(stream) {\n                    createLocalVideo(stream, buttonLabel);\n                    if (otherEasyrtcid) {\n                        easyrtc.addStreamToCall(otherEasyrtcid, buttonLabel);\n                    }\n                },\n                function(errCode, errText) {\n                    easyrtc.showError(errCode, errText);\n                }, buttonLabel);\n    };\n}\n\nfunction connect() {\n    console.log(\"Initializing.\");\n    easyrtc.setRoomOccupantListener(convertListToButtons);\n    easyrtc.connect(\"easyrtc.multistream\", loginSuccess, loginFailure);\n    easyrtc.setAutoInitUserMedia(false);\n\n    easyrtc.getVideoSourceList(function(videoSrcList) {\n        for (var i = 0; i < videoSrcList.length; i++) {\n            var videoEle = videoSrcList[i];\n            var videoLabel = (videoSrcList[i].label && videoSrcList[i].label.length > 0) ?\n                    (videoSrcList[i].label) : (\"src_\" + i);\n            addSrcButton(videoLabel, videoSrcList[i].deviceId);\n        }\n    });\n    //\n    // add an extra button for screen sharing\n    //\n    var screenShareButton = createLabelledButton(\"Desktop capture/share\");\n    var numScreens = 0;\n\n    screenShareButton.onclick = function() {\n        numScreens++;\n        var streamName = \"screen\" + numScreens;\n        easyrtc.initDesktopStream(\n                function(stream) {\n                    createLocalVideo(stream, streamName);\n                    if (otherEasyrtcid) {\n                        easyrtc.addStreamToCall(otherEasyrtcid, streamName);\n                    }\n                },\n                function(errCode, errText) {\n                    easyrtc.showError(errCode, errText);\n                },\n                streamName);\n    };\n\n}\n\n\nfunction hangup() {\n    easyrtc.hangupAll();\n    disable('hangupButton');\n}\n\n\nfunction clearConnectList() {\n    var otherClientDiv = document.getElementById('otherClients');\n    while (otherClientDiv.hasChildNodes()) {\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\n    }\n}\n\n\nfunction convertListToButtons(roomName, occupants, isPrimary) {\n    clearConnectList();\n    var otherClientDiv = document.getElementById('otherClients');\n    for (var easyrtcid in occupants) {\n        var button = document.createElement('button');\n        button.onclick = function(easyrtcid) {\n            return function() {\n                performCall(easyrtcid);\n            };\n        }(easyrtcid);\n\n        var label = document.createTextNode(\"Call \" + easyrtc.idToName(easyrtcid));\n        button.appendChild(label);\n        otherClientDiv.appendChild(button);\n    }\n}\n\n\nfunction performCall(targetEasyrtcId) {\n    var acceptedCB = function(accepted, easyrtcid) {\n        if (!accepted) {\n            easyrtc.showError(\"CALL-REJECTED\", \"Sorry, your call to \" + easyrtc.idToName(easyrtcid) + \" was rejected\");\n            enable('otherClients');\n        }\n        else {\n            otherEasyrtcid = targetEasyrtcId;\n        }\n    };\n\n    var successCB = function() {\n        enable('hangupButton');\n    };\n    var failureCB = function() {\n        enable('otherClients');\n    };\n    var keys = easyrtc.getLocalMediaIds();\n\n    easyrtc.call(targetEasyrtcId, successCB, failureCB, acceptedCB, keys);\n    enable('hangupButton');\n}\n\n\nfunction loginSuccess(easyrtcid) {\n    disable(\"connectButton\");\n    //  enable(\"disconnectButton\");\n    enable('otherClients');\n    selfEasyrtcid = easyrtcid;\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\n}\n\n\nfunction loginFailure(errorCode, message) {\n    easyrtc.showError(errorCode, message);\n}\n\n\nfunction disconnect() {\n    document.getElementById(\"iam\").innerHTML = \"logged out\";\n    easyrtc.disconnect();\n    enable(\"connectButton\");\n//    disable(\"disconnectButton\");\n    clearConnectList();\n    easyrtc.setVideoObjectSrc(document.getElementById('selfVideo'), \"\");\n}\n\neasyrtc.setStreamAcceptor(function(easyrtcid, stream, streamName) {\n    var labelBlock = addMediaStreamToDiv(\"remoteVideos\", stream, streamName, false);\n    labelBlock.parentNode.id = \"remoteBlock\" + easyrtcid + streamName;\n\n    console.log(\"accepted incoming stream with name \" + stream.streamName);\n    console.log(\"checking incoming \" + easyrtc.getNameOfRemoteStream(easyrtcid, stream));\n\n});\n\n\n\neasyrtc.setOnStreamClosed(function(easyrtcid, stream, streamName) {\n    var item = document.getElementById(\"remoteBlock\" + easyrtcid + streamName);\n    item.parentNode.removeChild(item);\n});\n\n\nvar callerPending = null;\n\neasyrtc.setCallCancelled(function(easyrtcid) {\n    if (easyrtcid === callerPending) {\n        document.getElementById('acceptCallBox').style.display = \"none\";\n        callerPending = false;\n    }\n});\n\neasyrtc.setAcceptChecker(function(easyrtcid, callback) {\n    otherEasyrtcid = easyrtcid;\n    if (easyrtc.getConnectionCount() > 0) {\n        easyrtc.hangupAll();\n    }\n    callback(true, easyrtc.getLocalMediaIds());\n});\n\nvar mypluginId = \"tawk-desktop-capture/bemabaogbdfpbkkganibcmhbgjogabfj\";\n\nsetTimeout(\n     function() {\n         document.getElementById(\"pluginstatus\").innerHTML = easyrtc.isDesktopCaptureInstalled()\n             ?\"Desktop capture ready\"\n             :\"Desktop capture not installed\";\n     }, 3000);\n\ndocument.getElementById(\"installPluginButton\").onclick = function() {\nchrome.webstore.install();\n};\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_reconnect.js":"//\n//Copyright (c) 2016, Skedans Systems, Inc.\n//All rights reserved.\n//\n//Redistribution and use in source and binary forms, with or without\n//modification, are permitted provided that the following conditions are met:\n//\n//    * Redistributions of source code must retain the above copyright notice,\n//      this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n//\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n//POSSIBILITY OF SUCH DAMAGE.\n//\nvar selfEasyrtcid = \"\";\n\n\n\nfunction initApp() {\n    console.log(\"Initializing.\");\n    easyrtc.enableVideo(false);\n    easyrtc.enableAudio(false);\n    connect();\n}\n\nfunction connect() {\n    easyrtc.connect(\"easyrtc.reconnect\", loginSuccess, loginFailure);\n}\n\nfunction disconnect() {\n    easyrtc.disconnect();\n}\n\neasyrtc.enableDebug(true);\n\neasyrtc.setDisconnectListener(function() {\n   easyrtc.showError(\"xx\", \"saw disconnect\");\n});\n\n\nfunction sendDummy() {\n    easyrtc.getRoomList( \n      function() { \n         easyrtc.showError(\"xx\", \"got fresh roomlist\");\n      }, \n      function(){ \n         easyrtc.showError(\"xx\", \"failed on fresh roomlist\");\n      });\n}\n\nfunction loginSuccess(easyrtcid) {\n    document.getElementById(\"stateLabel\").innerHTML = \" connected as \" + easyrtcid;\n    easyrtc.showError(\"xx\", \"login success\");\n}\n\n\nfunction loginFailure(errorCode, message) {\n    document.getElementById(\"stateLabel\").innerHTML = \"disconnected\";\n    easyrtc.showError(\"xx\", \"login failure\");\n}\n\n\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_recording.js":"var selfEasyrtcid = \"\";\n\nfunction connect() {\n    if( !easyrtc.supportsRecording()) {\n       window.alert(\"This browser does not support recording. Try chrome or firefox.\");\n       return;\n    }\n\n    if( easyrtc.isRecordingTypeSupported(\"h264\")) document.getElementById(\"useH264\").disabled = false;\n    if( easyrtc.isRecordingTypeSupported(\"vp9\")) document.getElementById(\"useVP9\").disabled = false;\n    if( easyrtc.isRecordingTypeSupported(\"vp8\")) document.getElementById(\"useVP8\").disabled = false;\n\n    easyrtc.setVideoDims(640,480);\n    easyrtc.setRoomOccupantListener(convertListToButtons);\n    easyrtc.easyApp(\"easyrtc.audioVideoSimple\", \"selfVideo\", [\"callerVideo\"], loginSuccess, loginFailure);\n\n }\n\n\nfunction clearConnectList() {\n    var otherClientDiv = document.getElementById('otherClients');\n    while (otherClientDiv.hasChildNodes()) {\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\n    }\n}\n\n\nfunction convertListToButtons (roomName, data, isPrimary) {\n    clearConnectList();\n    var otherClientDiv = document.getElementById('otherClients');\n    for(var easyrtcid in data) {\n        var button = document.createElement('button');\n        button.onclick = function(easyrtcid) {\n            return function() {\n                performCall(easyrtcid);\n            };\n        }(easyrtcid);\n\n        var label = document.createTextNode(easyrtc.idToName(easyrtcid));\n        button.appendChild(label);\n        otherClientDiv.appendChild(button);\n    }\n}\n\n\nfunction performCall(otherEasyrtcid) {\n    easyrtc.hangupAll();\n    var successCB = function() { };\n    var failureCB = function() {};\n    easyrtc.call(otherEasyrtcid, successCB, failureCB);\n}\n\n\nfunction loginSuccess(easyrtcid) {\n    selfEasyrtcid = easyrtcid;\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtc.cleanId(easyrtcid);\n    document.getElementById(\"startRecording\").disabled = false;\n}\n\n\nfunction loginFailure(errorCode, message) {\n    easyrtc.showError(errorCode, message);\n}\n\n\nvar selfRecorder = null;\nvar callerRecorder = null;\n\nfunction startRecording() {\n    var selfLink = document.getElementById(\"selfDownloadLink\");\n    selfLink.innerText = \"\";\n\n    selfRecorder = easyrtc.recordToFile( easyrtc.getLocalStream(), \n               selfLink, \"selfVideo\");\n    if( selfRecorder ) {\n       document.getElementById(\"startRecording\").disabled = true;\n       document.getElementById(\"stopRecording\").disabled = false;\n    }\n    else {\n       window.alert(\"failed to start recorder for self\");\n       return;\n    }\n\n    var callerLink = document.getElementById(\"callerDownloadLink\");\n    callerLink.innerText = \"\";\n\n    if( easyrtc.getIthCaller(0)) {\n       callerRecorder = easyrtc.recordToFile(\n           easyrtc.getRemoteStream(easyrtc.getIthCaller(0), null), \n             callerLink, \"callerVideo\");\n       if( !callerRecorder ) {\n          window.alert(\"failed to start recorder for caller\");\n       }\n    }\n    else {\n       callerRecorder = null;\n    }\n}\n\n\nfunction endRecording() {\n    if( selfRecorder ) {\n       selfRecorder.stop();\n    }\n    if( callerRecorder ) {\n       callerRecorder.stop();\n    }\n    document.getElementById(\"startRecording\").disabled = false;\n    document.getElementById(\"stopRecording\").disabled = true;\n}\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_screen_receive.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\n\r\n\r\nfunction initApp() {\r\n    if( window.localStorage && window.localStorage.easyrtcUserName ) {\r\n        document.getElementById('userName').value = window.localStorage.easyrtcUserName;\r\n    }\r\n}\r\n\r\nfunction disable(domId) {\r\n    document.getElementById(domId).disabled = \"disabled\";\r\n}\r\n\r\n\r\nfunction enable(domId) {\r\n    document.getElementById(domId).disabled = \"\";\r\n}\r\n\r\n\r\nfunction connect() {\r\n    console.log(\"Initializing.\");\r\n\r\n    var userName = document.getElementById('userName').value;\r\n    if( !easyrtc.isNameValid(userName)) {\r\n        easyrtc.showError(\"BAD-USER-NAME\", \"illegal user name\");\r\n        return;\r\n    }\r\n\r\n    easyrtc.setUsername(userName);\r\n    if( window.localStorage ) {\r\n        window.localStorage.easyrtcUserName = document.getElementById('userName').value;\r\n    }\r\n\r\n\r\n    easyrtc.enableAudio(document.getElementById('shareAudio').checked);\r\n    easyrtc.enableVideo(false);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.connect(\"easyrtc.videoScreen\", loginSuccess, loginFailure);\r\n\r\n}\r\n\r\n\r\nfunction hangup() {\r\n    easyrtc.hangupAll();\r\n    disable('hangupButton');\r\n}\r\n\r\n\r\n\r\n//\r\n// this method actually just removes old buttons.\r\n// The adding of buttons is done with the data listener.\r\n//\r\nfunction convertListToButtons(roomName, data, isPrimary){\r\n    console.log(\"saw data list of \" + JSON.stringify(data));\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    var i, nextChild;\r\n\r\n    for( i = otherClientDiv.childNodes[0]; i; i = nextChild ){\r\n        nextChild = i.nextSibling;\r\n        var buttonId = i.id;\r\n        if( !data[buttonId]){\r\n            console.log(\"  removing button with id \" + buttonId);\r\n            otherClientDiv.removeChild(i);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction requestFullScreen() {\r\n    var elem = document.getElementById('videos');\r\n    elem.className = 'bigBox';\r\n    if (elem.requestFullscreen) {\r\n        elem.requestFullscreen();\r\n    } else if (elem.mozRequestFullScreen) {\r\n        elem.mozRequestFullScreen();\r\n    } else if (elem.webkitRequestFullscreen) {\r\n        elem.webkitRequestFullscreen();\r\n    }\r\n    var hideBox = document.getElementById('shrinkBox');\r\n    hideBox.className = 'yesShrink';\r\n    hideBox.onclick = function() {\r\n        hideBox.className = 'noShrink';\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        }\r\n        else if (document.mozCancelFullScreen) {\r\n            document.mozCancelFullScreen();\r\n        }\r\n        else if (document.webkitCancelFullScreen) {\r\n            document.webkitCancelFullScreen();\r\n        }\r\n        elem.className = 'smallBox';\r\n    };\r\n\r\n}\r\n\r\n\r\neasyrtc.setPeerListener(function(easyrtcid, msgType, data){\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    var button = document.createElement('button');\r\n    button.onclick = function(easyrtcid) {\r\n        return function() {\r\n            performCall(easyrtcid);\r\n        };\r\n    }(easyrtcid);\r\n    button.id = \"callbutton_\" +easyrtcid;\r\n    console.log(\"adding button for id =\" + easyrtcid);\r\n    var label = document.createTextNode(\"Get screen of \" + easyrtc.idToName(easyrtcid));\r\n    button.appendChild(label);\r\n    otherClientDiv.appendChild(button);\r\n});\r\n\r\n\r\nfunction performCall(otherEasyrtcid) {\r\n    easyrtc.hangupAll();\r\n    var acceptedCB = function(accepted, easyrtcid) {\r\n        if( !accepted ) {\r\n            easyrtc.showError(\"CALL-REJECTED\", \"Sorry, your call to \" + easyrtc.idToName(easyrtcid) + \" was rejected\");\r\n            enable('otherClients');\r\n        }\r\n    };\r\n\r\n    var successCB = function() {\r\n        enable('hangupButton');\r\n    };\r\n    var failureCB = function() {\r\n        enable('otherClients');\r\n    };\r\n    easyrtc.call(otherEasyrtcid, successCB, failureCB, acceptedCB);\r\n    enable('hangupButton');\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    disable(\"connectButton\");\r\n    enable(\"disconnectButton\");\r\n    enable('otherClients');\r\n    document.getElementById(\"iam\").innerHTML = \"Connected\";\r\n    selfEasyrtcid = easyrtcid;\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(\"LOGIN-FAILURE\", \"failure to login\");\r\n}\r\n\r\n\r\nfunction disconnect() {\r\n    document.getElementById(\"iam\").innerHTML = \"logged out\";\r\n    easyrtc.disconnect();\r\n    console.log(\"disconnecting from server\");\r\n    enable(\"connectButton\");\r\n    disable(\"disconnectButton\");\r\n}\r\n\r\n\r\neasyrtc.setStreamAcceptor( function(caller, stream) {\r\n    var video = document.getElementById('callerVideo');\r\n    easyrtc.setVideoObjectSrc(video,stream);\r\n    console.log(\"saw video from \" + caller);\r\n    enable(\"hangupButton\");\r\n});\r\n\r\n\r\n\r\neasyrtc.setOnStreamClosed( function (easyrtcid) {\r\n    easyrtc.setVideoObjectSrc(document.getElementById('callerVideo'), \"\");\r\n    document.cancelFullScreen();\r\n    disable(\"hangupButton\");\r\n});\r\n\r\n\r\nvar callerPending = null;\r\n\r\neasyrtc.setCallCancelled( function(easyrtcid){\r\n    if( easyrtcid === callerPending) {\r\n        document.getElementById('acceptCallBox').style.display = \"none\";\r\n        callerPending = false;\r\n    }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_screen_send.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\n\r\nfunction initApp() {\r\n    if( window.localStorage && window.localStorage.easyrtcUserName ) {\r\n        document.getElementById('userName').value = window.localStorage.easyrtcUserName;\r\n    }\r\n}\r\n\r\n\r\nfunction disable(domId) {\r\n    document.getElementById(domId).disabled = \"disabled\";\r\n}\r\n\r\n\r\nfunction enable(domId) {\r\n    document.getElementById(domId).disabled = \"\";\r\n}\r\n\r\nvar contactedListeners = {};\r\nvar nameToIdMap = {};\r\n\r\nfunction connect() {\r\n    easyrtc.enableDebug(false);\r\n    var tempName = document.getElementById('userName').value;\r\n    if(  !easyrtc.isNameValid(tempName)) {\r\n        easyrtc.showError(\"BAD-USER-NAME\", \"illegal user name\");\r\n        return;\r\n    }\r\n    easyrtc.setUsername(tempName);\r\n    if( window.localStorage && window.localStorage.easyrtcUserName ) {\r\n        window.localStorage.easyrtcUserName = tempName;\r\n    }\r\n    console.log(\"Initializing with username \" + tempName);\r\n    easyrtc.setScreenCapture();\r\n    easyrtc.enableAudio(document.getElementById(\"shareAudio\").checked);\r\n    easyrtc.setRoomOccupantListener(function (roomName, otherPeers){\r\n        var easyrtcid;\r\n        for(easyrtcid in otherPeers ) {\r\n            if( !contactedListeners[easyrtcid]) {\r\n                easyrtc.sendPeerMessage(easyrtcid, \"available\", {\r\n                    sender:true\r\n                }, function(){}, function(errCode, errorText) {\r\n                    console.log(\"messaging error\" + errorText);\r\n                });\r\n            }\r\n        }\r\n        contactedListeners = otherPeers;\r\n    });\r\n\r\n    easyrtc.setPeerListener(function(easyrtcid, msgType, data){});\r\n\r\n    easyrtc.connect(\"easyrtc.videoScreen\", loginSuccess, loginFailure);\r\n}\r\n\r\n\r\nfunction hangup() {\r\n    easyrtc.hangupAll();\r\n    disable('hangupButton');\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    disable(\"connectButton\");\r\n    disable(\"shareAudio\");\r\n    enable(\"disconnectButton\");\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"Connected\";\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n\r\n\r\nfunction disconnect() {\r\n    document.getElementById(\"iam\").innerHTML = \"logged out\";\r\n    easyrtc.disconnect();\r\n    enable(\"shareAudio\");\r\n    console.log(\"disconnecting from server\");\r\n    enable(\"connectButton\");\r\n    disable(\"disconnectButton\");\r\n    easyrtc.setVideoObjectSrc(document.getElementById('callerAudio'), \"\");\r\n}\r\n\r\n\r\neasyrtc.setStreamAcceptor( function(easyrtcid, stream) {\r\n    var audio = document.getElementById('callerAudio');\r\n    easyrtc.setVideoObjectSrc(audio,stream);\r\n    console.log(\"got audio from \" + easyrtc.idToName(easyrtcid));\r\n    enable(\"hangupButton\");\r\n});\r\n\r\n\r\n\r\neasyrtc.setOnStreamClosed( function (easyrtcid) {\r\n    easyrtc.setVideoObjectSrc(document.getElementById('callerAudio'), \"\");\r\n    disable(\"hangupButton\");\r\n});\r\n\r\n\r\nvar callerPending = null;\r\n\r\neasyrtc.setCallCancelled( function(easyrtcid){\r\n    if( easyrtcid === callerPending) {\r\n        document.getElementById('acceptCallBox').style.display = \"none\";\r\n        callerPending = false;\r\n    }\r\n});\r\n\r\n\r\neasyrtc.setAcceptChecker(function(easyrtcid, cb) {\r\n    document.getElementById('acceptCallBox').style.display = \"block\";\r\n    callerPending = easyrtcid;\r\n\r\n   document.getElementById('acceptCallLabel').innerHTML = \"Accept incoming call from \" + easyrtc.idToName(easyrtcid) + \" ?\";\r\n\r\n    var acceptTheCall = function(wasAccepted) {\r\n        document.getElementById('acceptCallBox').style.display = \"none\";\r\n        cb(wasAccepted);\r\n        callerPending = null;\r\n    };\r\n    document.getElementById(\"callAcceptButton\").onclick = function() {\r\n        console.log(\"accepted the call\");\r\n        acceptTheCall(true);\r\n    };\r\n    document.getElementById(\"callRejectButton\").onclick =function() {\r\n        console.log(\"rejected the call\");\r\n        acceptTheCall(false);\r\n    };\r\n} );\r\n","/home/travis/build/npmtest/node-npmtest-easyrtc/node_modules/easyrtc/demos/js/demo_video_only.js":"//\r\n//Copyright (c) 2016, Skedans Systems, Inc.\r\n//All rights reserved.\r\n//\r\n//Redistribution and use in source and binary forms, with or without\r\n//modification, are permitted provided that the following conditions are met:\r\n//\r\n//    * Redistributions of source code must retain the above copyright notice,\r\n//      this list of conditions and the following disclaimer.\r\n//    * Redistributions in binary form must reproduce the above copyright\r\n//      notice, this list of conditions and the following disclaimer in the\r\n//      documentation and/or other materials provided with the distribution.\r\n//\r\n//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n//AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n//IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n//ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n//LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n//CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n//SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n//INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n//CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n//ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n//POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nvar selfEasyrtcid = \"\";\r\n\r\nfunction disable(domId) {\r\n    document.getElementById(domId).disabled = \"disabled\";\r\n}\r\n\r\n\r\nfunction enable(domId) {\r\n    document.getElementById(domId).disabled = \"\";\r\n}\r\n\r\n\r\nfunction connect() {\r\n    easyrtc.enableDebug(false);\r\n    console.log(\"Initializing.\");\r\n    easyrtc.enableAudio(false);\r\n    easyrtc.enableAudioReceive(false);\r\n    easyrtc.setRoomOccupantListener(convertListToButtons);\r\n    easyrtc.initMediaSource(\r\n        function(){        // success callback\r\n            var selfVideo = document.getElementById(\"selfVideo\");\r\n            easyrtc.setVideoObjectSrc(selfVideo, easyrtc.getLocalStream());\r\n            easyrtc.connect(\"easyrtc.videoOnly\", loginSuccess, loginFailure);\r\n        },\r\n        function(errorCode, errmesg){\r\n            easyrtc.showError(\"MEDIA-ERROR\", errmesg);\r\n        }  // failure callback\r\n        );\r\n}\r\n\r\n\r\nfunction terminatePage() {\r\n    easyrtc.disconnect();\r\n}\r\n\r\n\r\nfunction hangup() {\r\n    easyrtc.hangupAll();\r\n    disable('hangupButton');\r\n}\r\n\r\n\r\nfunction clearConnectList() {\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    while (otherClientDiv.hasChildNodes()) {\r\n        otherClientDiv.removeChild(otherClientDiv.lastChild);\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction convertListToButtons (roomName, occupants, isPrimary) {\r\n    clearConnectList();\r\n    var otherClientDiv = document.getElementById('otherClients');\r\n    for(var easyrtcid in occupants) {\r\n        var button = document.createElement('button');\r\n        button.onclick = function(easyrtcid) {\r\n            return function() {\r\n                performCall(easyrtcid);\r\n            };\r\n        }(easyrtcid);\r\n\r\n        var label = document.createTextNode( easyrtc.idToName(easyrtcid));\r\n        button.appendChild(label);\r\n        otherClientDiv.appendChild(button);\r\n    }\r\n    if( !otherClientDiv.hasChildNodes() ) {\r\n        otherClientDiv.innerHTML = \"<em>Nobody else is on...</em>\";\r\n    }\r\n}\r\n\r\n\r\nfunction performCall(otherEasyrtcid) {\r\n    easyrtc.hangupAll();\r\n    var acceptedCB = function(accepted, easyrtcid) {\r\n        if( !accepted ) {\r\n            easyrtc.showError(\"CALL-REJECTED\", \"Sorry, your call to \" + easyrtc.idToName(easyrtcid) + \" was rejected\");\r\n            enable('otherClients');\r\n        }\r\n    };\r\n    var successCB = function() {\r\n        enable('hangupButton');\r\n    };\r\n    var failureCB = function() {\r\n        enable('otherClients');\r\n    };\r\n    easyrtc.call(otherEasyrtcid, successCB, failureCB, acceptedCB);\r\n}\r\n\r\n\r\nfunction loginSuccess(easyrtcid) {\r\n    disable(\"connectButton\");\r\n    // enable(\"disconnectButton\");\r\n    enable('otherClients');\r\n    selfEasyrtcid = easyrtcid;\r\n    document.getElementById(\"iam\").innerHTML = \"I am \" + easyrtcid;\r\n}\r\n\r\n\r\nfunction loginFailure(errorCode, message) {\r\n    easyrtc.showError(errorCode, message);\r\n}\r\n\r\n\r\nfunction disconnect() {\r\n    document.getElementById(\"iam\").innerHTML = \"logged out\";\r\n    easyrtc.disconnect();\r\n    console.log(\"disconnecting from server\");\r\n    enable(\"connectButton\");\r\n    // disable(\"disconnectButton\");\r\n    clearConnectList();\r\n    easyrtc.setVideoObjectSrc(document.getElementById('selfVideo'), \"\");\r\n}\r\n\r\n\r\neasyrtc.setStreamAcceptor( function(easyrtcid, stream) {\r\n    var video = document.getElementById('callerVideo');\r\n    easyrtc.setVideoObjectSrc(video,stream);\r\n    console.log(\"saw video from \" + easyrtcid);\r\n    enable(\"hangupButton\");\r\n});\r\n\r\n\r\neasyrtc.setOnStreamClosed( function (easyrtcid) {\r\n    easyrtc.setVideoObjectSrc(document.getElementById('callerVideo'), \"\");\r\n    disable(\"hangupButton\");\r\n});\r\n\r\n\r\neasyrtc.setAcceptChecker(function(easyrtcid, callback) {\r\n    document.getElementById('acceptCallBox').style.display = \"block\";\r\n    if( easyrtc.getConnectionCount() > 0 ) {\r\n        document.getElementById('acceptCallLabel').innerHTML = \"Drop current call and accept new from \" + easyrtc.idToName(easyrtcid) + \" ?\";\r\n    }\r\n    else {\r\n        document.getElementById('acceptCallLabel').innerHTML = \"Accept incoming call from \" + easyrtc.idToName(easyrtcid) +  \" ?\";\r\n    }\r\n    var acceptTheCall = function(wasAccepted) {\r\n        document.getElementById('acceptCallBox').style.display = \"none\";\r\n        if( wasAccepted && easyrtc.getConnectionCount() > 0 ) {\r\n            easyrtc.hangupAll();\r\n        }\r\n        callback(wasAccepted);\r\n    };\r\n    document.getElementById(\"callAcceptButton\").onclick = function() {\r\n        acceptTheCall(true);\r\n    };\r\n    document.getElementById(\"callRejectButton\").onclick =function() {\r\n        acceptTheCall(false);\r\n    };\r\n} );\r\n"}